import { ElementRef, OnDestroy, ViewContainerRef } from '@angular/core';
import { TuiBooleanHandler } from '@taiga-ui/cdk';
import { TuiDriver, TuiRectAccessor } from '@taiga-ui/core/abstract';
import { BehaviorSubject, Observable } from 'rxjs';
import { TuiDropdownDirective } from './dropdown.directive';
import * as i0 from "@angular/core";
export declare class TuiDropdownSelectionDirective extends TuiDriver implements TuiRectAccessor, OnDestroy {
    protected range: Range;
    protected readonly doc: Document;
    protected readonly selection$: Observable<unknown>;
    protected readonly el: ElementRef<HTMLElement>;
    protected readonly vcr: ViewContainerRef;
    protected readonly dropdown: TuiDropdownDirective;
    private ghost?;
    protected readonly handler$: BehaviorSubject<TuiBooleanHandler<Range>>;
    protected readonly stream$: Observable<boolean>;
    position: 'selection' | 'tag' | 'word';
    set tuiDropdownSelection(visible: TuiBooleanHandler<Range> | string);
    readonly type = "dropdown";
    constructor(range: Range, doc: Document, selection$: Observable<unknown>, el: ElementRef<HTMLElement>, vcr: ViewContainerRef, dropdown: TuiDropdownDirective);
    getClientRect(): ClientRect;
    ngOnDestroy(): void;
    protected getRange(): Range;
    /**
     * Check if given range is at least partially inside dropdown
     */
    protected inDropdown(range: Range): boolean;
    private veryVerySadInputFix;
    /**
     * Check if Node is inside dropdown
     */
    private boxContains;
    /**
     * Create an invisible DIV styled exactly like input/textarea element inside directive
     */
    private initGhost;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiDropdownSelectionDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TuiDropdownSelectionDirective, "[tuiDropdown][tuiDropdownSelection]", never, { "position": "tuiDropdownSelectionPosition"; "tuiDropdownSelection": "tuiDropdownSelection"; }, {}, never>;
}
