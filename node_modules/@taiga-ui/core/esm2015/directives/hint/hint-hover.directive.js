/* eslint-disable rxjs/no-unsafe-takeuntil */
import { Directive, ElementRef, Inject, Input, Optional, SkipSelf } from '@angular/core';
import { TuiHoveredService } from '@taiga-ui/cdk';
import { tuiAsDriver, TuiDriver } from '@taiga-ui/core/abstract';
import { tuiIsObscured } from '@taiga-ui/core/utils';
import { merge, of, Subject } from 'rxjs';
import { delay, filter, map, repeat, switchMap, takeUntil, tap } from 'rxjs/operators';
import { TUI_HINT_OPTIONS } from './hint-options.directive';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiHintHoverDirective extends TuiDriver {
    constructor(hovered$, options, el, parent) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.hovered$ = hovered$;
        this.options = options;
        this.el = el;
        this.parent = parent;
        this.visible = false;
        this.toggle$ = new Subject();
        this.stream$ = merge(this.toggle$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? 0 : this.hideDelay))), takeUntil(this.hovered$), repeat()), this.hovered$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? this.showDelay : this.hideDelay))), takeUntil(this.toggle$), repeat())).pipe(filter(() => this.enabled), map(value => value &&
            (this.el.nativeElement.hasAttribute('tuiHintPointer') ||
                !tuiIsObscured(this.el.nativeElement))), tap(visible => {
            this.visible = visible;
        }));
        this.showDelay = this.options.showDelay;
        this.hideDelay = this.options.hideDelay;
        this.type = 'hint';
        this.enabled = true;
    }
    toggle(visible = !this.visible) {
        var _a;
        this.toggle$.next(visible);
        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.toggle(visible);
    }
}
TuiHintHoverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintHoverDirective, deps: [{ token: TuiHoveredService }, { token: TUI_HINT_OPTIONS }, { token: ElementRef }, { token: TuiHintHoverDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintHoverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: { showDelay: ["tuiHintShowDelay", "showDelay"], hideDelay: ["tuiHintHideDelay", "hideDelay"] }, providers: [tuiAsDriver(TuiHintHoverDirective), TuiHoveredService], exportAs: ["tuiHintHover"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintHoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHint]:not(ng-container):not(ng-template)',
                    providers: [tuiAsDriver(TuiHintHoverDirective), TuiHoveredService],
                    exportAs: 'tuiHintHover',
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: TuiHintHoverDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TuiHintHoverDirective]
                }] }]; }, propDecorators: { showDelay: [{
                type: Input,
                args: ['tuiHintShowDelay']
            }], hideDelay: [{
                type: Input,
                args: ['tuiHintHideDelay']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1ob3Zlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvaGludC9oaW50LWhvdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2Q0FBNkM7QUFDN0MsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsS0FBSyxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXJGLE9BQU8sRUFBQyxnQkFBZ0IsRUFBaUIsTUFBTSwwQkFBMEIsQ0FBQzs7O0FBTzFFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxTQUFTO0lBdUNoRCxZQUNnRCxRQUE2QixFQUM5QixPQUF1QixFQUNyQyxFQUEyQixFQUl2QyxNQUFvQztRQUVyRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBUlosYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFDOUIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDckMsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUFJdkMsV0FBTSxHQUFOLE1BQU0sQ0FBOEI7UUE3Q2pELFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDUCxZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUNqQyxZQUFPLEdBQUcsS0FBSyxDQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDYixTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFDM0UsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDeEIsTUFBTSxFQUFFLENBQ1gsRUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDZCxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDaEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDckUsRUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUN2QixNQUFNLEVBQUUsQ0FDWCxDQUNKLENBQUMsSUFBSSxDQUNGLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQzFCLEdBQUcsQ0FDQyxLQUFLLENBQUMsRUFBRSxDQUNKLEtBQUs7WUFDTCxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDakQsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUNqRCxFQUNELEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUNMLENBQUM7UUFHRixjQUFTLEdBQWdDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBR2hFLGNBQVMsR0FBZ0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFdkQsU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUV2QixZQUFPLEdBQUcsSUFBSSxDQUFDO0lBWWYsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTzs7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7bUhBdERRLHFCQUFxQixrQkF3Q2xCLGlCQUFpQixhQUNqQixnQkFBZ0IsYUFDaEIsVUFBVSxhQUdWLHFCQUFxQjt1R0E3Q3hCLHFCQUFxQiwrS0FIbkIsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQzs0RkFHekQscUJBQXFCO2tCQUxqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSw4Q0FBOEM7b0JBQ3hELFNBQVMsRUFBRSxDQUFDLFdBQVcsdUJBQXVCLEVBQUUsaUJBQWlCLENBQUM7b0JBQ2xFLFFBQVEsRUFBRSxjQUFjO2lCQUMzQjs7MEJBeUNRLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDeEIsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUN2QixNQUFNOzJCQUFDLFVBQVU7OEJBSU8scUJBQXFCOzBCQUg3QyxRQUFROzswQkFDUixRQUFROzswQkFDUixNQUFNOzJCQUFDLHFCQUFxQjs0Q0FmakMsU0FBUztzQkFEUixLQUFLO3VCQUFDLGtCQUFrQjtnQkFJekIsU0FBUztzQkFEUixLQUFLO3VCQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJ4anMvbm8tdW5zYWZlLXRha2V1bnRpbCAqL1xuaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUhvdmVyZWRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7dHVpQXNEcml2ZXIsIFR1aURyaXZlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYWJzdHJhY3QnO1xuaW1wb3J0IHt0dWlJc09ic2N1cmVkfSBmcm9tICdAdGFpZ2EtdWkvY29yZS91dGlscyc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlbGF5LCBmaWx0ZXIsIG1hcCwgcmVwZWF0LCBzd2l0Y2hNYXAsIHRha2VVbnRpbCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VFVJX0hJTlRfT1BUSU9OUywgVHVpSGludE9wdGlvbnN9IGZyb20gJy4vaGludC1vcHRpb25zLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUhpbnRdOm5vdChuZy1jb250YWluZXIpOm5vdChuZy10ZW1wbGF0ZSknLFxuICAgIHByb3ZpZGVyczogW3R1aUFzRHJpdmVyKFR1aUhpbnRIb3ZlckRpcmVjdGl2ZSksIFR1aUhvdmVyZWRTZXJ2aWNlXSxcbiAgICBleHBvcnRBczogJ3R1aUhpbnRIb3ZlcicsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhpbnRIb3ZlckRpcmVjdGl2ZSBleHRlbmRzIFR1aURyaXZlciB7XG4gICAgcHJpdmF0ZSB2aXNpYmxlID0gZmFsc2U7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0b2dnbGUkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0cmVhbSQgPSBtZXJnZShcbiAgICAgICAgdGhpcy50b2dnbGUkLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAodmlzaWJsZSA9PiBvZih2aXNpYmxlKS5waXBlKGRlbGF5KHZpc2libGUgPyAwIDogdGhpcy5oaWRlRGVsYXkpKSksXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5ob3ZlcmVkJCksXG4gICAgICAgICAgICByZXBlYXQoKSxcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5ob3ZlcmVkJC5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKHZpc2libGUgPT5cbiAgICAgICAgICAgICAgICBvZih2aXNpYmxlKS5waXBlKGRlbGF5KHZpc2libGUgPyB0aGlzLnNob3dEZWxheSA6IHRoaXMuaGlkZURlbGF5KSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMudG9nZ2xlJCksXG4gICAgICAgICAgICByZXBlYXQoKSxcbiAgICAgICAgKSxcbiAgICApLnBpcGUoXG4gICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmVuYWJsZWQpLFxuICAgICAgICBtYXAoXG4gICAgICAgICAgICB2YWx1ZSA9PlxuICAgICAgICAgICAgICAgIHZhbHVlICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3R1aUhpbnRQb2ludGVyJykgfHxcbiAgICAgICAgICAgICAgICAgICAgIXR1aUlzT2JzY3VyZWQodGhpcy5lbC5uYXRpdmVFbGVtZW50KSksXG4gICAgICAgICksXG4gICAgICAgIHRhcCh2aXNpYmxlID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgIH0pLFxuICAgICk7XG5cbiAgICBASW5wdXQoJ3R1aUhpbnRTaG93RGVsYXknKVxuICAgIHNob3dEZWxheTogVHVpSGludE9wdGlvbnNbJ3Nob3dEZWxheSddID0gdGhpcy5vcHRpb25zLnNob3dEZWxheTtcblxuICAgIEBJbnB1dCgndHVpSGludEhpZGVEZWxheScpXG4gICAgaGlkZURlbGF5OiBUdWlIaW50T3B0aW9uc1snaGlkZURlbGF5J10gPSB0aGlzLm9wdGlvbnMuaGlkZURlbGF5O1xuXG4gICAgcmVhZG9ubHkgdHlwZSA9ICdoaW50JztcblxuICAgIGVuYWJsZWQgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSG92ZXJlZFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaG92ZXJlZCQ6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gICAgICAgIEBJbmplY3QoVFVJX0hJTlRfT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlIaW50T3B0aW9ucyxcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTa2lwU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpSGludEhvdmVyRGlyZWN0aXZlKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHBhcmVudDogVHVpSGludEhvdmVyRGlyZWN0aXZlIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB0aGlzLnN0cmVhbSQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9XG5cbiAgICB0b2dnbGUodmlzaWJsZSA9ICF0aGlzLnZpc2libGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGUkLm5leHQodmlzaWJsZSk7XG4gICAgICAgIHRoaXMucGFyZW50Py50b2dnbGUodmlzaWJsZSk7XG4gICAgfVxufVxuIl19