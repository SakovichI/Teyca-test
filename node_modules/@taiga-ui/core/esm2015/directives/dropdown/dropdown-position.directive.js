import { __decorate } from "tslib";
import { Directive, Inject } from '@angular/core';
import { EMPTY_CLIENT_RECT, tuiPure } from '@taiga-ui/cdk';
import { tuiFallbackRectAccessor, TuiPositionAccessor, TuiRectAccessor, } from '@taiga-ui/core/abstract';
import { TUI_VIEWPORT } from '@taiga-ui/core/tokens';
import { TuiDropdownDirective } from './dropdown.directive';
import { TUI_DROPDOWN_OPTIONS } from './dropdown-options.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/abstract";
import * as i2 from "./dropdown.directive";
export class TuiDropdownPositionDirective extends TuiPositionAccessor {
    constructor(options, viewport, accessors, directive) {
        super();
        this.options = options;
        this.viewport = viewport;
        this.accessors = accessors;
        this.directive = directive;
        this.type = 'dropdown';
    }
    getPosition({ width, height }) {
        var _a, _b;
        if (!width && !height) {
            this.previous = undefined;
        }
        const hostRect = (_b = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : EMPTY_CLIENT_RECT;
        const viewportRect = this.viewport.getClientRect();
        const { minHeight, align, direction, offset, limitWidth } = this.options;
        const viewport = {
            top: viewportRect.top - offset,
            bottom: viewportRect.bottom + offset,
            right: viewportRect.right - offset,
            left: viewportRect.left + offset,
        };
        const previous = this.previous || direction || 'bottom';
        const available = {
            top: hostRect.top - 2 * offset - viewport.top,
            bottom: viewport.bottom - hostRect.bottom - 2 * offset,
        };
        const rectWidth = limitWidth === 'fixed' ? hostRect.width : width;
        const right = Math.max(hostRect.right - rectWidth, offset);
        const left = hostRect.left + width < viewport.right ? hostRect.left : right;
        const position = {
            top: hostRect.top - offset - height,
            bottom: hostRect.bottom + offset,
            right: Math.max(viewport.left, right),
            center: hostRect.left + hostRect.width / 2 + width / 2 < viewport.right
                ? hostRect.left + hostRect.width / 2 - width / 2
                : right,
            left: Math.max(viewport.left, left),
        };
        const better = available.top > available.bottom ? 'top' : 'bottom';
        if ((available[previous] > minHeight && direction) ||
            available[previous] > height) {
            return [position[previous], position[align]];
        }
        this.previous = better;
        return [position[better], position[align]];
    }
    get accessor() {
        return tuiFallbackRectAccessor('dropdown')(this.accessors, this.directive);
    }
}
TuiDropdownPositionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownPositionDirective, deps: [{ token: TUI_DROPDOWN_OPTIONS }, { token: TUI_VIEWPORT }, { token: TuiRectAccessor }, { token: TuiDropdownDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownPositionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownPositionDirective, selector: "[tuiDropdown]", usesInheritance: true, ngImport: i0 });
__decorate([
    tuiPure
], TuiDropdownPositionDirective.prototype, "accessor", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownPositionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdown]',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DROPDOWN_OPTIONS]
                }] }, { type: i1.TuiRectAccessor, decorators: [{
                    type: Inject,
                    args: [TUI_VIEWPORT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiRectAccessor]
                }] }, { type: i2.TuiDropdownDirective, decorators: [{
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }]; }, propDecorators: { accessor: [] } });
//# sourceMappingURL=data:application/json;base64,