import { ChangeDetectionStrategy, Component, HostBinding, HostListener, Inject, Self, } from '@angular/core';
import { ALWAYS_TRUE_HANDLER, TUI_IS_MOBILE, TuiDestroyService, } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiSlideInTop } from '@taiga-ui/core/animations';
import { TUI_ANIMATIONS_DURATION, TUI_CLOSE_WORD, TUI_COMMON_ICONS, } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { isObservable, merge, of, Subject } from 'rxjs';
import { filter, map, switchMap, takeUntil } from 'rxjs/operators';
import { TUI_DIALOGS_CLOSE } from './dialog.tokens';
import { TuiDialogCloseService } from './dialog-close.service';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/button";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "rxjs";
export const TUI_DIALOG_CLOSE_BUTTON_DARK = 'tui-dialog-close-button-dark';
const REQUIRED_ERROR = new Error('Required dialog was dismissed');
function toObservable(valueOrStream) {
    return isObservable(valueOrStream) ? valueOrStream : of(valueOrStream);
}
export class TuiDialogComponent {
    constructor(duration, isMobile, context, destroy$, dialogClose$, close$, closeWord$, icons) {
        this.duration = duration;
        this.isMobile = isMobile;
        this.context = context;
        this.closeWord$ = closeWord$;
        this.icons = icons;
        this.animation = {
            value: '',
            params: {
                start: '40px',
                duration: this.duration,
            },
        };
        this.fullscreenAnimation = {
            value: '',
            params: {
                start: '100vh',
                duration: this.duration,
            },
        };
        this.close$ = new Subject();
        this.darkCloseButton = false;
        merge(this.close$.pipe(switchMap(() => toObservable(context.closeable))), dialogClose$.pipe(switchMap(() => toObservable(context.dismissible))), close$.pipe(map(ALWAYS_TRUE_HANDLER)))
            .pipe(filter(Boolean), takeUntil(destroy$))
            .subscribe(() => {
            this.close();
        });
    }
    onDark(value) {
        this.darkCloseButton = value;
    }
    get size() {
        return this.context.size;
    }
    get header() {
        return this.context.header;
    }
    get slideInTop() {
        return this.fullscreen || this.isMobile
            ? this.fullscreenAnimation
            : this.animation;
    }
    get mobile() {
        return this.isMobile;
    }
    get fullscreen() {
        return !this.isMobile && (this.size === 'fullscreen' || this.size === 'page');
    }
    get appearance() {
        if (this.mobile) {
            return 'icon';
        }
        return this.darkCloseButton ? 'glass' : '';
    }
    close() {
        if (this.context.required) {
            this.context.$implicit.error(REQUIRED_ERROR);
        }
        else {
            this.context.$implicit.complete();
        }
    }
}
TuiDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogComponent, deps: [{ token: TUI_ANIMATIONS_DURATION }, { token: TUI_IS_MOBILE }, { token: POLYMORPHEUS_CONTEXT }, { token: TuiDestroyService, self: true }, { token: TuiDialogCloseService }, { token: TUI_DIALOGS_CLOSE }, { token: TUI_CLOSE_WORD }, { token: TUI_COMMON_ICONS }], target: i0.ɵɵFactoryTarget.Component });
TuiDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDialogComponent, selector: "tui-dialog", host: { listeners: { "tui-dialog-close-button-dark": "onDark($event.detail)" }, properties: { "attr.data-appearance": "context.appearance", "attr.data-size": "this.size", "class._centered": "this.header", "@tuiSlideInTop": "this.slideInTop", "@tuiFadeIn": "this.slideInTop" } }, providers: [TuiDestroyService, TuiDialogCloseService], ngImport: i0, template: "<header\n    *ngIf=\"header\"\n    class=\"t-header\"\n>\n    <ng-container *polymorpheusOutlet=\"header as text; context: context\">\n        {{ text }}\n    </ng-container>\n</header>\n<div class=\"t-content\">\n    <h2\n        class=\"t-heading\"\n        [class.t-heading_closable]=\"context.closeable && !header\"\n        [id]=\"context.id\"\n        [textContent]=\"context.label\"\n    ></h2>\n    <section>\n        <!-- TODO: Polymorpheus fix type -->\n        <ng-container *polymorpheusOutlet=\"$any(context.content) as text; context: context\">\n            <div [innerHTML]=\"text\"></div>\n            <div class=\"t-buttons\">\n                <button\n                    size=\"m\"\n                    tuiAutoFocus\n                    tuiButton\n                    type=\"button\"\n                    (click)=\"context.$implicit.complete()\"\n                >\n                    {{ $any(context.data)?.button || 'OK' }}\n                </button>\n            </div>\n        </ng-container>\n    </section>\n</div>\n<div class=\"t-filler\"></div>\n\n<!-- Close button is insensitive to `context.closeable === Observable<false>` by design -->\n<button\n    *ngIf=\"context.closeable\"\n    automation-id=\"tui-dialog__close\"\n    shape=\"rounded\"\n    size=\"s\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-close\"\n    [appearance]=\"appearance\"\n    [icon]=\"icons.close\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close$.next()\"\n    (mousedown.prevent.silent)=\"(0)\"\n></button>\n", styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);flex-direction:column;box-sizing:border-box;margin:auto;border-radius:1rem;border:2.5rem solid transparent}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";border-radius:inherit;pointer-events:none;box-shadow:var(--tui-shadow-modal)}:host[data-size=auto]{width:auto}:host[data-size=s]{width:30rem}:host[data-size=s] .t-content{padding:1.5rem}:host[data-size=s] .t-heading{margin-bottom:.5rem;font:var(--tui-font-heading-5)}:host[data-size=m]{width:42.5rem}:host[data-size=m] .t-heading{margin-bottom:.75rem;font:var(--tui-font-heading-4)}:host[data-size=l]{width:55rem}:host[data-size=l] .t-heading{margin-bottom:1rem}:host[data-size=fullscreen],:host[data-size=page]{min-width:100vw;min-height:100%;border-radius:0;border:none;background:var(--tui-elevation-01);box-shadow:0 4rem var(--tui-elevation-01)}:host[data-size=fullscreen] .t-content,:host[data-size=page] .t-content{padding:3rem calc(50vw - (45rem / 2))}:host[data-size=fullscreen] .t-heading,:host[data-size=page] .t-heading{margin-bottom:1rem}:host[data-size=page] .t-content{padding:0}:host._centered{text-align:center}:host :host-context(tui-root._mobile)[data-size]{min-width:100%;width:100%;max-width:100%;border-radius:0;border:none;margin:auto 0 0}:host :host-context(tui-root._mobile)[data-size] .t-content{padding:1.5rem}:host :host-context(tui-root._mobile)[data-size] .t-heading{margin-bottom:.5rem;font:var(--tui-font-heading-5)}:host :host-context(tui-root._mobile)[data-size=fullscreen],:host :host-context(tui-root._mobile)[data-size=page]{padding:env(safe-area-inset-top) 0 env(safe-area-inset-bottom)}:host :host-context(tui-root._mobile)[data-size=fullscreen] .t-close,:host :host-context(tui-root._mobile)[data-size=page] .t-close{top:calc(1rem + env(safe-area-inset-top))}.t-heading{margin:0;word-wrap:break-word;font:var(--tui-font-heading-3)}.t-heading_closable{-webkit-padding-end:2rem;padding-inline-end:2rem}.t-heading:empty{display:none}.t-header{display:flex;border-top-left-radius:inherit;border-top-right-radius:inherit;overflow:hidden}:host[data-size=fullscreen] :host-context(tui-root._mobile) .t-header{flex:1}.t-content{border-radius:inherit;padding:2rem;background:var(--tui-elevation-01)}.t-content:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.t-content>section{border-radius:inherit}.t-wrapper{position:-webkit-sticky;position:sticky;top:0;z-index:1;order:-1}.t-filler{flex-grow:1}.t-close{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:1rem;right:1rem;display:none;color:var(--tui-neutral-fill)}:host-context(.t-dialog:last-of-type) .t-close{display:block}:host:not([data-size=\"page\"]) .t-close{animation:tuiFadeIn var(--tui-duration);background:var(--tui-neutral-bg)}:host:not([data-size=\"page\"]) .t-close:hover{background:var(--tui-neutral-bg-hover)}:host.ng-animating .t-close{display:none}:host-context(tui-root._mobile) .t-close{background:transparent!important;color:var(--tui-text-01);opacity:.5}.t-buttons{margin-top:1.25rem;text-align:right}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: ["tuiAutoFocus"] }], pipes: { "async": i2.AsyncPipe }, animations: [tuiSlideInTop, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-dialog',
                    templateUrl: './dialog.template.html',
                    styleUrls: ['./dialog.style.less'],
                    // So we don't force OnPush on dialog content
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [TuiDestroyService, TuiDialogCloseService],
                    animations: [tuiSlideInTop, tuiFadeIn],
                    host: {
                        '[attr.data-appearance]': 'context.appearance',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiDestroyService]
                }, {
                    type: Self
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiDialogCloseService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DIALOGS_CLOSE]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }]; }, propDecorators: { onDark: [{
                type: HostListener,
                args: [TUI_DIALOG_CLOSE_BUTTON_DARK, ['$event.detail']]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], header: [{
                type: HostBinding,
                args: ['class._centered']
            }], slideInTop: [{
                type: HostBinding,
                args: ['@tuiSlideInTop']
            }, {
                type: HostBinding,
                args: ['@tuiFadeIn']
            }] } });
//# sourceMappingURL=data:application/json;base64,