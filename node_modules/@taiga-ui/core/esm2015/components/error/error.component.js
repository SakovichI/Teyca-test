import { ChangeDetectionStrategy, Component, HostListener, Inject, Input, } from '@angular/core';
import { tuiIsString, TuiValidationError } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_ANIMATION_OPTIONS, TUI_DEFAULT_ERROR_MESSAGE, TUI_MODE, } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "rxjs";
export class TuiErrorComponent {
    constructor(animation, mode$, defaultErrorMessage$) {
        this.animation = animation;
        this.mode$ = mode$;
        this.defaultErrorMessage$ = defaultErrorMessage$;
        this.error = null;
        this.visible = true;
    }
    set errorSetter(error) {
        this.error = tuiIsString(error) ? new TuiValidationError(error) : error;
    }
    onAnimation(visible) {
        this.visible = visible;
    }
}
TuiErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiErrorComponent, deps: [{ token: TUI_ANIMATION_OPTIONS }, { token: TUI_MODE }, { token: TUI_DEFAULT_ERROR_MESSAGE }], target: i0.ɵɵFactoryTarget.Component });
TuiErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiErrorComponent, selector: "tui-error", inputs: { errorSetter: ["error", "errorSetter"] }, host: { listeners: { "animationcancel.self": "onAnimation(false)", "animationstart.self": "onAnimation(true)" } }, providers: [MODE_PROVIDER], ngImport: i0, template: "<ng-container *tuiLet=\"defaultErrorMessage$ | async as defaultErrorMessage\">\n    <div\n        *ngIf=\"error && visible\"\n        automation-id=\"tui-error__text\"\n        class=\"t-message-text\"\n        [@tuiFadeIn]=\"animation\"\n        [@tuiHeightCollapse]=\"animation\"\n        [class.t-message-text_light]=\"(mode$ | async) === 'onDark'\"\n    >\n        <ng-container *polymorpheusOutlet=\"error.message || defaultErrorMessage as text; context: error.context || {}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</ng-container>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);display:block;color:var(--tui-negative);word-wrap:break-word;animation:tuiPresent 1s infinite}.t-message-text{margin-top:.25rem;white-space:pre-line}.t-message-text_light{color:var(--tui-negative-night)}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i2.AsyncPipe }, animations: [tuiHeightCollapse, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-error',
                    templateUrl: './error.template.html',
                    styleUrls: ['./error.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER],
                    animations: [tuiHeightCollapse, tuiFadeIn],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DEFAULT_ERROR_MESSAGE]
                }] }]; }, propDecorators: { errorSetter: [{
                type: Input,
                args: ['error']
            }], onAnimation: [{
                type: HostListener,
                args: ['animationcancel.self', ['false']]
            }, {
                type: HostListener,
                args: ['animationstart.self', ['true']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9jb21wb25lbnRzL2Vycm9yL2Vycm9yLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9lcnJvci9lcnJvci50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHlCQUF5QixFQUN6QixRQUFRLEdBQ1gsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7O0FBWS9CLE1BQU0sT0FBTyxpQkFBaUI7SUFVMUIsWUFDNEMsU0FBMkIsRUFDeEMsS0FBdUMsRUFFekQsb0JBQXdDO1FBSFQsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDeEMsVUFBSyxHQUFMLEtBQUssQ0FBa0M7UUFFekQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFvQjtRQVJyRCxVQUFLLEdBQThCLElBQUksQ0FBQztRQUV4QyxZQUFPLEdBQUcsSUFBSSxDQUFDO0lBT1osQ0FBQztJQWRKLElBQ0ksV0FBVyxDQUFDLEtBQXlDO1FBQ3JELElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDNUUsQ0FBQztJQWVELFdBQVcsQ0FBQyxPQUFnQjtRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDOzsrR0FyQlEsaUJBQWlCLGtCQVdkLHFCQUFxQixhQUNyQixRQUFRLGFBQ1IseUJBQXlCO21HQWI1QixpQkFBaUIsME1BSGYsQ0FBQyxhQUFhLENBQUMsMEJDeEI5QixvakJBY0Esc25CRFdnQixDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQzs0RkFFakMsaUJBQWlCO2tCQVI3QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxXQUFXO29CQUNyQixXQUFXLEVBQUUsdUJBQXVCO29CQUNwQyxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDakMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDMUIsVUFBVSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDO2lCQUM3Qzs7MEJBWVEsTUFBTTsyQkFBQyxxQkFBcUI7OzBCQUM1QixNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLE1BQU07MkJBQUMseUJBQXlCOzRDQVhqQyxXQUFXO3NCQURkLEtBQUs7dUJBQUMsT0FBTztnQkFrQmQsV0FBVztzQkFGVixZQUFZO3VCQUFDLHNCQUFzQixFQUFFLENBQUMsT0FBTyxDQUFDOztzQkFDOUMsWUFBWTt1QkFBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QW5pbWF0aW9uT3B0aW9uc30gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpSXNTdHJpbmcsIFR1aVZhbGlkYXRpb25FcnJvcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge3R1aUZhZGVJbiwgdHVpSGVpZ2h0Q29sbGFwc2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtNT0RFX1BST1ZJREVSfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9wcm92aWRlcnMnO1xuaW1wb3J0IHtcbiAgICBUVUlfQU5JTUFUSU9OX09QVElPTlMsXG4gICAgVFVJX0RFRkFVTFRfRVJST1JfTUVTU0FHRSxcbiAgICBUVUlfTU9ERSxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7VHVpQnJpZ2h0bmVzc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktZXJyb3InLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9lcnJvci50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9lcnJvci5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbTU9ERV9QUk9WSURFUl0sXG4gICAgYW5pbWF0aW9uczogW3R1aUhlaWdodENvbGxhcHNlLCB0dWlGYWRlSW5dLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlFcnJvckNvbXBvbmVudCB7XG4gICAgQElucHV0KCdlcnJvcicpXG4gICAgc2V0IGVycm9yU2V0dGVyKGVycm9yOiBUdWlWYWxpZGF0aW9uRXJyb3IgfCBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSB0dWlJc1N0cmluZyhlcnJvcikgPyBuZXcgVHVpVmFsaWRhdGlvbkVycm9yKGVycm9yKSA6IGVycm9yO1xuICAgIH1cblxuICAgIGVycm9yOiBUdWlWYWxpZGF0aW9uRXJyb3IgfCBudWxsID0gbnVsbDtcblxuICAgIHZpc2libGUgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0FOSU1BVElPTl9PUFRJT05TKSByZWFkb25seSBhbmltYXRpb246IEFuaW1hdGlvbk9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPixcbiAgICAgICAgQEluamVjdChUVUlfREVGQVVMVF9FUlJPUl9NRVNTQUdFKVxuICAgICAgICByZWFkb25seSBkZWZhdWx0RXJyb3JNZXNzYWdlJDogT2JzZXJ2YWJsZTxzdHJpbmc+LFxuICAgICkge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2FuaW1hdGlvbmNhbmNlbC5zZWxmJywgWydmYWxzZSddKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2FuaW1hdGlvbnN0YXJ0LnNlbGYnLCBbJ3RydWUnXSlcbiAgICBvbkFuaW1hdGlvbih2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqdHVpTGV0PVwiZGVmYXVsdEVycm9yTWVzc2FnZSQgfCBhc3luYyBhcyBkZWZhdWx0RXJyb3JNZXNzYWdlXCI+XG4gICAgPGRpdlxuICAgICAgICAqbmdJZj1cImVycm9yICYmIHZpc2libGVcIlxuICAgICAgICBhdXRvbWF0aW9uLWlkPVwidHVpLWVycm9yX190ZXh0XCJcbiAgICAgICAgY2xhc3M9XCJ0LW1lc3NhZ2UtdGV4dFwiXG4gICAgICAgIFtAdHVpRmFkZUluXT1cImFuaW1hdGlvblwiXG4gICAgICAgIFtAdHVpSGVpZ2h0Q29sbGFwc2VdPVwiYW5pbWF0aW9uXCJcbiAgICAgICAgW2NsYXNzLnQtbWVzc2FnZS10ZXh0X2xpZ2h0XT1cIihtb2RlJCB8IGFzeW5jKSA9PT0gJ29uRGFyaydcIlxuICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiZXJyb3IubWVzc2FnZSB8fCBkZWZhdWx0RXJyb3JNZXNzYWdlIGFzIHRleHQ7IGNvbnRleHQ6IGVycm9yLmNvbnRleHQgfHwge31cIj5cbiAgICAgICAgICAgIHt7IHRleHQgfX1cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==