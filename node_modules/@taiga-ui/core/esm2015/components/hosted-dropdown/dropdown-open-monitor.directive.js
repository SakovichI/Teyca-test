import { Directive, Inject, Input, Optional, Self } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiDropdownDirective, TuiDropdownOpenDirective } from '@taiga-ui/core/directives';
import { takeUntil } from 'rxjs/operators';
import { TUI_HOSTED_DROPDOWN_COMPONENT } from './hosted-dropdown.token';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@taiga-ui/core/directives";
export class TuiDropdownOpenMonitorDirective {
    constructor(destroy$, hosted, dropdown, open) {
        this.open = open;
        if ((open === null || open === void 0 ? void 0 : open.dropdown) === dropdown) {
            open.tuiDropdownOpenChange.pipe(takeUntil(destroy$)).subscribe(value => {
                var _a;
                if (value) {
                    (_a = hosted.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.focus();
                }
                hosted.updateOpen(value);
            });
        }
    }
    set tuiDropdownOpenMonitor(open) {
        var _a;
        (_a = this.open) === null || _a === void 0 ? void 0 : _a.update(open);
    }
}
TuiDropdownOpenMonitorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOpenMonitorDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TUI_HOSTED_DROPDOWN_COMPONENT }, { token: TuiDropdownDirective, self: true }, { token: TuiDropdownOpenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownOpenMonitorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]", inputs: { tuiDropdownOpenMonitor: "tuiDropdownOpenMonitor" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownOpenMonitorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdownOpenMonitor]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HOSTED_DROPDOWN_COMPONENT]
                }] }, { type: i2.TuiDropdownDirective, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }, { type: i2.TuiDropdownOpenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownOpenDirective]
                }] }]; }, propDecorators: { tuiDropdownOpenMonitor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tb3Blbi1tb25pdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9ob3N0ZWQtZHJvcGRvd24vZHJvcGRvd24tb3Blbi1tb25pdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUMsaUJBQWlCLEVBQXdCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRXpGLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8sK0JBQStCO0lBTXhDLFlBQ3VDLFFBQTZCLEVBRWhFLE1BQW1FLEVBQzdCLFFBQThCLEVBR25ELElBQXFDO1FBQXJDLFNBQUksR0FBSixJQUFJLENBQWlDO1FBRXRELElBQUksQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsUUFBUSxNQUFLLFFBQVEsRUFBRTtZQUM3QixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTs7Z0JBQ25FLElBQUksS0FBSyxFQUFFO29CQUNQLE1BQUEsTUFBTSxDQUFDLHNCQUFzQiwwQ0FBRSxLQUFLLEVBQUUsQ0FBQztpQkFDMUM7Z0JBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQXZCRCxJQUNJLHNCQUFzQixDQUFDLElBQWE7O1FBQ3BDLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7OzZIQUpRLCtCQUErQixrQkFPcEIsaUJBQWlCLHlCQUN6Qiw2QkFBNkIsYUFFckIsb0JBQW9CLHlCQUU1Qix3QkFBd0I7aUhBWjNCLCtCQUErQixpSEFGN0IsQ0FBQyxpQkFBaUIsQ0FBQzs0RkFFckIsK0JBQStCO2tCQUozQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUNqQzs7MEJBUVEsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLDZCQUE2Qjs7MEJBRXBDLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsb0JBQW9COzswQkFDbkMsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyx3QkFBd0I7NENBVmhDLHNCQUFzQjtzQkFEekIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBJbmplY3QsIElucHV0LCBPcHRpb25hbCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURlc3Ryb3lTZXJ2aWNlLCBUdWlJbmplY3Rpb25Ub2tlblR5cGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlEcm9wZG93bkRpcmVjdGl2ZSwgVHVpRHJvcGRvd25PcGVuRGlyZWN0aXZlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9kaXJlY3RpdmVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1RVSV9IT1NURURfRFJPUERPV05fQ09NUE9ORU5UfSBmcm9tICcuL2hvc3RlZC1kcm9wZG93bi50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aURyb3Bkb3duT3Blbk1vbml0b3JdJyxcbiAgICBwcm92aWRlcnM6IFtUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aURyb3Bkb3duT3Blbk1vbml0b3JEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHR1aURyb3Bkb3duT3Blbk1vbml0b3Iob3BlbjogYm9vbGVhbikge1xuICAgICAgICB0aGlzLm9wZW4/LnVwZGF0ZShvcGVuKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQFNlbGYoKSBASW5qZWN0KFR1aURlc3Ryb3lTZXJ2aWNlKSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChUVUlfSE9TVEVEX0RST1BET1dOX0NPTVBPTkVOVClcbiAgICAgICAgaG9zdGVkOiBUdWlJbmplY3Rpb25Ub2tlblR5cGU8dHlwZW9mIFRVSV9IT1NURURfRFJPUERPV05fQ09NUE9ORU5UPixcbiAgICAgICAgQFNlbGYoKSBASW5qZWN0KFR1aURyb3Bkb3duRGlyZWN0aXZlKSBkcm9wZG93bjogVHVpRHJvcGRvd25EaXJlY3RpdmUsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpRHJvcGRvd25PcGVuRGlyZWN0aXZlKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG9wZW46IFR1aURyb3Bkb3duT3BlbkRpcmVjdGl2ZSB8IG51bGwsXG4gICAgKSB7XG4gICAgICAgIGlmIChvcGVuPy5kcm9wZG93biA9PT0gZHJvcGRvd24pIHtcbiAgICAgICAgICAgIG9wZW4udHVpRHJvcGRvd25PcGVuQ2hhbmdlLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdGVkLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQ/LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaG9zdGVkLnVwZGF0ZU9wZW4odmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=