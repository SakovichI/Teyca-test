import * as i0 from '@angular/core';
import { ChangeDetectorRef, inject, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, HostListener, HostBinding, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import { maskitoDateOptionsGenerator } from '@maskito/kit';
import * as i6 from '@taiga-ui/cdk';
import { AbstractTuiMultipleControl, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, tuiIsString, TuiDay, tuiDateClamp, TUI_IS_MOBILE, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, tuiAsFocusableItemAccessor, tuiAsControl, InjectFlags, TuiMapperPipeModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_DEFAULT_MARKER_HANDLER, TUI_TEXTFIELD_SIZE, TUI_DROPDOWN_COMPONENT, TuiPrimitiveTextfieldComponent, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiPrimitiveTextfieldModule } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import * as i2 from '@taiga-ui/kit/components/input-tag';
import { TuiInputTagComponent, TuiInputTagModule } from '@taiga-ui/kit/components/input-tag';
import { TUI_MOBILE_CALENDAR, TUI_DATE_TEXTS, TUI_DATE_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, TUI_DONE_WORD, tuiDateStreamWithTransformer } from '@taiga-ui/kit/tokens';
import { tuiImmutableUpdateInputDateMulti } from '@taiga-ui/kit/utils';
import { map } from 'rxjs/operators';
import * as i3 from '@maskito/angular';
import { MaskitoModule } from '@maskito/angular';
import * as i5 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i7 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i8 from 'rxjs';

class TuiInputDateMultiComponent extends AbstractTuiMultipleControl {
    constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize, doneWord$) {
        var _a, _b;
        super(control, cdr, valueTransformer);
        this.isMobile = isMobile;
        this.mobileCalendar = mobileCalendar;
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.options = options;
        this.textfieldSize = textfieldSize;
        this.doneWord$ = doneWord$;
        this.month = null;
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultActiveYearMonth = TuiMonth.currentLocal();
        this.expandable = false;
        this.inputHidden = false;
        this.search = '';
        this.placeholder = '';
        this.rows = Infinity;
        this.maskitoOptions = maskitoDateOptionsGenerator({
            mode: 'dd/mm/yyyy',
            separator: '.',
            min: (_a = this.min) === null || _a === void 0 ? void 0 : _a.toLocalNativeDate(),
            max: (_b = this.max) === null || _b === void 0 ? void 0 : _b.toLocalNativeDate(),
        });
        this.open = false;
        this.filler$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
        this.tagValidator = (tag) => {
            var _a, _b, _c;
            const { year, month, day } = tuiIsString(tag)
                ? TuiDay.parseRawDateString(tag)
                : tag;
            const date = new TuiDay(year, month, day);
            return ((_c = (TuiDay.isValidDay(year, month, day) &&
                ((_a = this.min) === null || _a === void 0 ? void 0 : _a.daySameOrBefore(date)) &&
                ((_b = this.max) === null || _b === void 0 ? void 0 : _b.daySameOrAfter(date)))) !== null && _c !== void 0 ? _c : false);
        };
        this.disabledItemHandlerWrapper = handler => stringifiable => tuiIsString(stringifiable) || handler(stringifiable.item);
        this.valueMapper = value => value.map(item => new TuiStringifiableItem(item, item => String(item)));
    }
    onClick() {
        if (!this.isMobile && this.interactive) {
            this.open = !this.open;
        }
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeDropdownMode() {
        return this.isMobile;
    }
    get computedMin() {
        var _a;
        return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
    }
    get computedMax() {
        var _a;
        return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
    }
    get nativeFocusableElement() {
        var _a;
        return ((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get computedMobile() {
        return this.isMobile && !!this.mobileCalendar;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get computedActiveYearMonth() {
        return (this.month ||
            this.value[this.value.length - 1] ||
            tuiDateClamp(this.defaultActiveYearMonth, this.computedMin, this.computedMax));
    }
    onIconClick() {
        if (this.isMobile && this.interactive) {
            this.open = true;
        }
    }
    onEnter(search) {
        if (!this.tagValidator(search)) {
            return;
        }
        this.value = tuiImmutableUpdateInputDateMulti(this.value, TuiDay.normalizeParse(search));
        if (this.inputTag) {
            this.inputTag.search = '';
        }
        this.done();
    }
    onValueChange(value) {
        var _a;
        (_a = this.control) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity({ emitEvent: false });
        if (!value.length && !this.mobileCalendar) {
            this.onOpenChange(true);
        }
        this.value = value.map(({ item }) => item);
    }
    onDayClick(value) {
        this.value = tuiImmutableUpdateInputDateMulti(this.value, value);
    }
    done() {
        this.open = false;
    }
    onMonthChange(month) {
        this.month = month;
    }
    onOpenChange(open) {
        this.open = open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
}
TuiInputDateMultiComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateMultiComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_MOBILE }, { token: TUI_MOBILE_CALENDAR, optional: true }, { token: TUI_DATE_FORMAT }, { token: TUI_DATE_SEPARATOR }, { token: TUI_DATE_TEXTS }, { token: TUI_DATE_VALUE_TRANSFORMER, optional: true }, { token: TUI_INPUT_DATE_OPTIONS }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_DONE_WORD }], target: i0.ɵɵFactoryTarget.Component });
TuiInputDateMultiComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputDateMultiComponent, selector: "tui-input-date[multiple]", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultActiveYearMonth: "defaultActiveYearMonth", expandable: "expandable", inputHidden: "inputHidden", search: "search", placeholder: "placeholder", rows: "rows", tagValidator: "tagValidator" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputDateMultiComponent),
        tuiAsControl(TuiInputDateMultiComponent),
        tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER),
        {
            provide: TUI_DROPDOWN_COMPONENT,
            useFactory: () => (inject(TUI_IS_MOBILE) &&
                inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional)) ||
                inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
        },
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }, { propertyName: "inputTag", first: true, predicate: TuiInputTagComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        class=\"t-input\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"false\"\n        [expandable]=\"expandable\"\n        [inputHidden]=\"inputHidden\"\n        [maskito]=\"maskitoOptions\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"value | tuiMapper: valueMapper\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldFiller]=\"(filler$ | async) || ''\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        (keydown.enter)=\"onEnter(inputTag.search || '')\"\n        (ngModelChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n    </tui-input-tag>\n\n    <ng-template #iconContent>\n        <tui-svg\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            appearance=\"icon\"\n            tuiWrapper\n            [class.t-icon]=\"!computedDisabled\"\n            [readOnly]=\"readOnly\"\n            [src]=\"src\"\n            (click)=\"onIconClick()\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"computedMax\"\n            [min]=\"computedMin\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n            (mousedown.silent.prevent)=\"(0)\"\n        ></tui-calendar>\n        <div\n            class=\"t-button\"\n            (mousedown.silent.prevent)=\"(0)\"\n        >\n            <button\n                tuiLink\n                type=\"button\"\n                (click)=\"done()\"\n            >\n                {{ doneWord$ | async }}\n            </button>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-button{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-button button{flex:1;text-align:center}.t-native-input{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i2.TuiInputTagComponent, selector: "tui-input-tag", inputs: ["separator", "search", "editable", "tagValidator", "expandable", "rows", "inputHidden", "uniqueTags", "autoColor", "maxLength", "placeholder", "removable", "disabledItemHandler", "pseudoFocused"], outputs: ["searchChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i1.TuiCalendarComponent, selector: "tui-calendar", inputs: ["initialView", "month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }, { type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i3.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }], pipes: { "tuiMapper": i6.TuiMapperPipe, "async": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateMultiComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-date[multiple]',
                    templateUrl: './input-date-multi.template.html',
                    styleUrls: ['../input-date/input-date.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateMultiComponent),
                        tuiAsControl(TuiInputDateMultiComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER),
                        {
                            provide: TUI_DROPDOWN_COMPONENT,
                            useFactory: () => (inject(TUI_IS_MOBILE) &&
                                inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional)) ||
                                inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i0.Type, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_MOBILE_CALENDAR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_SEPARATOR]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_TEXTS]
                }] }, { type: i6.AbstractTuiValueTransformer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DATE_VALUE_TRANSFORMER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DONE_WORD]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], inputTag: [{
                type: ViewChild,
                args: [TuiInputTagComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultActiveYearMonth: [{
                type: Input
            }], expandable: [{
                type: Input
            }], inputHidden: [{
                type: Input
            }], search: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], rows: [{
                type: Input
            }], tagValidator: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });

class TuiInputDateMultiModule {
}
TuiInputDateMultiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateMultiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputDateMultiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateMultiModule, declarations: [TuiInputDateMultiComponent], imports: [CommonModule,
        MaskitoModule,
        PolymorpheusModule,
        TuiWrapperModule,
        TuiCalendarModule,
        TuiSvgModule,
        TuiLinkModule,
        TuiInputTagModule,
        FormsModule,
        TuiMapperPipeModule,
        TuiHostedDropdownModule,
        TuiTextfieldControllerModule,
        TuiPrimitiveTextfieldModule], exports: [TuiInputDateMultiComponent] });
TuiInputDateMultiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateMultiModule, imports: [[
            CommonModule,
            MaskitoModule,
            PolymorpheusModule,
            TuiWrapperModule,
            TuiCalendarModule,
            TuiSvgModule,
            TuiLinkModule,
            TuiInputTagModule,
            FormsModule,
            TuiMapperPipeModule,
            TuiHostedDropdownModule,
            TuiTextfieldControllerModule,
            TuiPrimitiveTextfieldModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateMultiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        MaskitoModule,
                        PolymorpheusModule,
                        TuiWrapperModule,
                        TuiCalendarModule,
                        TuiSvgModule,
                        TuiLinkModule,
                        TuiInputTagModule,
                        FormsModule,
                        TuiMapperPipeModule,
                        TuiHostedDropdownModule,
                        TuiTextfieldControllerModule,
                        TuiPrimitiveTextfieldModule,
                    ],
                    declarations: [TuiInputDateMultiComponent],
                    exports: [TuiInputDateMultiComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputDateMultiComponent, TuiInputDateMultiModule };
//# sourceMappingURL=taiga-ui-kit-components-input-date-multi.js.map
