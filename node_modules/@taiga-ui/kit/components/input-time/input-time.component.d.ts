import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MaskitoOptions } from '@maskito/core';
import { AbstractTuiNullableControl, AbstractTuiValueTransformer, TuiBooleanHandler, TuiFocusableElementAccessor, TuiIdentityMatcher, TuiTime, TuiTimeMode } from '@taiga-ui/cdk';
import { TuiDataListHost, TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective } from '@taiga-ui/core';
import { Observable } from 'rxjs';
import { TuiInputTimeOptions } from './input-time.options';
import * as i0 from "@angular/core";
export declare class TuiInputTimeComponent extends AbstractTuiNullableControl<TuiTime> implements TuiFocusableElementAccessor, TuiDataListHost<TuiTime> {
    private readonly timeTexts$;
    private readonly options;
    private readonly isMobile;
    private readonly isIos;
    private readonly textfieldSize;
    readonly valueTransformer: AbstractTuiValueTransformer<TuiTime | null> | null;
    private readonly textfield?;
    disabledItemHandler: TuiBooleanHandler<TuiTime>;
    items: readonly TuiTime[];
    itemsHidden: boolean;
    itemSize: TuiInputTimeOptions['itemSize'];
    strict: boolean;
    mode: TuiInputTimeOptions['mode'];
    /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
    postfix: TuiInputTimeOptions['postfix'];
    open: boolean;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, timeTexts$: Observable<Record<TuiTimeMode, string>>, options: TuiInputTimeOptions, isMobile: boolean, isIos: boolean, textfieldSize: TuiTextfieldSizeDirective, valueTransformer: AbstractTuiValueTransformer<TuiTime | null> | null);
    get size(): TuiSizeL | TuiSizeS;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get canOpen(): boolean;
    get filtered(): readonly TuiTime[];
    get showNativePicker(): boolean;
    get nativeDatalist(): boolean;
    get maskOptions(): MaskitoOptions;
    get computedValue(): string;
    get computedSearch(): string;
    get innerPseudoFocused(): boolean | null;
    get icon(): TuiInputTimeOptions['icon'];
    get nativeValue(): string;
    set nativeValue(value: string);
    getFiller$(mode: TuiTimeMode): Observable<string>;
    onClick(): void;
    readonly identityMatcher: TuiIdentityMatcher<TuiTime>;
    onValueChange(value: string): void;
    onFocused(focused: boolean): void;
    onArrowUp(event: Event): void;
    onArrowDown(event: Event): void;
    checkOption(option: TuiTime): void;
    handleOption(item: TuiTime): void;
    onOpen(open: boolean): void;
    writeValue(value: TuiTime | null): void;
    private get nativePicker();
    private calculateMask;
    private filter;
    private findNearestTimeFromItems;
    private close;
    private processArrow;
    private calculateShift;
    private shiftTime;
    private focusInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputTimeComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputTimeComponent, "tui-input-time", never, { "disabledItemHandler": "disabledItemHandler"; "items": "items"; "itemsHidden": "itemsHidden"; "itemSize": "itemSize"; "strict": "strict"; "mode": "mode"; "postfix": "postfix"; }, {}, never, ["*"]>;
}
