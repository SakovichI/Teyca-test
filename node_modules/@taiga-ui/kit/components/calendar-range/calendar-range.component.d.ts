import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { TuiBooleanHandler, TuiDay, TuiDayLike, TuiDayRange, TuiDestroyService, TuiMonth, TuiTypedMapper } from '@taiga-ui/cdk';
import { TuiCommonIcons, TuiMarkerHandler, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { TuiDayRangePeriod } from '@taiga-ui/kit/classes';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiCalendarRangeComponent implements TuiWithOptionalMinMax<TuiDay> {
    readonly cdr: ChangeDetectorRef;
    readonly otherDateText$: Observable<string | null>;
    readonly icons: TuiCommonIcons;
    /**
     * @deprecated use `item`
     */
    private selectedPeriod;
    defaultViewedMonth: TuiMonth;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler;
    items: readonly TuiDayRangePeriod[];
    min: TuiDay | null;
    max: TuiDay | null;
    minLength: TuiDayLike | null;
    maxLength: TuiDayLike | null;
    value: TuiDayRange | null;
    item: TuiDayRangePeriod | null;
    readonly valueChange: EventEmitter<TuiDayRange | null>;
    readonly itemChange: EventEmitter<TuiDayRangePeriod | null>;
    previousValue: TuiDayRange | null;
    readonly maxLengthMapper: TuiTypedMapper<[TuiDay, TuiDayRange | null, TuiDayLike | null, boolean], TuiDay>;
    get computedMin(): TuiDay;
    get computedMax(): TuiDay;
    /**
     * @deprecated use `item`
     */
    get selectedActivePeriod(): TuiDayRangePeriod | null;
    /**
     * @deprecated use `item`
     */
    set selectedActivePeriod(period: TuiDayRangePeriod | null);
    constructor(valueChanges: Observable<TuiDayRange | null> | null, cdr: ChangeDetectorRef, destroy$: TuiDestroyService, otherDateText$: Observable<string | null>, icons: TuiCommonIcons);
    onEsc(event: KeyboardEvent): void;
    readonly monthOffset: TuiTypedMapper<[TuiMonth, number], TuiMonth>;
    readonly mapper: TuiTypedMapper<[
        readonly TuiDayRangePeriod[],
        TuiDay | null,
        TuiDay | null,
        TuiDayLike | null,
        string | null | undefined
    ], ReadonlyArray<TuiDayRangePeriod | string>>;
    get calculatedDisabledItemHandler(): TuiBooleanHandler<TuiDay>;
    get computedMonth(): TuiMonth;
    isItemActive(item: TuiDayRangePeriod | string): boolean;
    onRangeChange(dayRange: TuiDayRange): void;
    onDayClick(day: TuiDay): void;
    onItemSelect(item: TuiDayRangePeriod | string): void;
    updateValue(value: TuiDayRange | null): void;
    private get activePeriod();
    private calculateDisabledItemHandler;
    private findItemByDayRange;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiCalendarRangeComponent, [{ optional: true; }, null, { self: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiCalendarRangeComponent, "tui-calendar-range", never, { "defaultViewedMonth": "defaultViewedMonth"; "disabledItemHandler": "disabledItemHandler"; "markerHandler": "markerHandler"; "items": "items"; "min": "min"; "max": "max"; "minLength": "minLength"; "maxLength": "maxLength"; "value": "value"; "item": "item"; }, { "valueChange": "valueChange"; "itemChange": "itemChange"; }, never, never>;
}
