import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, HostListener, Inject, inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';
import { maskitoDateOptionsGenerator } from '@maskito/kit';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, DATE_FILLER_LENGTH, InjectFlags, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_IS_MOBILE, TUI_LAST_DAY, TUI_LAST_DISPLAYED_DAY, tuiAsControl, tuiAsFocusableItemAccessor, tuiDateClamp, TuiDay, TuiMonth, tuiNullableSame, tuiPure, } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER, TUI_DROPDOWN_COMPONENT, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/kit/constants';
import { TUI_DATE_TEXTS, TUI_DATE_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, TUI_MOBILE_CALENDAR, tuiDateStreamWithTransformer, } from '@taiga-ui/kit/tokens';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@taiga-ui/kit/directives";
import * as i4 from "@maskito/angular";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "@angular/common";
import * as i7 from "./native-date/native-date.component";
import * as i8 from "@angular/forms";
import * as i9 from "rxjs";
export class TuiInputDateComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize) {
        super(control, cdr, valueTransformer);
        this.isMobile = isMobile;
        this.mobileCalendar = mobileCalendar;
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.options = options;
        this.textfieldSize = textfieldSize;
        this.month = null;
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.items = [];
        this.defaultActiveYearMonth = TuiMonth.currentLocal();
        this.open = false;
        this.filler$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        var _a, _b;
        /**
         * TODO: we can delete this workaround in v4.0
         * after solving this issue:
         * https://github.com/taiga-family/maskito/issues/604
         */
        if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {
            return TUI_FIRST_DAY;
        }
        return (_b = this.min) !== null && _b !== void 0 ? _b : this.options.min;
    }
    get computedMax() {
        var _a, _b;
        /**
         * TODO: we can delete this workaround in v4.0
         * after solving this issue:
         * https://github.com/taiga-family/maskito/issues/604
         */
        if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {
            return TUI_LAST_DAY;
        }
        return (_b = this.max) !== null && _b !== void 0 ? _b : this.options.max;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    /**
     * @deprecated
     */
    get computedMobile() {
        return this.isMobile && (!!this.mobileCalendar || this.nativePicker);
    }
    get nativePicker() {
        return this.options.nativePicker && this.isMobile;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get computedValue() {
        const { value, nativeValue, activeItem } = this;
        if (activeItem) {
            return String(activeItem);
        }
        return value ? value.toString(this.dateFormat, this.dateSeparator) : nativeValue;
    }
    get computedActiveYearMonth() {
        var _a, _b;
        const clampedDate = tuiDateClamp(this.defaultActiveYearMonth, this.computedMin, this.computedMax);
        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.dayAfter(TUI_LAST_DISPLAYED_DAY)) {
            return this.month || clampedDate;
        }
        if (this.items[0] && ((_b = this.value) === null || _b === void 0 ? void 0 : _b.daySame(this.items[0].day))) {
            return this.items[0].displayDay;
        }
        return this.month || this.value || clampedDate;
    }
    get nativeValue() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';
    }
    set nativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    get computedMask() {
        /**
         * TODO: we can delete this workaround in v4.0
         * after solving this issue:
         * https://github.com/taiga-family/maskito/issues/604
         */
        const nativeValueIsNotSynced = this.nativeValue !== this.computedValue;
        return this.activeItem || nativeValueIsNotSynced
            ? MASKITO_DEFAULT_OPTIONS
            : this.computeMaskOptions(this.dateFormat, this.dateSeparator, this.computedMin, this.computedMax);
    }
    get activeItem() {
        const { value } = this;
        return (value && this.items.find(item => item.day.daySame(value))) || null;
    }
    onClick() {
        if (!this.isMobile && this.interactive) {
            this.open = !this.open;
        }
    }
    getComputedFiller(filler) {
        return this.activeItem ? '' : filler;
    }
    // noinspection JSUnusedGlobalSymbols
    /**
     * TODO: Remove in 4.0
     * @deprecated: use {@link onIconClick} instead
     */
    onMobileClick() {
        this.onIconClick();
    }
    onIconClick() {
        if (this.isMobile && this.interactive) {
            this.open = true;
        }
    }
    onValueChange(value) {
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value && !this.mobileCalendar) {
            this.onOpenChange(true);
        }
        if (this.activeItem) {
            this.nativeValue = '';
        }
        this.value =
            value.length !== DATE_FILLER_LENGTH || this.activeItem
                ? null
                : TuiDay.normalizeParse(value, this.dateFormat);
    }
    onDayClick(value) {
        this.value = value;
        this.open = false;
    }
    onMonthChange(month) {
        this.month = month;
    }
    onOpenChange(open) {
        this.open = open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = value ? this.computedValue : '';
    }
    valueIdenticalComparator(oldValue, newValue) {
        return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));
    }
    computeMaskOptions(mode, separator, min, max) {
        return maskitoDateOptionsGenerator({
            separator,
            mode: TUI_DATE_MODE_MASKITO_ADAPTER[mode],
            min: min.toLocalNativeDate(),
            max: max.toLocalNativeDate(),
        });
    }
}
TuiInputDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_MOBILE }, { token: TUI_MOBILE_CALENDAR, optional: true }, { token: TUI_DATE_FORMAT }, { token: TUI_DATE_SEPARATOR }, { token: TUI_DATE_TEXTS }, { token: TUI_DATE_VALUE_TRANSFORMER, optional: true }, { token: TUI_INPUT_DATE_OPTIONS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputDateComponent, selector: "tui-input-date:not([multiple])", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", items: "items", defaultActiveYearMonth: "defaultActiveYearMonth" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputDateComponent),
        tuiAsControl(TuiInputDateComponent),
        tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER),
        {
            provide: TUI_DROPDOWN_COMPONENT,
            useFactory: () => (inject(TUI_IS_MOBILE) &&
                inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional)) ||
                inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
        },
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive && !nativePicker\"\n    [content]=\"dropdown\"\n    [open]=\"open\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"filler$ | async as filler\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"computedMask\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"getComputedFiller(filler || '')\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-svg\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            appearance=\"icon\"\n            automation-id=\"tui-input-date-range__icon\"\n            tuiWrapper\n            [class.t-icon]=\"!computedDisabled\"\n            [readOnly]=\"readOnly\"\n            [src]=\"src\"\n            (click)=\"onIconClick()\"\n        ></tui-svg>\n        <input\n            *ngIf=\"nativePicker\"\n            tuiDate\n            class=\"t-native-input\"\n        />\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            automation-id=\"tui-input-date__calendar\"\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"max\"\n            [min]=\"min\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n        ></tui-calendar>\n        <div\n            *ngIf=\"items.length === 1\"\n            tuiPreventDefault=\"mousedown\"\n            class=\"t-button\"\n        >\n            <button\n                tuiLink\n                type=\"button\"\n                (click)=\"onDayClick(items[0].day)\"\n            >\n                {{ items[0] }}\n            </button>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-button{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-button button{flex:1;text-align:center}.t-native-input{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i1.TuiCalendarComponent, selector: "tui-calendar", inputs: ["initialView", "month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }, { type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i3.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i4.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.TuiNativeDateDirective, selector: "input[tuiDate]" }, { type: i5.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { type: i2.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputDateComponent.prototype, "computeMaskOptions", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-date:not([multiple])',
                    templateUrl: './input-date.template.html',
                    styleUrls: ['./input-date.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateComponent),
                        tuiAsControl(TuiInputDateComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER),
                        {
                            provide: TUI_DROPDOWN_COMPONENT,
                            useFactory: () => (inject(TUI_IS_MOBILE) &&
                                inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional)) ||
                                inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i8.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i0.Type, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_MOBILE_CALENDAR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_SEPARATOR]
                }] }, { type: i9.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_TEXTS]
                }] }, { type: i2.AbstractTuiValueTransformer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DATE_VALUE_TRANSFORMER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], items: [{
                type: Input
            }], defaultActiveYearMonth: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], computeMaskOptions: [] } });
//# sourceMappingURL=data:application/json;base64,