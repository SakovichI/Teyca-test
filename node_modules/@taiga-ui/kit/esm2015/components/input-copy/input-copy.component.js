import { __decorate } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, tuiAsControl, tuiAsFocusableItemAccessor, tuiPure, } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_VALUE_ACCESSOR_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_COPY_TEXTS } from '@taiga-ui/kit/tokens';
import { BehaviorSubject, merge, of, timer } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { TUI_INPUT_COPY_OPTIONS } from './input-copy.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@tinkoff/ng-polymorpheus";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "rxjs";
export class TuiInputCopyComponent extends AbstractTuiControl {
    constructor(control, cdr, doc, copyTexts$, options, textfieldSize) {
        super(control, cdr);
        this.doc = doc;
        this.copyTexts$ = copyTexts$;
        this.options = options;
        this.textfieldSize = textfieldSize;
        this.copied$ = new BehaviorSubject(false);
        this.successMessage = this.options.successMessage;
        this.messageDirection = this.options.messageDirection;
        this.messageAppearance = this.options.messageAppearance;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get hintText$() {
        return this.copyTexts$.pipe(switchMap(texts => this.copied$.pipe(switchMap(copied => {
            if (!copied) {
                return of(texts[0]);
            }
            this.copied$.next(false);
            return merge(of(this.successMessage || texts[1]), timer(3000).pipe(map(() => texts[0])));
        }))));
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get icon() {
        return this.options.icon;
    }
    onValueChange(value) {
        this.value = value;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    copy() {
        var _a;
        if (!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement)) {
            return;
        }
        this.textfield.nativeFocusableElement.select();
        this.doc.execCommand('copy');
        this.copied$.next(true);
    }
    getFallbackValue() {
        return '';
    }
}
TuiInputCopyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCopyComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: DOCUMENT }, { token: TUI_COPY_TEXTS }, { token: TUI_INPUT_COPY_OPTIONS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputCopyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCopyComponent, selector: "tui-input-copy", inputs: { successMessage: "successMessage", messageDirection: "messageDirection", messageAppearance: "messageAppearance" }, host: { properties: { "attr.data-size": "this.size" } }, providers: [
        TUI_VALUE_ACCESSOR_PROVIDER,
        tuiAsFocusableItemAccessor(TuiInputCopyComponent),
        tuiAsControl(TuiInputCopyComponent),
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [nativeId]=\"nativeId\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldIcon]=\"!disabled ? iconContent : ''\"\n    [(value)]=\"value\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n\n<ng-template #iconContent>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        appearance=\"icon\"\n        automation-id=\"tui-copy__icon\"\n        tuiWrapper\n        class=\"t-icon\"\n        [disabled]=\"!value\"\n        [src]=\"src\"\n        [tuiHint]=\"hint\"\n        [tuiHintAppearance]=\"messageAppearance\"\n        [tuiHintDirection]=\"messageDirection\"\n        (click)=\"copy()\"\n    ></tui-svg>\n</ng-template>\n\n<ng-template #hint>\n    <ng-container *polymorpheusOutlet=\"hintText$ | async as text\">\n        {{ text }}\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon{position:relative;cursor:pointer;pointer-events:auto;color:var(--tui-base-06)}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i1.TuiHintDriverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)" }, { type: i1.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiHintPositionDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintDirection"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputCopyComponent.prototype, "hintText$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCopyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-copy',
                    templateUrl: './input-copy.template.html',
                    styleUrls: ['./input-copy.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TUI_VALUE_ACCESSOR_PROVIDER,
                        tuiAsFocusableItemAccessor(TuiInputCopyComponent),
                        tuiAsControl(TuiInputCopyComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_COPY_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_COPY_OPTIONS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], successMessage: [{
                type: Input
            }], messageDirection: [{
                type: Input
            }], messageAppearance: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], hintText$: [] } });
//# sourceMappingURL=data:application/json;base64,