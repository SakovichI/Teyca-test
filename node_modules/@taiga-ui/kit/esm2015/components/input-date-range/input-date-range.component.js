import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, HostBinding, HostListener, Inject, inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';
import { maskitoDateRangeOptionsGenerator } from '@maskito/kit';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, InjectFlags, RANGE_SEPARATOR_CHAR, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_IS_MOBILE, TUI_LAST_DAY, tuiAsControl, tuiAsFocusableItemAccessor, TuiDayRange, tuiIsPresent, TuiMonth, tuiNullableSame, tuiPure, } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER, TUI_DROPDOWN_COMPONENT, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TuiCalendarRangeComponent } from '@taiga-ui/kit/components/calendar-range';
import { MAX_DAY_RANGE_LENGTH_MAPPER, TUI_DATE_MODE_MASKITO_ADAPTER, } from '@taiga-ui/kit/constants';
import { TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_DATE_TEXTS, TUI_INPUT_DATE_OPTIONS, TUI_MOBILE_CALENDAR, tuiDateStreamWithTransformer, } from '@taiga-ui/kit/tokens';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/components/calendar-range";
import * as i3 from "@taiga-ui/cdk";
import * as i4 from "@taiga-ui/kit/directives";
import * as i5 from "@maskito/angular";
import * as i6 from "@angular/common";
import * as i7 from "@tinkoff/ng-polymorpheus";
import * as i8 from "@angular/forms";
import * as i9 from "rxjs";
export class TuiInputDateRangeComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize) {
        super(control, cdr, valueTransformer);
        this.isMobile = isMobile;
        this.mobileCalendar = mobileCalendar;
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.options = options;
        this.textfieldSize = textfieldSize;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonth = TuiMonth.currentLocal();
        this.items = [];
        this.min = this.options.min;
        this.max = this.options.max;
        this.minLength = null;
        this.maxLength = null;
        this.open = false;
        this.selectedActivePeriod = null;
        this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
        this.dateFiller$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
    }
    onClick() {
        if (!this.isMobile && this.interactive) {
            this.toggle();
        }
    }
    // TODO: remove this after refactor controls to hold whole TuiDayRangePeriod
    ngAfterViewChecked() {
        if (this.calendarRange) {
            this.calendarRange.selectedActivePeriod = this.selectedActivePeriod;
            this.calendarRange.cdr.markForCheck();
        }
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        var _a, _b;
        /**
         * TODO: we can delete this workaround in v4.0
         * after solving this issue:
         * https://github.com/taiga-family/maskito/issues/604
         */
        if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {
            return TUI_FIRST_DAY;
        }
        return (_b = this.min) !== null && _b !== void 0 ? _b : this.options.min;
    }
    get computedMax() {
        var _a, _b;
        /**
         * TODO: we can delete this workaround in v4.0
         * after solving this issue:
         * https://github.com/taiga-family/maskito/issues/604
         */
        if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {
            return TUI_LAST_DAY;
        }
        return (_b = this.max) !== null && _b !== void 0 ? _b : this.options.max;
    }
    get nativeFocusableElement() {
        var _a, _b;
        return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
        var _a;
        return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get computedMobile() {
        return this.isMobile && !!this.mobileCalendar;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get computedExampleText() {
        var _a, _b;
        return this.items.length
            ? ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.placeholder) || ''
            : '';
    }
    get computedMask() {
        var _a, _b;
        /**
         * TODO: we can delete this workaround in v4.0
         * after solving this issue:
         * https://github.com/taiga-family/maskito/issues/604
         */
        const nativeValueIsNotSynced = ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.value) !== this.computedValue;
        return this.activePeriod || nativeValueIsNotSynced
            ? MASKITO_DEFAULT_OPTIONS
            : this.calculateMask(this.dateFormat, this.dateSeparator, this.computedMin, this.computedMax, this.minLength, this.maxLength);
    }
    get activePeriod() {
        var _a;
        return (_a = this.selectedActivePeriod) !== null && _a !== void 0 ? _a : this.findActivePeriodBy(this.value);
    }
    get computedValue() {
        const { value, nativeValue, activePeriod } = this;
        if (activePeriod) {
            return String(activePeriod);
        }
        return value
            ? value.getFormattedDayRange(this.dateFormat, this.dateSeparator)
            : nativeValue;
    }
    get showValueTemplate() {
        return tuiIsPresent(this.value) && !this.focused;
    }
    get computedContent() {
        var _a;
        return ((_a = this.activePeriod) === null || _a === void 0 ? void 0 : _a.content) || this.computedValue;
    }
    get innerPseudoFocused() {
        if (this.pseudoFocus === false) {
            return false;
        }
        if (this.open || this.computedFocused) {
            return true;
        }
        return null;
    }
    get nativeValue() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';
    }
    set nativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    getComputedRangeFiller(dateFiller) {
        return this.activePeriod ? '' : this.getDateRangeFiller(dateFiller);
    }
    onIconClick() {
        if (this.isMobile && this.interactive) {
            this.onOpenChange(true);
        }
    }
    onOpenChange(open) {
        this.open = open;
    }
    onValueChange(value) {
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value && !this.mobileCalendar) {
            this.onOpenChange(true);
        }
        this.value =
            value.length === DATE_RANGE_FILLER_LENGTH
                ? TuiDayRange.normalizeParse(value, this.dateFormat)
                : null;
        if (!this.value) {
            this.selectedActivePeriod = null;
        }
    }
    onRangeChange(range) {
        var _a, _b;
        this.toggle();
        this.focusInput();
        if (!range) {
            this.nativeValue = '';
        }
        this.value = range;
        this.selectedActivePeriod = (_b = (_a = this.calendarRange) === null || _a === void 0 ? void 0 : _a.selectedActivePeriod) !== null && _b !== void 0 ? _b : null;
    }
    // TODO: investigate if it is used anywhere and (if not) delete it in v4.0
    onItemSelect(item) {
        this.toggle();
        this.focusInput();
        if (typeof item !== 'string') {
            this.value = item.range.dayLimit(this.min, this.max);
            return;
        }
        if (this.activePeriod === null) {
            return;
        }
        this.value = null;
        this.nativeValue = '';
    }
    onActiveZone(focused) {
        this.updateFocused(focused);
        if (!focused &&
            !this.itemSelected &&
            (this.nativeValue.length === DATE_FILLER_LENGTH ||
                this.nativeValue.length ===
                    DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {
            this.value = TuiDayRange.normalizeParse(this.nativeValue, this.dateFormat);
        }
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = value ? this.computedValue : '';
        this.selectedActivePeriod = this.findActivePeriodBy(this.value);
    }
    valueIdenticalComparator(oldValue, newValue) {
        return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));
    }
    calculateMask(dateFormat, separator, min, max, minLength, maxLength) {
        return maskitoDateRangeOptionsGenerator({
            separator,
            mode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],
            min: min.toLocalNativeDate(),
            max: max.toLocalNativeDate(),
            minLength: minLength || {},
            maxLength: maxLength || {},
        });
    }
    get itemSelected() {
        return this.items.findIndex(item => String(item) === this.nativeValue) !== -1;
    }
    toggle() {
        this.open = !this.open;
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    getDateRangeFiller(dateFiller) {
        return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;
    }
    findActivePeriodBy(value) {
        var _a;
        return ((_a = this.items.find(item => tuiNullableSame(value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) &&
            a.to.daySame(b.to.dayLimit(this.min, this.max))))) !== null && _a !== void 0 ? _a : null);
    }
}
TuiInputDateRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateRangeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_MOBILE }, { token: TUI_MOBILE_CALENDAR, optional: true }, { token: TUI_DATE_FORMAT }, { token: TUI_DATE_SEPARATOR }, { token: TUI_DATE_TEXTS }, { token: TUI_DATE_RANGE_VALUE_TRANSFORMER, optional: true }, { token: TUI_INPUT_DATE_OPTIONS }, { token: TUI_TEXTFIELD_SIZE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputDateRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputDateRangeComponent, selector: "tui-input-date-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonth: "defaultViewedMonth", items: "items", min: "min", max: "max", minLength: "minLength", maxLength: "maxLength" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputDateRangeComponent),
        tuiAsControl(TuiInputDateRangeComponent),
        tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER),
        {
            provide: TUI_DROPDOWN_COMPONENT,
            useFactory: () => (inject(TUI_IS_MOBILE) &&
                inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional)) ||
                inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
        },
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }, { propertyName: "calendarRange", first: true, predicate: i0.forwardRef(function () { return TuiCalendarRangeComponent; }), descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"dateFiller$ | async as dateFiller\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"computedMask\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"getComputedRangeFiller(dateFiller || '')\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        ></ng-content>\n\n        <div\n            *ngIf=\"showValueTemplate\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <ng-container *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-svg\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            appearance=\"icon\"\n            automation-id=\"tui-input-date-range__icon\"\n            tuiWrapper\n            [class.t-icon]=\"!computedDisabled\"\n            [readOnly]=\"readOnly\"\n            [src]=\"src\"\n            (click)=\"onIconClick()\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar-range\n            [defaultViewedMonth]=\"defaultViewedMonth\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [items]=\"items\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"max\"\n            [maxLength]=\"maxLength\"\n            [min]=\"min\"\n            [minLength]=\"minLength\"\n            [value]=\"value\"\n            (valueChange)=\"onRangeChange($event)\"\n        ></tui-calendar-range>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-value{display:flex;width:100%;align-items:center}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiCalendarRangeComponent, selector: "tui-calendar-range", inputs: ["defaultViewedMonth", "disabledItemHandler", "markerHandler", "items", "min", "max", "minLength", "maxLength", "value", "item"], outputs: ["valueChange", "itemChange"] }], directives: [{ type: i3.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i3.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i4.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i5.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputDateRangeComponent.prototype, "calculateMask", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-date-range',
                    templateUrl: './input-date-range.template.html',
                    styleUrls: ['./input-date-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateRangeComponent),
                        tuiAsControl(TuiInputDateRangeComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER),
                        {
                            provide: TUI_DROPDOWN_COMPONENT,
                            useFactory: () => (inject(TUI_IS_MOBILE) &&
                                inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional)) ||
                                inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i8.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i0.Type, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_MOBILE_CALENDAR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_SEPARATOR]
                }] }, { type: i9.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_TEXTS]
                }] }, { type: i3.AbstractTuiValueTransformer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DATE_RANGE_VALUE_TRANSFORMER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], calendarRange: [{
                type: ViewChild,
                args: [forwardRef(() => TuiCalendarRangeComponent)]
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonth: [{
                type: Input
            }], items: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], calculateMask: [] } });
//# sourceMappingURL=data:application/json;base64,