import { Inject, Pipe } from '@angular/core';
import { CHAR_NO_BREAK_SPACE } from '@taiga-ui/cdk';
import { TUI_DIGITAL_INFORMATION_UNITS, TUI_INPUT_FILE_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiFormatSize } from '@taiga-ui/kit/utils';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiMaxSizeRejectionErrorPipe {
    constructor(inputFileTexts$, units$) {
        this.inputFileTexts$ = inputFileTexts$;
        this.units$ = units$;
    }
    transform(maxFileSize) {
        return combineLatest([this.inputFileTexts$, this.units$]).pipe(map(([{ maxSizeRejectionReason }, units]) => `${maxSizeRejectionReason}${CHAR_NO_BREAK_SPACE}${tuiFormatSize(units, maxFileSize)}`));
    }
}
TuiMaxSizeRejectionErrorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMaxSizeRejectionErrorPipe, deps: [{ token: TUI_INPUT_FILE_TEXTS }, { token: TUI_DIGITAL_INFORMATION_UNITS }], target: i0.ɵɵFactoryTarget.Pipe });
TuiMaxSizeRejectionErrorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMaxSizeRejectionErrorPipe, name: "tuiMaxSizeRejectionError" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMaxSizeRejectionErrorPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'tuiMaxSizeRejectionError' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_FILE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DIGITAL_INFORMATION_UNITS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LXNpemUtcmVqZWN0aW9uLWVycm9yLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9pbnB1dC1maWxlcy9tYXgtc2l6ZS1yZWplY3Rpb24tZXJyb3IucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLG1CQUFtQixFQUF3QixNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUMsNkJBQTZCLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGFBQWEsRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBR25DLE1BQU0sT0FBTyw0QkFBNEI7SUFDckMsWUFFcUIsZUFFaEIsRUFFZ0IsTUFFaEI7UUFOZ0Isb0JBQWUsR0FBZixlQUFlLENBRS9CO1FBRWdCLFdBQU0sR0FBTixNQUFNLENBRXRCO0lBQ0YsQ0FBQztJQUVKLFNBQVMsQ0FBQyxXQUFtQjtRQUN6QixPQUFPLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMxRCxHQUFHLENBQ0MsQ0FBQyxDQUFDLEVBQUMsc0JBQXNCLEVBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQ2xDLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CLEdBQUcsYUFBYSxDQUMzRCxLQUFLLEVBQ0wsV0FBVyxDQUNkLEVBQUUsQ0FDVixDQUNKLENBQUM7SUFDTixDQUFDOzswSEF0QlEsNEJBQTRCLGtCQUV6QixvQkFBb0IsYUFJcEIsNkJBQTZCO3dIQU5oQyw0QkFBNEI7NEZBQTVCLDRCQUE0QjtrQkFEeEMsSUFBSTttQkFBQyxFQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBQzs7MEJBRy9CLE1BQU07MkJBQUMsb0JBQW9COzswQkFJM0IsTUFBTTsyQkFBQyw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NIQVJfTk9fQlJFQUtfU1BBQ0UsIFR1aUluamVjdGlvblRva2VuVHlwZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9ESUdJVEFMX0lORk9STUFUSU9OX1VOSVRTLCBUVUlfSU5QVVRfRklMRV9URVhUU30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHt0dWlGb3JtYXRTaXplfSBmcm9tICdAdGFpZ2EtdWkva2l0L3V0aWxzJztcbmltcG9ydCB7Y29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AUGlwZSh7bmFtZTogJ3R1aU1heFNpemVSZWplY3Rpb25FcnJvcid9KVxuZXhwb3J0IGNsYXNzIFR1aU1heFNpemVSZWplY3Rpb25FcnJvclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfSU5QVVRfRklMRV9URVhUUylcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEZpbGVUZXh0cyQ6IFR1aUluamVjdGlvblRva2VuVHlwZTxcbiAgICAgICAgICAgIHR5cGVvZiBUVUlfSU5QVVRfRklMRV9URVhUU1xuICAgICAgICA+LFxuICAgICAgICBASW5qZWN0KFRVSV9ESUdJVEFMX0lORk9STUFUSU9OX1VOSVRTKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHVuaXRzJDogVHVpSW5qZWN0aW9uVG9rZW5UeXBlPFxuICAgICAgICAgICAgdHlwZW9mIFRVSV9ESUdJVEFMX0lORk9STUFUSU9OX1VOSVRTXG4gICAgICAgID4sXG4gICAgKSB7fVxuXG4gICAgdHJhbnNmb3JtKG1heEZpbGVTaXplOiBudW1iZXIpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gY29tYmluZUxhdGVzdChbdGhpcy5pbnB1dEZpbGVUZXh0cyQsIHRoaXMudW5pdHMkXSkucGlwZShcbiAgICAgICAgICAgIG1hcChcbiAgICAgICAgICAgICAgICAoW3ttYXhTaXplUmVqZWN0aW9uUmVhc29ufSwgdW5pdHNdKSA9PlxuICAgICAgICAgICAgICAgICAgICBgJHttYXhTaXplUmVqZWN0aW9uUmVhc29ufSR7Q0hBUl9OT19CUkVBS19TUEFDRX0ke3R1aUZvcm1hdFNpemUoXG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEZpbGVTaXplLFxuICAgICAgICAgICAgICAgICAgICApfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==