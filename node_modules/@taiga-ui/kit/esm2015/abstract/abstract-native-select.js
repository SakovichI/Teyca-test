import { Directive, ElementRef, HostBinding, Inject, Input, TemplateRef, ViewChild, } from '@angular/core';
import { AbstractTuiControl, TuiIdService } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_HOST, TuiDataListDirective } from '@taiga-ui/core';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
export class AbstractTuiNativeSelect {
    constructor(host, control, el, idService, itemsHandlers) {
        this.host = host;
        this.control = control;
        this.el = el;
        this.idService = idService;
        this.itemsHandlers = itemsHandlers;
        this.placeholder = '';
        this.disabledItemHandler = null;
        this.datalist = null;
    }
    get id() {
        return this.el.nativeElement.id || this.idService.generate();
    }
    get emptyOption() {
        return !!this.placeholder && !this.control.value;
    }
}
AbstractTuiNativeSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiNativeSelect, deps: [{ token: TUI_TEXTFIELD_HOST }, { token: AbstractTuiControl }, { token: ElementRef }, { token: TuiIdService }, { token: TUI_ITEMS_HANDLERS }], target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiNativeSelect.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiNativeSelect, inputs: { placeholder: "placeholder", disabledItemHandler: "disabledItemHandler" }, host: { properties: { "id": "this.id" } }, viewQueries: [{ propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiNativeSelect, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_HOST]
                }] }, { type: i1.AbstractTuiControl, decorators: [{
                    type: Inject,
                    args: [AbstractTuiControl]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ITEMS_HANDLERS]
                }] }]; }, propDecorators: { placeholder: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], datalist: [{
                type: ViewChild,
                args: [TuiDataListDirective, { read: TemplateRef, static: true }]
            }], id: [{
                type: HostBinding,
                args: ['id']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbmF0aXZlLXNlbGVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9hYnN0cmFjdC9hYnN0cmFjdC1uYXRpdmUtc2VsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGtCQUFrQixFQUFxQixZQUFZLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFDLGtCQUFrQixFQUFFLG9CQUFvQixFQUFtQixNQUFNLGdCQUFnQixDQUFDO0FBQzFGLE9BQU8sRUFBQyxrQkFBa0IsRUFBbUIsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBRzFFLE1BQU0sT0FBZ0IsdUJBQXVCO0lBVXpDLFlBQ3lDLElBQU8sRUFDUCxPQUFvQyxFQUNsQyxFQUFpQyxFQUV2RCxTQUF1QixFQUUvQixhQUFrQztRQU5OLFNBQUksR0FBSixJQUFJLENBQUc7UUFDUCxZQUFPLEdBQVAsT0FBTyxDQUE2QjtRQUNsQyxPQUFFLEdBQUYsRUFBRSxDQUErQjtRQUV2RCxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBRS9CLGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQWYvQyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUdqQix3QkFBbUIsR0FBZ0MsSUFBSSxDQUFDO1FBRy9DLGFBQVEsR0FBNEIsSUFBSSxDQUFDO0lBVS9DLENBQUM7SUFFSixJQUNJLEVBQUU7UUFDRixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDckQsQ0FBQzs7cUhBM0JpQix1QkFBdUIsa0JBVzdCLGtCQUFrQixhQUNsQixrQkFBa0IsYUFDbEIsVUFBVSxhQUNWLFlBQVksYUFFWixrQkFBa0I7eUdBaEJaLHVCQUF1QixtTUFPOUIsb0JBQW9CLDJCQUFTLFdBQVc7NEZBUGpDLHVCQUF1QjtrQkFENUMsU0FBUzs7MEJBWUQsTUFBTTsyQkFBQyxrQkFBa0I7OzBCQUN6QixNQUFNOzJCQUFDLGtCQUFrQjs7MEJBQ3pCLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsWUFBWTs7MEJBRW5CLE1BQU07MkJBQUMsa0JBQWtCOzRDQWQ5QixXQUFXO3NCQURWLEtBQUs7Z0JBSU4sbUJBQW1CO3NCQURsQixLQUFLO2dCQUlHLFFBQVE7c0JBRGhCLFNBQVM7dUJBQUMsb0JBQW9CLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUM7Z0JBYzlELEVBQUU7c0JBREwsV0FBVzt1QkFBQyxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWJzdHJhY3RUdWlDb250cm9sLCBUdWlCb29sZWFuSGFuZGxlciwgVHVpSWRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX1RFWFRGSUVMRF9IT1NULCBUdWlEYXRhTGlzdERpcmVjdGl2ZSwgVHVpVGV4dGZpZWxkSG9zdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtUVUlfSVRFTVNfSEFORExFUlMsIFR1aUl0ZW1zSGFuZGxlcnN9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3Q8SCA9IFR1aVRleHRmaWVsZEhvc3QsIFQgPSBzdHJpbmc+IHtcbiAgICBASW5wdXQoKVxuICAgIHBsYWNlaG9sZGVyID0gJyc7XG5cbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkSXRlbUhhbmRsZXI6IFR1aUJvb2xlYW5IYW5kbGVyPFQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgICBAVmlld0NoaWxkKFR1aURhdGFMaXN0RGlyZWN0aXZlLCB7cmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZX0pXG4gICAgcmVhZG9ubHkgZGF0YWxpc3Q6IFRlbXBsYXRlUmVmPGFueT4gfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9URVhURklFTERfSE9TVCkgcmVhZG9ubHkgaG9zdDogSCxcbiAgICAgICAgQEluamVjdChBYnN0cmFjdFR1aUNvbnRyb2wpIHJlYWRvbmx5IGNvbnRyb2w6IEFic3RyYWN0VHVpQ29udHJvbDx1bmtub3duPixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcm90ZWN0ZWQgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTFNlbGVjdEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFR1aUlkU2VydmljZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpZFNlcnZpY2U6IFR1aUlkU2VydmljZSxcbiAgICAgICAgQEluamVjdChUVUlfSVRFTVNfSEFORExFUlMpXG4gICAgICAgIHJlYWRvbmx5IGl0ZW1zSGFuZGxlcnM6IFR1aUl0ZW1zSGFuZGxlcnM8VD4sXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdpZCcpXG4gICAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaWQgfHwgdGhpcy5pZFNlcnZpY2UuZ2VuZXJhdGUoKTtcbiAgICB9XG5cbiAgICBnZXQgZW1wdHlPcHRpb24oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMucGxhY2Vob2xkZXIgJiYgIXRoaXMuY29udHJvbC52YWx1ZTtcbiAgICB9XG59XG4iXX0=