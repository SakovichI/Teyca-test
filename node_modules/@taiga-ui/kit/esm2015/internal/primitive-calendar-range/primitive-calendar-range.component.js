import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDestroyService, TuiMonth, tuiWatch, } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER } from '@taiga-ui/core';
import { TUI_CALENDAR_DATE_STREAM } from '@taiga-ui/kit/tokens';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "rxjs";
/**
 * @internal
 */
export class TuiPrimitiveCalendarRangeComponent {
    constructor(valueChanges, cdr, destroy$) {
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonthFirst = TuiMonth.currentLocal();
        this.defaultViewedMonthSecond = TuiMonth.currentLocal().append({ month: 1 });
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.value = null;
        this.dayClick = new EventEmitter();
        this.hoveredItem = null;
        this.userViewedMonthFirst = this.defaultViewedMonthFirst;
        this.userViewedMonthSecond = this.defaultViewedMonthSecond;
        this.monthOffset = (value, offset) => value.append({ month: offset });
        if (!valueChanges) {
            return;
        }
        valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe(value => {
            this.value = value;
            this.updateViewedMonths();
        });
    }
    get cappedUserViewedMonthSecond() {
        return this.userViewedMonthSecond.monthBefore(this.max)
            ? this.userViewedMonthSecond
            : this.max;
    }
    get cappedUserViewedMonthFirst() {
        return this.userViewedMonthFirst.monthSameOrBefore(this.userViewedMonthSecond)
            ? this.userViewedMonthFirst
            : this.userViewedMonthSecond;
    }
    ngOnChanges({ defaultViewedMonthFirst, defaultViewedMonthSecond, }) {
        if (!this.value) {
            this.updateViewedMonths(defaultViewedMonthFirst === null || defaultViewedMonthFirst === void 0 ? void 0 : defaultViewedMonthFirst.currentValue, defaultViewedMonthSecond === null || defaultViewedMonthSecond === void 0 ? void 0 : defaultViewedMonthSecond.currentValue);
        }
    }
    ngOnInit() {
        this.setInitialMonths();
    }
    onSectionFirstViewedMonth(month) {
        this.userViewedMonthFirst = month;
        this.userViewedMonthSecond = this.userViewedMonthFirst.append({ month: 1 });
    }
    onSectionSecondViewedMonth(month) {
        this.userViewedMonthSecond = month;
        this.userViewedMonthFirst = this.userViewedMonthSecond.append({
            month: -1,
        });
    }
    onDayClick(day) {
        this.dayClick.emit(day);
    }
    setInitialMonths() {
        if (!this.value) {
            this.userViewedMonthSecond = this.updatedViewedMonthSecond(this.defaultViewedMonthSecond);
            this.userViewedMonthFirst = this.updatedViewedMonthFirst(this.defaultViewedMonthFirst);
        }
    }
    updatedViewedMonthSecond(month) {
        if (month.monthSameOrAfter(this.max)) {
            return this.max;
        }
        if (month.monthSameOrBefore(this.min)) {
            return this.min.append({ month: 1 });
        }
        return month;
    }
    updatedViewedMonthFirst(month) {
        if (month.monthSameOrAfter(this.userViewedMonthSecond)) {
            return this.userViewedMonthSecond.append({ month: -1 });
        }
        if (month.monthSameOrBefore(this.min)) {
            return this.min;
        }
        return month;
    }
    updateViewedMonths(firstMonth, secondMonth) {
        if (this.value) {
            this.userViewedMonthFirst = this.value.from;
            this.userViewedMonthSecond = this.userViewedMonthFirst.append({ month: 1 });
        }
        else {
            this.userViewedMonthSecond = this.updatedViewedMonthSecond(secondMonth !== null && secondMonth !== void 0 ? secondMonth : this.userViewedMonthSecond);
            this.userViewedMonthFirst = this.updatedViewedMonthFirst(firstMonth !== null && firstMonth !== void 0 ? firstMonth : this.userViewedMonthFirst);
        }
    }
}
TuiPrimitiveCalendarRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeComponent, deps: [{ token: TUI_CALENDAR_DATE_STREAM, optional: true }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveCalendarRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCalendarRangeComponent, selector: "tui-primitive-calendar-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonthFirst: "defaultViewedMonthFirst", defaultViewedMonthSecond: "defaultViewedMonthSecond", min: "min", max: "max", value: "value" }, outputs: { dayClick: "dayClick" }, providers: [TuiDestroyService], usesOnChanges: true, ngImport: i0, template: "<tui-calendar\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [markerHandler]=\"markerHandler\"\n    [max]=\"max\"\n    [maxViewedMonth]=\"cappedUserViewedMonthSecond | tuiMapper: monthOffset : -1\"\n    [min]=\"min\"\n    [month]=\"userViewedMonthFirst\"\n    [showAdjacent]=\"false\"\n    [value]=\"value\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionFirstViewedMonth($event)\"\n></tui-calendar>\n<tui-calendar\n    class=\"t-border\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [markerHandler]=\"markerHandler\"\n    [max]=\"max\"\n    [min]=\"min\"\n    [minViewedMonth]=\"cappedUserViewedMonthFirst | tuiMapper: monthOffset : 1\"\n    [month]=\"userViewedMonthSecond\"\n    [showAdjacent]=\"false\"\n    [value]=\"value\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionSecondViewedMonth($event)\"\n></tui-calendar>\n", styles: [":host{display:flex}.t-border{border-left:1px solid var(--tui-base-03)}\n"], components: [{ type: i1.TuiCalendarComponent, selector: "tui-calendar", inputs: ["initialView", "month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }], pipes: { "tuiMapper": i2.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-calendar-range',
                    templateUrl: './primitive-calendar-range.template.html',
                    styleUrls: ['./primitive-calendar-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CALENDAR_DATE_STREAM]
                }, {
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i2.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonthFirst: [{
                type: Input
            }], defaultViewedMonthSecond: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], value: [{
                type: Input
            }], dayClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,