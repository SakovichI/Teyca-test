import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { FormControl } from '@angular/forms';
import { tuiCapitalizeFirstLetter, TuiFlagPipe } from '@taiga-ui/core';
import { TuiCountryIsoCode, TuiLanguageSwitcher } from '@taiga-ui/i18n';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
import * as i5 from "@taiga-ui/i18n";
export class TuiLanguageSwitcherComponent {
    constructor(switcher, flagPipe) {
        this.switcher = switcher;
        this.flagPipe = flagPipe;
        this.language = new FormControl(tuiCapitalizeFirstLetter(this.switcher.language));
        this.flags = new Map([
            ['chinese', TuiCountryIsoCode.CN],
            ['dutch', TuiCountryIsoCode.NL],
            ['english', TuiCountryIsoCode.GB],
            ['french', TuiCountryIsoCode.FR],
            ['hebrew', TuiCountryIsoCode.IL],
            ['german', TuiCountryIsoCode.DE],
            ['japan', TuiCountryIsoCode.JP],
            ['italian', TuiCountryIsoCode.IT],
            ['korean', TuiCountryIsoCode.KR],
            ['polish', TuiCountryIsoCode.PL],
            ['portuguese', TuiCountryIsoCode.PT],
            ['russian', TuiCountryIsoCode.RU],
            ['spanish', TuiCountryIsoCode.ES],
            ['turkish', TuiCountryIsoCode.TR],
            ['ukrainian', TuiCountryIsoCode.UA],
            ['kazakh', TuiCountryIsoCode.KZ],
            ['malay', TuiCountryIsoCode.MY],
            ['vietnamese', TuiCountryIsoCode.VN],
        ]);
        this.names = Array.from(this.flags.keys());
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    getFlagPath(code) {
        return this.flagPipe.transform(code);
    }
}
TuiLanguageSwitcherComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherComponent, deps: [{ token: TuiLanguageSwitcher }, { token: TuiFlagPipe }], target: i0.ɵɵFactoryTarget.Component });
TuiLanguageSwitcherComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiLanguageSwitcherComponent, selector: "tui-language-switcher", providers: [
        // TODO: for backward compatibility only. Drop in v4.0
        TuiFlagPipe,
    ], ngImport: i0, template: "<tui-select [formControl]=\"language\">\n    <ng-content></ng-content>\n    <tui-data-list *tuiDataList>\n        <button\n            *ngFor=\"let name of names\"\n            tuiOption\n            [value]=\"name | titlecase\"\n            (click)=\"switcher.setLanguage(name)\"\n        >\n            <img\n                alt=\"\"\n                class=\"t-flag\"\n                [src]=\"flags.get(name) | tuiFlag\"\n            />\n            {{ name | titlecase }}\n        </button>\n    </tui-data-list>\n</tui-select>\n", styles: [".t-flag{width:1.75rem;height:1.25rem;margin-right:.5rem}\n"], components: [{ type: i1.TuiSelectComponent, selector: "tui-select", inputs: ["stringify", "identityMatcher", "valueContent"] }, { type: i2.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i2.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }], directives: [{ type: i1.TuiSelectDirective, selector: "tui-select" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "titlecase": i4.TitleCasePipe, "tuiFlag": i2.TuiFlagPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcherComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-language-switcher',
                    templateUrl: './language-switcher.component.html',
                    styleUrls: ['./language-switcher.component.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        // TODO: for backward compatibility only. Drop in v4.0
                        TuiFlagPipe,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i5.TuiLanguageSwitcher, decorators: [{
                    type: Inject,
                    args: [TuiLanguageSwitcher]
                }] }, { type: i2.TuiFlagPipe, decorators: [{
                    type: Inject,
                    args: [TuiFlagPipe]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc3dpdGNoZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tZG9jL2NvbXBvbmVudHMvbGFuZ3VhZ2Utc3dpdGNoZXIvbGFuZ3VhZ2Utc3dpdGNoZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWRkb24tZG9jL2NvbXBvbmVudHMvbGFuZ3VhZ2Utc3dpdGNoZXIvbGFuZ3VhZ2Utc3dpdGNoZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyx3QkFBd0IsRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRSxPQUFPLEVBQUMsaUJBQWlCLEVBQW1CLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFZdkYsTUFBTSxPQUFPLDRCQUE0QjtJQTBCckMsWUFDMEMsUUFBNkIsRUFDN0IsUUFBcUI7UUFEckIsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQTNCdEQsYUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU3RSxVQUFLLEdBQUcsSUFBSSxHQUFHLENBQXFDO1lBQ3pELENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNqQyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDL0IsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ2pDLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNoQyxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDaEMsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ2hDLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUMvQixDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDakMsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ2hDLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNoQyxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDcEMsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ2pDLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNqQyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDakMsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQ25DLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNoQyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDL0IsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztRQUVNLFVBQUssR0FBc0IsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFLL0QsQ0FBQztJQUVKOzs7T0FHRztJQUNILFdBQVcsQ0FBQyxJQUF3QjtRQUNoQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OzBIQXJDUSw0QkFBNEIsa0JBMkJ6QixtQkFBbUIsYUFDbkIsV0FBVzs4R0E1QmQsNEJBQTRCLGdEQUwxQjtRQUNQLHNEQUFzRDtRQUN0RCxXQUFXO0tBQ2QsMEJDYkwsc2hCQWtCQTs0RkRIYSw0QkFBNEI7a0JBVnhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsV0FBVyxFQUFFLG9DQUFvQztvQkFDakQsU0FBUyxFQUFFLENBQUMsb0NBQW9DLENBQUM7b0JBQ2pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUU7d0JBQ1Asc0RBQXNEO3dCQUN0RCxXQUFXO3FCQUNkO2lCQUNKOzswQkE0QlEsTUFBTTsyQkFBQyxtQkFBbUI7OzBCQUMxQixNQUFNOzJCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge3R1aUNhcGl0YWxpemVGaXJzdExldHRlciwgVHVpRmxhZ1BpcGV9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VHVpQ291bnRyeUlzb0NvZGUsIFR1aUxhbmd1YWdlTmFtZSwgVHVpTGFuZ3VhZ2VTd2l0Y2hlcn0gZnJvbSAnQHRhaWdhLXVpL2kxOG4nO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1sYW5ndWFnZS1zd2l0Y2hlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xhbmd1YWdlLXN3aXRjaGVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9sYW5ndWFnZS1zd2l0Y2hlci5jb21wb25lbnQubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICAvLyBUT0RPOiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBvbmx5LiBEcm9wIGluIHY0LjBcbiAgICAgICAgVHVpRmxhZ1BpcGUsXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTGFuZ3VhZ2VTd2l0Y2hlckNvbXBvbmVudCB7XG4gICAgcmVhZG9ubHkgbGFuZ3VhZ2UgPSBuZXcgRm9ybUNvbnRyb2wodHVpQ2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHRoaXMuc3dpdGNoZXIubGFuZ3VhZ2UpKTtcblxuICAgIHJlYWRvbmx5IGZsYWdzID0gbmV3IE1hcDxUdWlMYW5ndWFnZU5hbWUsIFR1aUNvdW50cnlJc29Db2RlPihbXG4gICAgICAgIFsnY2hpbmVzZScsIFR1aUNvdW50cnlJc29Db2RlLkNOXSxcbiAgICAgICAgWydkdXRjaCcsIFR1aUNvdW50cnlJc29Db2RlLk5MXSxcbiAgICAgICAgWydlbmdsaXNoJywgVHVpQ291bnRyeUlzb0NvZGUuR0JdLFxuICAgICAgICBbJ2ZyZW5jaCcsIFR1aUNvdW50cnlJc29Db2RlLkZSXSxcbiAgICAgICAgWydoZWJyZXcnLCBUdWlDb3VudHJ5SXNvQ29kZS5JTF0sXG4gICAgICAgIFsnZ2VybWFuJywgVHVpQ291bnRyeUlzb0NvZGUuREVdLFxuICAgICAgICBbJ2phcGFuJywgVHVpQ291bnRyeUlzb0NvZGUuSlBdLFxuICAgICAgICBbJ2l0YWxpYW4nLCBUdWlDb3VudHJ5SXNvQ29kZS5JVF0sXG4gICAgICAgIFsna29yZWFuJywgVHVpQ291bnRyeUlzb0NvZGUuS1JdLFxuICAgICAgICBbJ3BvbGlzaCcsIFR1aUNvdW50cnlJc29Db2RlLlBMXSxcbiAgICAgICAgWydwb3J0dWd1ZXNlJywgVHVpQ291bnRyeUlzb0NvZGUuUFRdLFxuICAgICAgICBbJ3J1c3NpYW4nLCBUdWlDb3VudHJ5SXNvQ29kZS5SVV0sXG4gICAgICAgIFsnc3BhbmlzaCcsIFR1aUNvdW50cnlJc29Db2RlLkVTXSxcbiAgICAgICAgWyd0dXJraXNoJywgVHVpQ291bnRyeUlzb0NvZGUuVFJdLFxuICAgICAgICBbJ3VrcmFpbmlhbicsIFR1aUNvdW50cnlJc29Db2RlLlVBXSxcbiAgICAgICAgWydrYXpha2gnLCBUdWlDb3VudHJ5SXNvQ29kZS5LWl0sXG4gICAgICAgIFsnbWFsYXknLCBUdWlDb3VudHJ5SXNvQ29kZS5NWV0sXG4gICAgICAgIFsndmlldG5hbWVzZScsIFR1aUNvdW50cnlJc29Db2RlLlZOXSxcbiAgICBdKTtcblxuICAgIHJlYWRvbmx5IG5hbWVzOiBUdWlMYW5ndWFnZU5hbWVbXSA9IEFycmF5LmZyb20odGhpcy5mbGFncy5rZXlzKCkpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpTGFuZ3VhZ2VTd2l0Y2hlcikgcmVhZG9ubHkgc3dpdGNoZXI6IFR1aUxhbmd1YWdlU3dpdGNoZXIsXG4gICAgICAgIEBJbmplY3QoVHVpRmxhZ1BpcGUpIHByaXZhdGUgcmVhZG9ubHkgZmxhZ1BpcGU6IFR1aUZsYWdQaXBlLFxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgPGltZyBbc3JjXT1cImNvdW50cnlJc29Db2RlIHwgdHVpRmxhZ1BpcGVcIiAvPmBcbiAgICAgKiBUT0RPIGRyb3AgaW4gdjQuMFxuICAgICAqL1xuICAgIGdldEZsYWdQYXRoKGNvZGU/OiBUdWlDb3VudHJ5SXNvQ29kZSk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5mbGFnUGlwZS50cmFuc2Zvcm0oY29kZSk7XG4gICAgfVxufVxuIiwiPHR1aS1zZWxlY3QgW2Zvcm1Db250cm9sXT1cImxhbmd1YWdlXCI+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDx0dWktZGF0YS1saXN0ICp0dWlEYXRhTGlzdD5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IG5hbWUgb2YgbmFtZXNcIlxuICAgICAgICAgICAgdHVpT3B0aW9uXG4gICAgICAgICAgICBbdmFsdWVdPVwibmFtZSB8IHRpdGxlY2FzZVwiXG4gICAgICAgICAgICAoY2xpY2spPVwic3dpdGNoZXIuc2V0TGFuZ3VhZ2UobmFtZSlcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInQtZmxhZ1wiXG4gICAgICAgICAgICAgICAgW3NyY109XCJmbGFncy5nZXQobmFtZSkgfCB0dWlGbGFnXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7eyBuYW1lIHwgdGl0bGVjYXNlIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvdHVpLWRhdGEtbGlzdD5cbjwvdHVpLXNlbGVjdD5cbiJdfQ==