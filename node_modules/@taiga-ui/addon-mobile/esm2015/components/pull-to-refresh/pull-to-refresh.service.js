import { ElementRef, Inject, Injectable } from '@angular/core';
import { TUI_SCROLL_REF, tuiScrollFrom, tuiTypedFromEvent } from '@taiga-ui/cdk';
import { EMPTY, Observable } from 'rxjs';
import { distinctUntilChanged, endWith, filter, map, scan, share, startWith, switchMap, takeUntil, takeWhile, tap, } from 'rxjs/operators';
import { TUI_PULL_TO_REFRESH_COMPONENT, TUI_PULL_TO_REFRESH_LOADED, TUI_PULL_TO_REFRESH_THRESHOLD, } from './pull-to-refresh.providers';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export const MICRO_OFFSET = Math.pow(10, -6);
const EXCLUSION_SELECTORS = 'tui-dialog, tui-dropdown, tui-sheet-dialog, tui-dropdown-mobile';
export class TuiPullToRefreshService extends Observable {
    constructor(el, scrollRef, loaded$, threshold, component) {
        super(subscriber => (component ? this.pulling$ : EMPTY).subscribe(subscriber));
        this.el = el;
        this.scrollRef = scrollRef;
        this.loaded$ = loaded$;
        this.threshold = threshold;
        // Hack for iOS to determine if pulling stopped due to scroll
        // because Safari does not support `touch-action: pan-down`
        this.touched = false;
        this.pulling$ = this.loaded$.pipe(startWith(null), switchMap(() => tuiTypedFromEvent(this.element, 'touchstart', { passive: true }).pipe(filter(() => !this.scrollTop &&
            !this.el.nativeElement.querySelector(EXCLUSION_SELECTORS)), map(({ touches }) => touches[0].clientY), switchMap(start => tuiTypedFromEvent(this.element, 'touchmove').pipe(tap(() => {
            this.touched = true;
        }), map(({ touches }) => touches[0].clientY - start), filter(distance => distance > 0), takeUntil(tuiTypedFromEvent(this.element, 'touchend').pipe(tap(() => {
            this.touched = false;
        }))), takeUntil(tuiScrollFrom(this.scrollRef.nativeElement)), endWith(0))), scan((prev, current) => !current && !this.touched && prev > this.threshold
            ? this.threshold
            : current + current * MICRO_OFFSET, 0), takeWhile(distance => distance !== this.threshold, true), startWith(0))), distinctUntilChanged(), share());
    }
    get element() {
        return this.el.nativeElement;
    }
    get scrollTop() {
        return this.scrollRef.nativeElement.scrollTop;
    }
}
TuiPullToRefreshService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshService, deps: [{ token: ElementRef }, { token: TUI_SCROLL_REF }, { token: TUI_PULL_TO_REFRESH_LOADED }, { token: TUI_PULL_TO_REFRESH_THRESHOLD }, { token: TUI_PULL_TO_REFRESH_COMPONENT }], target: i0.ɵɵFactoryTarget.Injectable });
TuiPullToRefreshService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPullToRefreshService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_SCROLL_REF]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_LOADED]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_THRESHOLD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_PULL_TO_REFRESH_COMPONENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,