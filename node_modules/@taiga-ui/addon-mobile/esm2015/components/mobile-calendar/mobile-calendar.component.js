import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, NgZone, Optional, Output, Self, ViewChild, } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, MONTHS_IN_YEAR, TUI_FIRST_DAY, TUI_IS_E2E, TUI_IS_IOS, TUI_LAST_DAY, TuiDay, TuiDayRange, TuiDestroyService, TuiMonth, tuiTypedFromEvent, tuiZonefree, } from '@taiga-ui/cdk';
import { TUI_ANIMATIONS_DURATION, TUI_CLOSE_WORD, TUI_COMMON_ICONS, TUI_SHORT_WEEK_DAYS, } from '@taiga-ui/core';
import { TUI_CANCEL_WORD, TUI_CHOOSE_DAY_OR_RANGE_TEXTS, TUI_DONE_WORD, tuiImmutableUpdateInputDateMulti, } from '@taiga-ui/kit';
import { BehaviorSubject, identity, race, timer, } from 'rxjs';
import { debounceTime, delay, distinctUntilChanged, filter, map, mergeMap, skip, switchMap, take, takeUntil, windowToggle, } from 'rxjs/operators';
import { RANGE, SCROLL_DEBOUNCE_TIME, STARTING_YEAR, YEARS_IN_ROW, } from './mobile-calendar.const';
import { TUI_MOBILE_CALENDAR_PROVIDERS, TUI_VALUE_STREAM, } from './mobile-calendar.providers';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/cdk/scrolling";
import * as i3 from "@taiga-ui/addon-mobile/internal/primitive-calendar-mobile";
import * as i4 from "@angular/common";
import * as i5 from "@taiga-ui/addon-mobile/directives/ripple";
import * as i6 from "@taiga-ui/addon-mobile/directives/touchable";
import * as i7 from "@taiga-ui/cdk";
import * as i8 from "rxjs";
export class TuiMobileCalendarComponent {
    constructor(isIOS, isE2E, doc, destroy$, valueChanges, icons, closeWord$, cancelWord$, doneWord$, unorderedWeekDays$, chooseDayOrRangeTexts$, duration, ngZone) {
        this.isIOS = isIOS;
        this.isE2E = isE2E;
        this.doc = doc;
        this.destroy$ = destroy$;
        this.icons = icons;
        this.closeWord$ = closeWord$;
        this.cancelWord$ = cancelWord$;
        this.doneWord$ = doneWord$;
        this.unorderedWeekDays$ = unorderedWeekDays$;
        this.chooseDayOrRangeTexts$ = chooseDayOrRangeTexts$;
        this.duration = duration;
        this.ngZone = ngZone;
        this.value$ = new BehaviorSubject(null);
        this.today = TuiDay.currentLocal();
        this.activeYear = 0;
        this.activeMonth = 0;
        this.single = true;
        this.multi = false;
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.cancel = new EventEmitter();
        this.confirm = new EventEmitter();
        this.valueChange = this.value$.pipe(skip(1), distinctUntilChanged((a, b) => (a === null || a === void 0 ? void 0 : a.toString()) === (b === null || b === void 0 ? void 0 : b.toString())), takeUntil(this.destroy$));
        this.years = Array.from({ length: RANGE }, (_, i) => i + STARTING_YEAR);
        this.months = Array.from({ length: RANGE * 12 }, (_, i) => new TuiMonth(Math.floor(i / MONTHS_IN_YEAR) + STARTING_YEAR, i % MONTHS_IN_YEAR));
        this.initialized = false;
        this.disabledItemHandlerMapper = (disabledItemHandler, min, max) => item => item.dayBefore(min) ||
            (max !== null && item.dayAfter(max)) ||
            disabledItemHandler(item);
        valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
            this.value = value;
        });
    }
    get value() {
        return this.value$.value;
    }
    set value(value) {
        this.value$.next(value);
    }
    get yearWidth() {
        return this.doc.documentElement.clientWidth / YEARS_IN_ROW;
    }
    ngAfterViewInit() {
        this.activeYear = this.initialYear;
        this.activeMonth = this.initialMonth;
        // Virtual scroll has not yet rendered items even in ngAfterViewInit
        this.waitScrolledChange();
    }
    onClose() {
        this.cancel.emit();
    }
    onConfirm() {
        if (this.value) {
            this.confirm.emit(this.value);
        }
        else {
            this.cancel.emit();
        }
    }
    onDayClick(day) {
        if (this.single) {
            this.value = day;
        }
        else if (this.isMultiValue(this.value)) {
            this.value = tuiImmutableUpdateInputDateMulti(this.value, day);
        }
        else if (this.value instanceof TuiDay) {
            this.value = TuiDayRange.sort(this.value, day);
        }
        else if (this.value instanceof TuiDayRange && !this.value.isSingleDay) {
            this.value = day;
        }
        else if (this.value instanceof TuiDayRange) {
            this.value = TuiDayRange.sort(this.value.from, day);
        }
        else if (!this.value) {
            this.value = day;
        }
    }
    getState(index) {
        if (this.isYearActive(index)) {
            return 'active';
        }
        if (this.isYearActive(index - 1) || this.isYearActive(index + 1)) {
            return 'adjacent';
        }
        return null;
    }
    onMonthChange(month) {
        // Skipping initial callback where index === 0
        if (!month || this.activeMonth === month) {
            return;
        }
        this.activeMonth = month;
        const activeYear = this.monthToYear(month);
        if (activeYear === this.activeYear) {
            return;
        }
        this.activeYear = activeYear;
        this.scrollToActiveYear();
    }
    setYear(year) {
        if (this.activeYear === year) {
            return;
        }
        this.activeMonth += this.getMonthOffset(year);
        this.activeYear = year;
        this.scrollToActiveYear('smooth');
        // Delay is required to run months scroll in the next frame to prevent flicker
        timer(0)
            .pipe(tuiZonefree(this.ngZone), takeUntil(this.destroy$))
            .subscribe(() => this.scrollToActiveMonth());
    }
    isMultiValue(day) {
        return !(day instanceof TuiDay) && !(day instanceof TuiDayRange) && this.multi;
    }
    get initialYear() {
        var _a, _b, _c;
        if (!this.value) {
            return this.today.year;
        }
        if (this.value instanceof TuiDay) {
            return this.value.year;
        }
        if (!(this.value instanceof TuiDayRange)) {
            return (_c = (_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.year) !== null && _c !== void 0 ? _c : this.today.year;
        }
        return this.value.to.year;
    }
    get initialMonth() {
        var _a, _b, _c, _d, _e, _f;
        if (!this.value) {
            return this.today.month + (this.today.year - STARTING_YEAR) * MONTHS_IN_YEAR;
        }
        if (this.value instanceof TuiDay) {
            return this.value.month + (this.value.year - STARTING_YEAR) * MONTHS_IN_YEAR;
        }
        if (!(this.value instanceof TuiDayRange)) {
            return (((_c = (_b = (_a = this.value) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.month) !== null && _c !== void 0 ? _c : this.today.month) +
                (((_f = (_e = (_d = this.value) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.year) !== null && _f !== void 0 ? _f : this.today.year) - STARTING_YEAR) *
                    MONTHS_IN_YEAR);
        }
        return (this.value.to.month + (this.value.to.year - STARTING_YEAR) * MONTHS_IN_YEAR);
    }
    getYearsViewportSize() {
        var _a;
        return ((_a = this.yearsScrollRef) === null || _a === void 0 ? void 0 : _a.getViewportSize()) || 0;
    }
    updateViewportDimension() {
        var _a, _b;
        (_a = this.yearsScrollRef) === null || _a === void 0 ? void 0 : _a.checkViewportSize();
        (_b = this.monthsScrollRef) === null || _b === void 0 ? void 0 : _b.checkViewportSize();
    }
    lateInit() {
        return this.getYearsViewportSize() > 0 ? identity : delay(200);
    }
    waitScrolledChange() {
        var _a;
        this.updateViewportDimension();
        (_a = this.monthsScrollRef) === null || _a === void 0 ? void 0 : _a.scrolledIndexChange.pipe(delay(this.duration), this.lateInit(), take(1), takeUntil(this.destroy$)).subscribe(() => {
            this.initialized = true;
            this.updateViewportDimension();
            this.initYearScroll();
            this.initMonthScroll();
            this.scrollToActiveYear();
            this.scrollToActiveMonth();
        });
    }
    initYearScroll() {
        const { yearsScrollRef } = this;
        if (!yearsScrollRef) {
            return;
        }
        const touchstart$ = tuiTypedFromEvent(yearsScrollRef.elementRef.nativeElement, 'touchstart', { passive: true });
        const touchend$ = tuiTypedFromEvent(yearsScrollRef.elementRef.nativeElement, 'touchend', { passive: true });
        const click$ = tuiTypedFromEvent(yearsScrollRef.elementRef.nativeElement, 'click');
        // Refresh activeYear
        yearsScrollRef
            .elementScrolled()
            .pipe(
        // Ignore smooth scroll resulting from click on the exact year
        windowToggle(touchstart$, () => click$), mergeMap(x => x), 
        // Delay is required to run months scroll in the next frame to prevent flicker
        delay(0), map(() => Math.round(yearsScrollRef.measureScrollOffset() / this.yearWidth) +
            Math.floor(YEARS_IN_ROW / 2) +
            STARTING_YEAR), filter(activeYear => activeYear !== this.activeYear), takeUntil(this.destroy$))
            .subscribe(activeYear => {
            this.activeMonth += this.getMonthOffset(activeYear);
            this.activeYear = activeYear;
            this.scrollToActiveMonth();
        });
        // Smooth scroll to activeYear after scrolling is done
        touchstart$
            .pipe(switchMap(() => touchend$), switchMap(() => race(yearsScrollRef.elementScrolled(), timer(SCROLL_DEBOUNCE_TIME)).pipe(debounceTime(SCROLL_DEBOUNCE_TIME * 2), take(1), takeUntil(touchstart$))), takeUntil(this.destroy$))
            .subscribe(() => this.scrollToActiveYear('smooth'));
    }
    initMonthScroll() {
        const { monthsScrollRef } = this;
        if (!monthsScrollRef) {
            return;
        }
        const touchstart$ = tuiTypedFromEvent(monthsScrollRef.elementRef.nativeElement, 'touchstart', { passive: true });
        const touchend$ = tuiTypedFromEvent(monthsScrollRef.elementRef.nativeElement, 'touchend', { passive: true });
        // Smooth scroll to the closest month after scrolling is done
        touchstart$
            .pipe(switchMap(() => touchend$), switchMap(() => race(monthsScrollRef.elementScrolled(), timer(SCROLL_DEBOUNCE_TIME)).pipe(debounceTime(SCROLL_DEBOUNCE_TIME * 2), take(1), takeUntil(touchstart$))), takeUntil(this.destroy$))
            .subscribe(() => this.scrollToActiveMonth('smooth'));
    }
    scrollToActiveYear(behavior = 'auto') {
        var _a;
        (_a = this.yearsScrollRef) === null || _a === void 0 ? void 0 : _a.scrollToIndex(Math.max(this.activeYear - STARTING_YEAR - 2, 0), this.isE2E ? 'auto' : behavior);
    }
    scrollToActiveMonth(behavior = 'auto') {
        var _a;
        (_a = this.monthsScrollRef) === null || _a === void 0 ? void 0 : _a.scrollToIndex(this.activeMonth, this.isE2E ? 'auto' : behavior);
    }
    isYearActive(index) {
        return index === this.activeYear;
    }
    monthToYear(month) {
        return Math.ceil((month + 1) / MONTHS_IN_YEAR) + STARTING_YEAR - 1;
    }
    getMonthOffset(year) {
        return (year - this.activeYear) * MONTHS_IN_YEAR;
    }
}
TuiMobileCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileCalendarComponent, deps: [{ token: TUI_IS_IOS }, { token: TUI_IS_E2E }, { token: DOCUMENT }, { token: TuiDestroyService, self: true }, { token: TUI_VALUE_STREAM }, { token: TUI_COMMON_ICONS }, { token: TUI_CLOSE_WORD }, { token: TUI_CANCEL_WORD }, { token: TUI_DONE_WORD }, { token: TUI_SHORT_WEEK_DAYS }, { token: TUI_CHOOSE_DAY_OR_RANGE_TEXTS, optional: true }, { token: TUI_ANIMATIONS_DURATION }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component });
TuiMobileCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMobileCalendarComponent, selector: "tui-mobile-calendar", inputs: { single: "single", multi: "multi", min: "min", max: "max", disabledItemHandler: "disabledItemHandler", value: "value" }, outputs: { cancel: "cancel", confirm: "confirm", valueChange: "valueChange" }, host: { listeners: { "mousedown.prevent": "0" }, properties: { "class._ios": "isIOS", "class._initialized": "initialized" } }, providers: TUI_MOBILE_CALENDAR_PROVIDERS, viewQueries: [{ propertyName: "yearsScrollRef", first: true, predicate: ["yearsScrollRef"], descendants: true }, { propertyName: "monthsScrollRef", first: true, predicate: ["monthsScrollRef"], descendants: true }], ngImport: i0, template: "<header\n    *ngIf=\"chooseDayOrRangeTexts$ | async as texts\"\n    class=\"t-header\"\n>\n    <button\n        appearance=\"\"\n        automation-id=\"tui-mobile-calendar__cancel\"\n        shape=\"rounded\"\n        tuiIconButton\n        tuiRipple\n        type=\"button\"\n        class=\"t-close\"\n        [icon]=\"icons.close\"\n        [title]=\"closeWord$ | async\"\n        (click)=\"onClose()\"\n    ></button>\n    <button\n        tuiLink\n        tuiTouchable=\"opacity\"\n        type=\"button\"\n        class=\"t-link t-link_close\"\n        (click)=\"onClose()\"\n    >\n        {{ cancelWord$ | async }}\n    </button>\n    <h2\n        automation-id=\"tui-mobile-calendar__label\"\n        class=\"t-label\"\n    >\n        {{ single ? texts[0] : multi ? texts[2] : texts[1] }}\n    </h2>\n    <button\n        automation-id=\"tui-mobile-calendar__confirm\"\n        tuiLink\n        tuiTouchable=\"opacity\"\n        type=\"button\"\n        class=\"t-link\"\n        (click)=\"onConfirm()\"\n    >\n        {{ doneWord$ | async }}\n    </button>\n</header>\n<cdk-virtual-scroll-viewport\n    #yearsScrollRef\n    orientation=\"horizontal\"\n    class=\"t-years\"\n    [itemSize]=\"yearWidth\"\n>\n    <div class=\"t-years-wrapper\">\n        <button\n            *cdkVirtualFor=\"let index of years\"\n            type=\"button\"\n            class=\"t-year\"\n            [attr.data-state]=\"getState(index)\"\n            (click)=\"setYear(index)\"\n        >\n            {{ index }}\n        </button>\n    </div>\n</cdk-virtual-scroll-viewport>\n<div class=\"t-week\">\n    <div\n        *ngFor=\"let day of unorderedWeekDays$ | tuiOrderWeekDays | async\"\n        class=\"t-day\"\n    >\n        {{ day }}\n    </div>\n</div>\n<cdk-virtual-scroll-viewport\n    #monthsScrollRef\n    class=\"t-months\"\n    [class._without_header]=\"!chooseDayOrRangeTexts$\"\n    (scrolledIndexChange)=\"onMonthChange($event)\"\n>\n    <section\n        *cdkVirtualFor=\"let month of months; templateCacheSize: 10\"\n        class=\"t-month-wrapper\"\n    >\n        <h2 class=\"t-month\">{{ month | tuiMonth | async }}</h2>\n        <tui-primitive-calendar-mobile\n            class=\"t-calendar\"\n            [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerMapper : min : max\"\n            [month]=\"month\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n        ></tui-primitive-calendar-mobile>\n    </section>\n</cdk-virtual-scroll-viewport>\n", styles: [":host{display:block;height:100%;font-family:-apple-system,BlinkMacSystemFont,Roboto,sans-serif;color:var(--tui-text-01);-webkit-tap-highlight-color:transparent}.t-header{position:relative;display:flex;align-items:center;height:3.5rem;padding:0 1rem;border-bottom:.5px solid var(--tui-base-03)}:host._ios .t-header{height:2.75rem;border-bottom:none}.t-close{width:1.5rem;height:1.5rem;margin-right:2rem}:host._ios .t-close{display:none}.t-link{margin-left:auto;flex-shrink:0;font-size:.875rem;line-height:1rem;font-weight:500;text-transform:uppercase;color:var(--tui-link)}.t-link_close{display:none}:host._ios .t-link{min-width:3.75rem;text-align:right;font-size:.9375rem;line-height:1.125rem;font-weight:400;letter-spacing:.018125rem;text-transform:none}:host._ios .t-link_close{display:block;margin:0 auto 0 0;text-align:left}.t-label{flex-grow:1;margin:0;font-size:1.25rem;line-height:3.5rem;font-weight:500;letter-spacing:-.0125rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-label+.t-link{padding-left:1rem}:host._ios .t-label{font-size:1.0625rem;font-weight:600;letter-spacing:-.025625rem;text-align:center}.t-years{scrollbar-width:none;-ms-overflow-style:none;height:4.0625rem;background-color:var(--tui-base-01);box-shadow:0 .5px var(--tui-base-03)}.t-years::-webkit-scrollbar,.t-years::-webkit-scrollbar-thumb{display:none}:host._ios .t-years{background-color:transparent}.t-years-wrapper{display:flex;height:4.0625rem}.t-year{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;outline:none;width:20vw;flex-shrink:0;font-size:.9375rem;font-weight:700;letter-spacing:.015625rem;cursor:pointer;opacity:.1;transform:scale(.73);transition:color,opacity,transform .2s}.t-year[data-state=adjacent]{transform:scale(.86);opacity:.3}.t-year[data-state=active]{color:var(--tui-link);opacity:1;transform:scale(1)}.t-week{display:flex;align-items:center;height:1.875rem;width:20.75rem;max-width:100%;margin:0 auto;font-size:.75rem}:host._ios .t-week{width:22.625rem;font-size:.6875rem;font-weight:500;color:var(--tui-text-02)}.t-day{flex:1;text-align:center}.t-months{scrollbar-width:none;-ms-overflow-style:none;height:calc(100% - 9.5rem);box-shadow:0 -1px var(--tui-base-03);overflow-x:hidden}.t-months::-webkit-scrollbar,.t-months::-webkit-scrollbar-thumb{display:none}:host._ios .t-months{height:calc(100% - 8.75rem)}.t-months._without_header{height:calc(100% - 6rem)}.t-month-wrapper{margin:.625rem 0 -.625rem}.t-month{height:2.75rem;line-height:2.75rem;padding-left:1rem;font-size:.875rem;font-weight:500;text-transform:uppercase;margin:0 0 1.25rem;box-sizing:border-box;border-bottom:.5px solid var(--tui-base-03)}:host._ios .t-month{height:3.125rem;margin:0;border-bottom:none;text-transform:none;font-size:1.375rem;line-height:3.125rem;letter-spacing:.02rem;font-weight:700}.t-calendar{margin:0 auto;font-family:inherit;font-size:1.125rem;transition:opacity .2s}:host._ios .t-calendar{font-size:1.0625rem}.t-week,.t-years,.t-months{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;opacity:0}:host(._initialized) .t-week,:host(._initialized) .t-years,:host(._initialized) .t-months{opacity:1}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }, { type: i2.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: i3.TuiPrimitiveCalendarMobileComponent, selector: "tui-primitive-calendar-mobile" }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.TuiRippleDirective, selector: "[tuiRipple]", inputs: ["tuiRipple"] }, { type: i6.TuiTouchableDirective, selector: "[tuiTouchable]", inputs: ["tuiTouchable"] }, { type: i2.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4.AsyncPipe, "tuiOrderWeekDays": i1.TuiOrderWeekDaysPipe, "tuiMonth": i1.TuiMonthPipe, "tuiMapper": i7.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMobileCalendarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-mobile-calendar',
                    templateUrl: './mobile-calendar.template.html',
                    styleUrls: ['./mobile-calendar.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_MOBILE_CALENDAR_PROVIDERS,
                    host: {
                        '[class._ios]': 'isIOS',
                        '[class._initialized]': 'initialized',
                        '(mousedown.prevent)': '0',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_E2E]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i7.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_VALUE_STREAM]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COMMON_ICONS]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CANCEL_WORD]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DONE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SHORT_WEEK_DAYS]
                }] }, { type: i8.Observable, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_CHOOSE_DAY_OR_RANGE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }]; }, propDecorators: { yearsScrollRef: [{
                type: ViewChild,
                args: ['yearsScrollRef']
            }], monthsScrollRef: [{
                type: ViewChild,
                args: ['monthsScrollRef']
            }], single: [{
                type: Input
            }], multi: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], cancel: [{
                type: Output
            }], confirm: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,