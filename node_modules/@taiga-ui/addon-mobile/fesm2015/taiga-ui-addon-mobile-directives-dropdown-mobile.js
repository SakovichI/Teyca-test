import * as i1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, Directive, Inject, Input, HostListener, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, NgModule } from '@angular/core';
import * as i6 from '@taiga-ui/addon-mobile/services';
import { TuiKeyboardService } from '@taiga-ui/addon-mobile/services';
import * as i3 from '@taiga-ui/cdk';
import { tuiIsHTMLElement, TUI_IS_MOBILE, InjectFlags, tuiIsElement, tuiPx, tuiGetNativeFocused, TuiActiveZoneDirective, TuiSwipeModule } from '@taiga-ui/cdk';
import * as i5 from '@taiga-ui/core';
import { TUI_DROPDOWN_COMPONENT, TuiDropdownOpenMonitorDirective, TUI_ANIMATIONS_DURATION, TuiDropdownDirective, tuiSlideInTop, tuiFadeIn } from '@taiga-ui/core';
import * as i2 from '@ng-web-apis/intersection-observer';
import { IntersectionObserverModule } from '@ng-web-apis/intersection-observer';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class TuiDropdownMobileDirective {
    constructor(isMobile) {
        this.isMobile = isMobile;
        this.tuiDropdownMobile = '';
    }
    onMouseDown(event) {
        if (!this.isMobile ||
            !tuiIsHTMLElement(event.target) ||
            !event.target.matches('input,textarea')) {
            return;
        }
        event.preventDefault();
        event.target.focus({ preventScroll: true });
    }
}
TuiDropdownMobileDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileDirective, deps: [{ token: TUI_IS_MOBILE }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownMobileDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownMobileDirective, selector: "[tuiDropdownMobile]", inputs: { tuiDropdownMobile: "tuiDropdownMobile" }, host: { listeners: { "mousedown": "onMouseDown($event)" }, properties: { "style.visibility": "\"visible\"" } }, providers: [
        {
            provide: TUI_DROPDOWN_COMPONENT,
            useFactory: () => inject(TUI_IS_MOBILE)
                ? TuiDropdownMobileComponent
                : inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdownMobile]',
                    providers: [
                        {
                            provide: TUI_DROPDOWN_COMPONENT,
                            useFactory: () => inject(TUI_IS_MOBILE)
                                ? TuiDropdownMobileComponent
                                : inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf),
                        },
                    ],
                    host: {
                        '[style.visibility]': '"visible"',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }]; }, propDecorators: { tuiDropdownMobile: [{
                type: Input
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });

const GAP = 16;
class TuiDropdownMobileComponent {
    constructor(monitor, _, keyboard, doc, duration, el, dropdown, directive) {
        this.monitor = monitor;
        this.keyboard = keyboard;
        this.doc = doc;
        this.duration = duration;
        this.el = el;
        this.dropdown = dropdown;
        this.directive = directive;
        this.scrollTop = this.doc.documentElement.scrollTop;
        this.observer = new ResizeObserver(() => this.refresh(this.doc.defaultView.visualViewport));
        this.animation = {
            value: '',
            params: {
                start: '100vh',
                duration: this.duration,
            },
        };
        this.observer.observe(this.dropdown.el.nativeElement);
        this.doc.documentElement.style.setProperty('scroll-behavior', 'initial');
    }
    onClick(event) {
        if (tuiIsElement(event.target) &&
            !this.el.nativeElement.contains(event.target) &&
            (!this.dropdown.el.nativeElement.contains(event.target) ||
                event.target.matches('input,textarea'))) {
            event.stopPropagation();
        }
    }
    onSwipe({ direction }, el) {
        var _a;
        if (direction === 'bottom' &&
            el.getBoundingClientRect().bottom > Number((_a = this.doc.defaultView) === null || _a === void 0 ? void 0 : _a.innerHeight)) {
            this.close();
        }
    }
    onIntersection([{ isIntersecting }]) {
        if (isIntersecting) {
            this.close();
        }
    }
    close() {
        if (this.monitor) {
            this.monitor.tuiDropdownOpenMonitor = false;
        }
        this.dropdown.toggle(false);
    }
    refresh({ offsetTop, height }) {
        this.doc.body.style.removeProperty('--t-root-top');
        if (!this.focused ||
            this.directive.tuiDropdownMobile ||
            !this.doc.documentElement.style.getPropertyValue('scroll-behavior')) {
            return;
        }
        this.doc.documentElement.scrollTop = 0;
        const rect = this.dropdown.el.nativeElement.getBoundingClientRect();
        const offset = rect.height + GAP * 2;
        this.el.nativeElement.style.setProperty('top', tuiPx(offsetTop + offset));
        this.el.nativeElement.style.setProperty('height', tuiPx(height - offset));
        this.doc.body.classList.add('t-dropdown-mobile');
        this.doc.body.style.setProperty('--t-root-top', tuiPx(offsetTop + GAP - rect.top));
    }
    ngAfterViewInit() {
        this.el.nativeElement.scrollTop = this.directive.tuiDropdownMobile
            ? this.el.nativeElement.clientHeight
            : 0;
    }
    ngOnDestroy() {
        this.observer.disconnect();
        this.doc.body.classList.remove('t-dropdown-mobile');
        this.doc.body.style.removeProperty('--t-root-top');
        this.doc.documentElement.scrollTop = this.scrollTop;
        this.doc.documentElement.style.removeProperty('scroll-behavior');
        if (this.focused) {
            this.keyboard.hide();
        }
    }
    get focused() {
        return this.dropdown.el.nativeElement.contains(tuiGetNativeFocused(this.doc));
    }
}
TuiDropdownMobileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileComponent, deps: [{ token: TuiDropdownOpenMonitorDirective, optional: true }, { token: TuiActiveZoneDirective }, { token: TuiKeyboardService }, { token: DOCUMENT }, { token: TUI_ANIMATIONS_DURATION }, { token: ElementRef }, { token: TuiDropdownDirective }, { token: TuiDropdownMobileDirective }], target: i0.ɵɵFactoryTarget.Component });
TuiDropdownMobileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownMobileComponent, selector: "tui-dropdown-mobile", host: { listeners: { "document:click.silent.capture": "onClick($event)", "window>scroll.silent.capture": "refresh($event.currentTarget.visualViewport)", "visualViewport>resize.silent": "refresh($event.target)", "visualViewport>scroll.silent": "refresh($event.target)" }, properties: { "@tuiFadeIn": "animation", "@tuiSlideInTop": "animation", "class._sheet": "directive.tuiDropdownMobile" } }, providers: [TuiActiveZoneDirective], ngImport: i0, template: "<div\n    *ngIf=\"directive.tuiDropdownMobile\"\n    waIntersectionObserver\n    waIntersectionThreshold=\"1\"\n    class=\"t-filler\"\n    (touchstart.prevent)=\"close()\"\n    (waIntersectionObservee)=\"onIntersection($event)\"\n></div>\n<div\n    #container\n    class=\"t-container\"\n    (tuiSwipe)=\"onSwipe($event, container)\"\n>\n    <h2\n        *ngIf=\"directive.tuiDropdownMobile\"\n        class=\"t-heading\"\n    >\n        {{ directive.tuiDropdownMobile }}\n    </h2>\n    <div class=\"t-content\">\n        <ng-container *polymorpheusOutlet=\"dropdown.content as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n</div>\n", styles: ["tui-dropdown-mobile:not(._sheet){scrollbar-width:none;-ms-overflow-style:none;position:fixed;top:0;left:0;width:100%;height:100%;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;visibility:visible!important;transform:translate(0);background:var(--tui-base-01);overscroll-behavior:contain;overflow:auto;box-shadow:0 -.5rem .5rem var(--tui-base-01),0 10rem var(--tui-base-01),0 20rem var(--tui-base-01),0 30rem var(--tui-base-01)}tui-dropdown-mobile:not(._sheet)::-webkit-scrollbar,tui-dropdown-mobile:not(._sheet)::-webkit-scrollbar-thumb{display:none}tui-dropdown-mobile:not(._sheet):after{content:\"\";display:block;height:1px}tui-dropdown-mobile:not(._sheet)>.t-container{scrollbar-width:none;-ms-overflow-style:none;position:-webkit-sticky;position:sticky;top:0;height:100%;overflow:auto;margin:0 .75rem;touch-action:pan-y!important}tui-dropdown-mobile:not(._sheet)>.t-container::-webkit-scrollbar,tui-dropdown-mobile:not(._sheet)>.t-container::-webkit-scrollbar-thumb{display:none}tui-dropdown-mobile:not(._sheet) [tuiDropdownButton][tuiDropdownButton]{position:fixed;right:1rem;bottom:1rem;display:inline-flex}tui-dropdown-mobile._sheet{position:fixed;top:0;left:0;bottom:0;right:0;scrollbar-width:none;-ms-overflow-style:none;overflow:auto;background:rgba(0,0,0,.75);box-shadow:0 -80vh 0 5rem #000000bf;overflow-y:scroll;scroll-snap-type:y mandatory;overscroll-behavior:none}tui-dropdown-mobile._sheet::-webkit-scrollbar,tui-dropdown-mobile._sheet::-webkit-scrollbar-thumb{display:none}tui-dropdown-mobile._sheet>.t-filler{height:100%;scroll-snap-stop:always;scroll-snap-align:start}tui-dropdown-mobile._sheet>.t-container{display:flex;max-height:calc(100% - 1rem);flex-direction:column;border-top-left-radius:1rem;border-top-right-radius:1rem;padding:0 .5rem;scroll-snap-stop:always;scroll-snap-align:start;background:var(--tui-elevation-01)}tui-dropdown-mobile._sheet>.t-container>.t-heading{position:relative;margin:0;padding:2rem .5rem .75rem;font:var(--tui-font-heading-6)}tui-dropdown-mobile._sheet>.t-container>.t-heading:before{content:\"\";position:absolute;left:50%;top:.75rem;width:2rem;height:.25rem;border-radius:1rem;background:var(--tui-clear-hover);transform:translate(-50%,-50%)}tui-dropdown-mobile._sheet>.t-container>.t-content{scrollbar-width:none;-ms-overflow-style:none;overflow:auto}tui-dropdown-mobile._sheet>.t-container>.t-content::-webkit-scrollbar,tui-dropdown-mobile._sheet>.t-container>.t-content::-webkit-scrollbar-thumb{display:none}.t-dropdown-mobile{touch-action:none;visibility:hidden}.t-dropdown-mobile *{touch-action:inherit;visibility:inherit}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.IntersectionObserverDirective, selector: "[waIntersectionObserver]", exportAs: ["IntersectionObserver"] }, { type: i2.IntersectionObserveeDirective, selector: "[waIntersectionObservee]", outputs: ["waIntersectionObservee"] }, { type: i3.TuiSwipeDirective, selector: "[tuiSwipe]", outputs: ["tuiSwipe"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiSlideInTop, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-dropdown-mobile',
                    templateUrl: './dropdown-mobile.template.html',
                    styleUrls: ['./dropdown-mobile.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiActiveZoneDirective],
                    animations: [tuiSlideInTop, tuiFadeIn],
                    host: {
                        '[@tuiFadeIn]': 'animation',
                        '[@tuiSlideInTop]': 'animation',
                        '[class._sheet]': 'directive.tuiDropdownMobile',
                        '(document:click.silent.capture)': 'onClick($event)',
                        '(window>scroll.silent.capture)': 'refresh($event.currentTarget.visualViewport)',
                        '(visualViewport>resize.silent)': 'refresh($event.target)',
                        '(visualViewport>scroll.silent)': 'refresh($event.target)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i5.TuiDropdownOpenMonitorDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownOpenMonitorDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }, { type: i6.TuiKeyboardService, decorators: [{
                    type: Inject,
                    args: [TuiKeyboardService]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i5.TuiDropdownDirective, decorators: [{
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }, { type: TuiDropdownMobileDirective, decorators: [{
                    type: Inject,
                    args: [TuiDropdownMobileDirective]
                }] }]; } });

class TuiDropdownMobileModule {
}
TuiDropdownMobileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDropdownMobileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileModule, declarations: [TuiDropdownMobileComponent, TuiDropdownMobileDirective], imports: [PolymorpheusModule,
        CommonModule,
        TuiSwipeModule,
        IntersectionObserverModule], exports: [TuiDropdownMobileDirective] });
TuiDropdownMobileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileModule, imports: [[
            PolymorpheusModule,
            CommonModule,
            TuiSwipeModule,
            IntersectionObserverModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownMobileModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        PolymorpheusModule,
                        CommonModule,
                        TuiSwipeModule,
                        IntersectionObserverModule,
                    ],
                    declarations: [TuiDropdownMobileComponent, TuiDropdownMobileDirective],
                    exports: [TuiDropdownMobileDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDropdownMobileComponent, TuiDropdownMobileDirective, TuiDropdownMobileModule };
//# sourceMappingURL=taiga-ui-addon-mobile-directives-dropdown-mobile.js.map
