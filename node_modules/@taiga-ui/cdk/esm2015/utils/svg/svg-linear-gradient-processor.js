import { tuiIsString } from '@taiga-ui/cdk/utils/miscellaneous';
function makeRandomSalt() {
    return Math.floor(Math.random() * Date.now());
}
function escapeRegExp(search) {
    return search.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
function extractLinearGradientIdsFromSvg(svg) {
    var _a;
    const ids = ((_a = svg.match(/url\(("?)('*)#(.*?)('*)\)/g)) !== null && _a !== void 0 ? _a : []).map(url => url.slice(4, url.length - 1).replace(/['"#]+/g, ''));
    return Array.from(new Set(ids));
}
/**
 * @description:
 * Any ‘linearGradient’ attributes which are defined on the referenced
 * element which are not defined on this element are inherited by this element.
 * If this element has no defined gradient stops, and the referenced element does
 * (possibly due to its own ‘xlink:href’ attribute), then this element inherits
 * the gradient stop from the referenced element. Inheritance can be indirect
 * to an arbitrary level; thus, if the referenced element inherits attribute
 * or gradient stops due to its own ‘xlink:href’ attribute, then the current
 * element can inherit those attributes or gradient stops.
 *
 * Documentation: https://www.w3.org/TR/SVG11/pservers.html
 *
 */
export function tuiSvgLinearGradientProcessor(svg, salt = makeRandomSalt()) {
    if (tuiIsString(svg)) {
        const uniqueIds = extractLinearGradientIdsFromSvg(svg);
        return uniqueIds.reduce((newSvg, previousId) => {
            const escapedId = escapeRegExp(previousId);
            const newId = `id_${salt}_${previousId}`;
            return newSvg
                .replace(new RegExp(`"${escapedId}"`, 'g'), `"${newId}"`)
                .replace(new RegExp(`'${escapedId}'`, 'g'), `'${newId}'`)
                .replace(new RegExp(`url\\('#${escapedId}'\\)`, 'g'), `url('#${newId}')`)
                .replace(new RegExp(`url\\("#${escapedId}"\\)`, 'g'), `url("#${newId}")`)
                .replace(new RegExp(`url\\(#${escapedId}\\)`, 'g'), `url(#${newId})`);
        }, svg);
    }
    return svg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWxpbmVhci1ncmFkaWVudC1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvdXRpbHMvc3ZnL3N2Zy1saW5lYXItZ3JhZGllbnQtcHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUU5RCxTQUFTLGNBQWM7SUFDbkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsTUFBYztJQUNoQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUVELFNBQVMsK0JBQStCLENBQUMsR0FBVzs7SUFDaEQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFBLEdBQUcsQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ2xFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FDdEQsQ0FBQztJQUVGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxVQUFVLDZCQUE2QixDQUN6QyxHQUFnQixFQUNoQixPQUF3QixjQUFjLEVBQUU7SUFFeEMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbEIsTUFBTSxTQUFTLEdBQUcsK0JBQStCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkQsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFO1lBQzNDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMzQyxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUV6QyxPQUFPLE1BQU07aUJBQ1IsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQztpQkFDeEQsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQztpQkFDeEQsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsU0FBUyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsU0FBUyxLQUFLLElBQUksQ0FBQztpQkFDeEUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsU0FBUyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsU0FBUyxLQUFLLElBQUksQ0FBQztpQkFDeEUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLFVBQVUsU0FBUyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsUUFBUSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQzlFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNYO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlTYWZlSHRtbH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9pbnRlcmZhY2VzJztcbmltcG9ydCB7dHVpSXNTdHJpbmd9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5cbmZ1bmN0aW9uIG1ha2VSYW5kb21TYWx0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIERhdGUubm93KCkpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc2VhcmNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzZWFyY2gucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdExpbmVhckdyYWRpZW50SWRzRnJvbVN2Zyhzdmc6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBpZHMgPSAoc3ZnLm1hdGNoKC91cmxcXCgoXCI/KSgnKikjKC4qPykoJyopXFwpL2cpID8/IFtdKS5tYXAodXJsID0+XG4gICAgICAgIHVybC5zbGljZSg0LCB1cmwubGVuZ3RoIC0gMSkucmVwbGFjZSgvWydcIiNdKy9nLCAnJyksXG4gICAgKTtcblxuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoaWRzKSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uOlxuICogQW55IOKAmGxpbmVhckdyYWRpZW504oCZIGF0dHJpYnV0ZXMgd2hpY2ggYXJlIGRlZmluZWQgb24gdGhlIHJlZmVyZW5jZWRcbiAqIGVsZW1lbnQgd2hpY2ggYXJlIG5vdCBkZWZpbmVkIG9uIHRoaXMgZWxlbWVudCBhcmUgaW5oZXJpdGVkIGJ5IHRoaXMgZWxlbWVudC5cbiAqIElmIHRoaXMgZWxlbWVudCBoYXMgbm8gZGVmaW5lZCBncmFkaWVudCBzdG9wcywgYW5kIHRoZSByZWZlcmVuY2VkIGVsZW1lbnQgZG9lc1xuICogKHBvc3NpYmx5IGR1ZSB0byBpdHMgb3duIOKAmHhsaW5rOmhyZWbigJkgYXR0cmlidXRlKSwgdGhlbiB0aGlzIGVsZW1lbnQgaW5oZXJpdHNcbiAqIHRoZSBncmFkaWVudCBzdG9wIGZyb20gdGhlIHJlZmVyZW5jZWQgZWxlbWVudC4gSW5oZXJpdGFuY2UgY2FuIGJlIGluZGlyZWN0XG4gKiB0byBhbiBhcmJpdHJhcnkgbGV2ZWw7IHRodXMsIGlmIHRoZSByZWZlcmVuY2VkIGVsZW1lbnQgaW5oZXJpdHMgYXR0cmlidXRlXG4gKiBvciBncmFkaWVudCBzdG9wcyBkdWUgdG8gaXRzIG93biDigJh4bGluazpocmVm4oCZIGF0dHJpYnV0ZSwgdGhlbiB0aGUgY3VycmVudFxuICogZWxlbWVudCBjYW4gaW5oZXJpdCB0aG9zZSBhdHRyaWJ1dGVzIG9yIGdyYWRpZW50IHN0b3BzLlxuICpcbiAqIERvY3VtZW50YXRpb246IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9wc2VydmVycy5odG1sXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpU3ZnTGluZWFyR3JhZGllbnRQcm9jZXNzb3IoXG4gICAgc3ZnOiBUdWlTYWZlSHRtbCxcbiAgICBzYWx0OiBudW1iZXIgfCBzdHJpbmcgPSBtYWtlUmFuZG9tU2FsdCgpLFxuKTogVHVpU2FmZUh0bWwge1xuICAgIGlmICh0dWlJc1N0cmluZyhzdmcpKSB7XG4gICAgICAgIGNvbnN0IHVuaXF1ZUlkcyA9IGV4dHJhY3RMaW5lYXJHcmFkaWVudElkc0Zyb21Tdmcoc3ZnKTtcblxuICAgICAgICByZXR1cm4gdW5pcXVlSWRzLnJlZHVjZSgobmV3U3ZnLCBwcmV2aW91c0lkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlc2NhcGVkSWQgPSBlc2NhcGVSZWdFeHAocHJldmlvdXNJZCk7XG4gICAgICAgICAgICBjb25zdCBuZXdJZCA9IGBpZF8ke3NhbHR9XyR7cHJldmlvdXNJZH1gO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3U3ZnXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChgXCIke2VzY2FwZWRJZH1cImAsICdnJyksIGBcIiR7bmV3SWR9XCJgKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoYCcke2VzY2FwZWRJZH0nYCwgJ2cnKSwgYCcke25ld0lkfSdgKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoYHVybFxcXFwoJyMke2VzY2FwZWRJZH0nXFxcXClgLCAnZycpLCBgdXJsKCcjJHtuZXdJZH0nKWApXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChgdXJsXFxcXChcIiMke2VzY2FwZWRJZH1cIlxcXFwpYCwgJ2cnKSwgYHVybChcIiMke25ld0lkfVwiKWApXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChgdXJsXFxcXCgjJHtlc2NhcGVkSWR9XFxcXClgLCAnZycpLCBgdXJsKCMke25ld0lkfSlgKTtcbiAgICAgICAgfSwgc3ZnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ZnO1xufVxuIl19