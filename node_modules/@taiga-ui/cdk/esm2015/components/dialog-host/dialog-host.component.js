import { animateChild, query, style, transition, trigger } from '@angular/animations';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Self, } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { HISTORY } from '@ng-web-apis/common';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { TUI_DIALOGS, TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiCreateToken } from '@taiga-ui/cdk/utils';
import { combineLatest, of } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/components/scroll-controls";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/cdk/directives";
import * as i4 from "@tinkoff/ng-polymorpheus";
import * as i5 from "rxjs";
import * as i6 from "@angular/platform-browser";
const FAKE_HISTORY_STATE = { label: 'ignoreMe' };
const isFakeHistoryState = (historyState) => (historyState === null || historyState === void 0 ? void 0 : historyState.label) === FAKE_HISTORY_STATE.label;
/**
 * Is closing dialog on browser backward navigation enabled
 */
export const TUI_DIALOG_CLOSES_ON_BACK = tuiCreateToken(of(false));
export class TuiDialogHostComponent {
    constructor(isMobile, isDialogClosesOnBack$, dialogsByType, historyRef, titleService, destroy$, cdr, doc) {
        this.isMobile = isMobile;
        this.isDialogClosesOnBack$ = isDialogClosesOnBack$;
        this.dialogsByType = dialogsByType;
        this.historyRef = historyRef;
        this.titleService = titleService;
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.doc = doc;
        this.dialogs = [];
    }
    ngOnInit() {
        // Due to this view being parallel to app content, `markForCheck` from `async` pipe
        // can happen after view was checked, so calling `detectChanges` instead
        combineLatest(this.dialogsByType)
            .pipe(map(arr => []
            .concat(...arr)
            .sort((a, b) => a.createdAt - b.createdAt)), takeUntil(this.destroy$))
            .subscribe(dialogs => {
            var _a;
            this.dialogs = dialogs;
            this.cdr.markForCheck();
            (_a = this.doc.defaultView) === null || _a === void 0 ? void 0 : _a.document.documentElement.classList.toggle('t-overscroll-none', !!dialogs.length);
        });
    }
    closeLast(dialogs, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack) {
            return;
        }
        const [last] = dialogs.slice(-1);
        if (!last) {
            return;
        }
        if (dialogs.length > 1) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        last.$implicit.complete();
    }
    onDialog({ propertyName }, popupOpened, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack || propertyName !== 'letter-spacing') {
            return;
        }
        if (popupOpened) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        else if (isFakeHistoryState(this.historyRef.state)) {
            this.historyRef.back();
        }
    }
}
TuiDialogHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogHostComponent, deps: [{ token: TUI_IS_MOBILE }, { token: TUI_DIALOG_CLOSES_ON_BACK }, { token: TUI_DIALOGS }, { token: HISTORY }, { token: Title }, { token: TuiDestroyService, self: true }, { token: ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
TuiDialogHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDialogHostComponent, selector: "tui-dialog-host", providers: [TuiDestroyService], ngImport: i0, template: "<section\n    *ngFor=\"let item of dialogs\"\n    aria-modal=\"true\"\n    role=\"dialog\"\n    tuiFocusTrap\n    tuiOverscroll=\"all\"\n    tuiScrollRef\n    class=\"t-dialog\"\n    @host\n    [attr.aria-labelledby]=\"item.id\"\n>\n    <ng-container *polymorpheusOutlet=\"item.component; context: item\"></ng-container>\n    <tui-scroll-controls\n        *ngIf=\"!isMobile\"\n        class=\"t-scrollbars\"\n    ></tui-scroll-controls>\n</section>\n<div\n    *tuiLet=\"isDialogClosesOnBack$ | async as isDialogClosesOnBack\"\n    class=\"t-overlay\"\n    [class.t-overlay_visible]=\"dialogs.length\"\n    (transitionend)=\"onDialog($event, !!dialogs.length, !!isDialogClosesOnBack)\"\n    (window:popstate)=\"closeLast(dialogs, !!isDialogClosesOnBack)\"\n></div>\n", styles: [":host{position:fixed;left:0;bottom:0;width:100%;height:0}.t-overlay,.t-dialog{position:fixed;top:0;left:0;right:0;bottom:0;display:flex;align-items:flex-start;outline:none;overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.t-overlay.ng-animating,.t-dialog.ng-animating{overflow:clip}.t-overlay::-webkit-scrollbar,.t-dialog::-webkit-scrollbar,.t-overlay::-webkit-scrollbar-thumb,.t-dialog::-webkit-scrollbar-thumb{display:none}.t-dialog{bottom:auto;height:100%}.t-overlay{height:100%;pointer-events:none;touch-action:none;opacity:0;letter-spacing:normal;transition:opacity var(--tui-duration, .3s),letter-spacing .01s;background:rgba(0,0,0,.75);-webkit-backdrop-filter:var(--tui-backdrop, none);backdrop-filter:var(--tui-backdrop, none)}.t-overlay_visible{opacity:1;letter-spacing:1px}.t-dialog:last-of-type{z-index:1}.t-scrollbars{position:fixed;top:0;left:0;right:0;bottom:0;margin:0;color:#747474}\n"], components: [{ type: i1.TuiScrollControlsComponent, selector: "tui-scroll-controls" }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiFocusTrapDirective, selector: "[tuiFocusTrap]" }, { type: i3.TuiOverscrollDirective, selector: "[tuiOverscroll]", inputs: ["tuiOverscroll"] }, { type: i1.TuiScrollRefDirective, selector: "[tuiScrollRef]" }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }], pipes: { "async": i2.AsyncPipe }, animations: [
        trigger('host', [
            transition(':enter', [
                style({ overflow: 'clip' }),
                query(':scope > *', [animateChild()], { optional: true }),
            ]),
            transition(':leave', [
                query(':scope > *', [animateChild()], { optional: true }),
            ]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-dialog-host',
                    templateUrl: './dialog-host.template.html',
                    styleUrls: ['./dialog-host.style.less'],
                    // So that we do not force OnPush on custom dialogs
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    providers: [TuiDestroyService],
                    animations: [
                        trigger('host', [
                            transition(':enter', [
                                style({ overflow: 'clip' }),
                                query(':scope > *', [animateChild()], { optional: true }),
                            ]),
                            transition(':leave', [
                                query(':scope > *', [animateChild()], { optional: true }),
                            ]),
                        ]),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DIALOG_CLOSES_ON_BACK]
                }] }, { type: Array, decorators: [{
                    type: Inject,
                    args: [TUI_DIALOGS]
                }] }, { type: History, decorators: [{
                    type: Inject,
                    args: [HISTORY]
                }] }, { type: i6.Title, decorators: [{
                    type: Inject,
                    args: [Title]
                }] }, { type: i5.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,