/**
 * In Angular v20 InjectFlags is no longer public api
 * This enum is a complete copy to keep things working
 * @deprecated Use `InjectFlags` from `@angular/core` instead!
 * @see https://github.com/angular/angular/blob/12.3.x/packages/compiler/src/core.ts#L261-L280
 */
// eslint-disable-next-line no-restricted-syntax,@typescript-eslint/naming-convention
export var InjectFlags;
(function (InjectFlags) {
    /** Check self and check parent injector if needed */
    InjectFlags[InjectFlags["Default"] = 0] = "Default";
    /**
     * Specifies that an injector should retrieve a dependency from any injector until reaching the
     * host element of the current component. (Only used with Element Injector)
     */
    InjectFlags[InjectFlags["Host"] = 1] = "Host";
    /** Don't ascend to ancestors of the node requesting injection. */
    InjectFlags[InjectFlags["Self"] = 2] = "Self";
    /** Skip the node that is requesting injection. */
    InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
    /** Inject `defaultValue` instead if token not found. */
    InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
})(InjectFlags || (InjectFlags = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWZsYWdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2VudW1zL2luamVjdC1mbGFncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUNILHFGQUFxRjtBQUNyRixNQUFNLENBQU4sSUFBWSxXQWNYO0FBZEQsV0FBWSxXQUFXO0lBQ25CLHFEQUFxRDtJQUNyRCxtREFBVyxDQUFBO0lBQ1g7OztPQUdHO0lBQ0gsNkNBQVEsQ0FBQTtJQUNSLGtFQUFrRTtJQUNsRSw2Q0FBUSxDQUFBO0lBQ1Isa0RBQWtEO0lBQ2xELHFEQUFZLENBQUE7SUFDWix3REFBd0Q7SUFDeEQscURBQVksQ0FBQTtBQUNoQixDQUFDLEVBZFcsV0FBVyxLQUFYLFdBQVcsUUFjdEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEluIEFuZ3VsYXIgdjIwIEluamVjdEZsYWdzIGlzIG5vIGxvbmdlciBwdWJsaWMgYXBpXG4gKiBUaGlzIGVudW0gaXMgYSBjb21wbGV0ZSBjb3B5IHRvIGtlZXAgdGhpbmdzIHdvcmtpbmdcbiAqIEBkZXByZWNhdGVkIFVzZSBgSW5qZWN0RmxhZ3NgIGZyb20gYEBhbmd1bGFyL2NvcmVgIGluc3RlYWQhXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4zLngvcGFja2FnZXMvY29tcGlsZXIvc3JjL2NvcmUudHMjTDI2MS1MMjgwXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCxAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBlbnVtIEluamVjdEZsYWdzIHtcbiAgICAvKiogQ2hlY2sgc2VsZiBhbmQgY2hlY2sgcGFyZW50IGluamVjdG9yIGlmIG5lZWRlZCAqL1xuICAgIERlZmF1bHQgPSAwLFxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGF0IGFuIGluamVjdG9yIHNob3VsZCByZXRyaWV2ZSBhIGRlcGVuZGVuY3kgZnJvbSBhbnkgaW5qZWN0b3IgdW50aWwgcmVhY2hpbmcgdGhlXG4gICAgICogaG9zdCBlbGVtZW50IG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gKE9ubHkgdXNlZCB3aXRoIEVsZW1lbnQgSW5qZWN0b3IpXG4gICAgICovXG4gICAgSG9zdCA9IDEsXG4gICAgLyoqIERvbid0IGFzY2VuZCB0byBhbmNlc3RvcnMgb2YgdGhlIG5vZGUgcmVxdWVzdGluZyBpbmplY3Rpb24uICovXG4gICAgU2VsZiA9IDIsXG4gICAgLyoqIFNraXAgdGhlIG5vZGUgdGhhdCBpcyByZXF1ZXN0aW5nIGluamVjdGlvbi4gKi9cbiAgICBTa2lwU2VsZiA9IDQsXG4gICAgLyoqIEluamVjdCBgZGVmYXVsdFZhbHVlYCBpbnN0ZWFkIGlmIHRva2VuIG5vdCBmb3VuZC4gKi9cbiAgICBPcHRpb25hbCA9IDgsXG59XG4iXX0=