import { ContentChildren, Directive, ElementRef, HostListener, Inject, } from '@angular/core';
import { NgControl, RadioControlValueAccessor } from '@angular/forms';
import { RouterLinkActive } from '@angular/router';
import { EMPTY_QUERY, tuiControlValue, tuiQueryListChanges } from '@taiga-ui/cdk';
import { map, switchMap } from 'rxjs/operators';
import { TuiSegmentedComponent } from './segmented.component';
import * as i0 from "@angular/core";
import * as i1 from "./segmented.component";
export class TuiSegmentedDirective {
    constructor(component) {
        this.component = component;
        this.controls = EMPTY_QUERY;
        this.radios = EMPTY_QUERY;
        this.links = EMPTY_QUERY;
        this.elements = EMPTY_QUERY;
    }
    update(target) {
        this.component.update(this.getIndex(target));
    }
    ngAfterContentInit() {
        tuiQueryListChanges(this.controls)
            .pipe(switchMap(() => tuiControlValue(this.controls.first)), map(value => this.radios.toArray().findIndex(c => c.value === value)))
            .subscribe(index => {
            this.component.update(index);
        });
    }
    ngAfterContentChecked() {
        var _a;
        if (this.links.length) {
            this.update(((_a = this.elements.get(this.linkIndex)) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);
        }
    }
    get linkIndex() {
        return this.links.toArray().findIndex(link => link.isActive);
    }
    getIndex(element) {
        return Array.from(this.component.tabs).findIndex(tab => tab.contains(element));
    }
}
TuiSegmentedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedDirective, deps: [{ token: TuiSegmentedComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiSegmentedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiSegmentedDirective, selector: "tui-segmented", host: { listeners: { "click": "update($event.target)" } }, queries: [{ propertyName: "controls", predicate: NgControl, descendants: true }, { propertyName: "radios", predicate: RadioControlValueAccessor, descendants: true }, { propertyName: "links", predicate: RouterLinkActive }, { propertyName: "elements", predicate: RouterLinkActive, read: ElementRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSegmentedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-segmented',
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiSegmentedComponent, decorators: [{
                    type: Inject,
                    args: [TuiSegmentedComponent]
                }] }]; }, propDecorators: { controls: [{
                type: ContentChildren,
                args: [NgControl, { descendants: true }]
            }], radios: [{
                type: ContentChildren,
                args: [RadioControlValueAccessor, { descendants: true }]
            }], links: [{
                type: ContentChildren,
                args: [RouterLinkActive]
            }], elements: [{
                type: ContentChildren,
                args: [RouterLinkActive, { read: ElementRef }]
            }], update: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudGVkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2V4cGVyaW1lbnRhbC9jb21wb25lbnRzL3NlZ21lbnRlZC9zZWdtZW50ZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHSCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxHQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxTQUFTLEVBQUUseUJBQXlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDOzs7QUFLNUQsTUFBTSxPQUFPLHFCQUFxQjtJQWE5QixZQUNvRCxTQUFnQztRQUFoQyxjQUFTLEdBQVQsU0FBUyxDQUF1QjtRQVpuRSxhQUFRLEdBQXlCLFdBQVcsQ0FBQztRQUc3QyxXQUFNLEdBQXlDLFdBQVcsQ0FBQztRQUczRCxVQUFLLEdBQWdDLFdBQVcsQ0FBQztRQUdqRCxhQUFRLEdBQXVDLFdBQVcsQ0FBQztJQUl6RSxDQUFDO0lBR0osTUFBTSxDQUFDLE1BQXNCO1FBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUM3QixJQUFJLENBQ0QsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ3JELEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUN4RTthQUNBLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELHFCQUFxQjs7UUFDakIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLDBDQUFFLGFBQWEsS0FBSSxJQUFJLENBQUMsQ0FBQztTQUN6RTtJQUNMLENBQUM7SUFFRCxJQUFZLFNBQVM7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU8sUUFBUSxDQUFDLE9BQXVCO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDOzttSEE3Q1EscUJBQXFCLGtCQWNsQixxQkFBcUI7dUdBZHhCLHFCQUFxQix5SUFDYixTQUFTLDREQUdULHlCQUF5QiwyREFHekIsZ0JBQWdCLDJDQUdoQixnQkFBZ0IsUUFBUyxVQUFVOzRGQVYzQyxxQkFBcUI7a0JBSGpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7aUJBQzVCOzswQkFlUSxNQUFNOzJCQUFDLHFCQUFxQjs0Q0FaaEIsUUFBUTtzQkFEeEIsZUFBZTt1QkFBQyxTQUFTLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDO2dCQUk5QixNQUFNO3NCQUR0QixlQUFlO3VCQUFDLHlCQUF5QixFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQztnQkFJOUMsS0FBSztzQkFEckIsZUFBZTt1QkFBQyxnQkFBZ0I7Z0JBSWhCLFFBQVE7c0JBRHhCLGVBQWU7dUJBQUMsZ0JBQWdCLEVBQUUsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDO2dCQVFyRCxNQUFNO3NCQURMLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRDaGVja2VkLFxuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgUXVlcnlMaXN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sLCBSYWRpb0NvbnRyb2xWYWx1ZUFjY2Vzc29yfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1JvdXRlckxpbmtBY3RpdmV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge0VNUFRZX1FVRVJZLCB0dWlDb250cm9sVmFsdWUsIHR1aVF1ZXJ5TGlzdENoYW5nZXN9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHttYXAsIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVNlZ21lbnRlZENvbXBvbmVudH0gZnJvbSAnLi9zZWdtZW50ZWQuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktc2VnbWVudGVkJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2VnbWVudGVkRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgQENvbnRlbnRDaGlsZHJlbihOZ0NvbnRyb2wsIHtkZXNjZW5kYW50czogdHJ1ZX0pXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250cm9sczogUXVlcnlMaXN0PE5nQ29udHJvbD4gPSBFTVBUWV9RVUVSWTtcblxuICAgIEBDb250ZW50Q2hpbGRyZW4oUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvciwge2Rlc2NlbmRhbnRzOiB0cnVlfSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJhZGlvczogUXVlcnlMaXN0PFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3I+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKFJvdXRlckxpbmtBY3RpdmUpXG4gICAgcHJpdmF0ZSByZWFkb25seSBsaW5rczogUXVlcnlMaXN0PFJvdXRlckxpbmtBY3RpdmU+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKFJvdXRlckxpbmtBY3RpdmUsIHtyZWFkOiBFbGVtZW50UmVmfSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlTZWdtZW50ZWRDb21wb25lbnQpIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50OiBUdWlTZWdtZW50ZWRDb21wb25lbnQsXG4gICAgKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudC50YXJnZXQnXSlcbiAgICB1cGRhdGUodGFyZ2V0OiBFbGVtZW50IHwgbnVsbCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGUodGhpcy5nZXRJbmRleCh0YXJnZXQpKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIHR1aVF1ZXJ5TGlzdENoYW5nZXModGhpcy5jb250cm9scylcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0dWlDb250cm9sVmFsdWUodGhpcy5jb250cm9scy5maXJzdCkpLFxuICAgICAgICAgICAgICAgIG1hcCh2YWx1ZSA9PiB0aGlzLnJhZGlvcy50b0FycmF5KCkuZmluZEluZGV4KGMgPT4gYy52YWx1ZSA9PT0gdmFsdWUpKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoaW5kZXggPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZShpbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmxpbmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5lbGVtZW50cy5nZXQodGhpcy5saW5rSW5kZXgpPy5uYXRpdmVFbGVtZW50IHx8IG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgbGlua0luZGV4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmtzLnRvQXJyYXkoKS5maW5kSW5kZXgobGluayA9PiBsaW5rLmlzQWN0aXZlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluZGV4KGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb21wb25lbnQudGFicykuZmluZEluZGV4KHRhYiA9PiB0YWIuY29udGFpbnMoZWxlbWVudCkpO1xuICAgIH1cbn1cbiJdfQ==