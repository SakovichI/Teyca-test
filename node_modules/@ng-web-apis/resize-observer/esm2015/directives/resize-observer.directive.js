import { Attribute, Directive, ElementRef, Inject } from '@angular/core';
import { ResizeObserverService } from '../services/resize-observer.service';
import { RESIZE_OPTION_BOX, RESIZE_OPTION_BOX_DEFAULT } from '../tokens/resize-option-box';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
export function boxExtractor({ nativeElement, }) {
    const attribute = nativeElement.getAttribute('waResizeBox');
    return boxFactory(attribute);
}
export function boxFactory(box) {
    return box || RESIZE_OPTION_BOX_DEFAULT;
}
export class ResizeObserverDirective {
    constructor(waResizeObserver, _box) {
        this.waResizeObserver = waResizeObserver;
    }
}
ResizeObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ResizeObserverDirective, deps: [{ token: ResizeObserverService }, { token: 'waResizeBox', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
ResizeObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ResizeObserverDirective, selector: "[waResizeObserver]", outputs: { waResizeObserver: "waResizeObserver" }, providers: [
        ResizeObserverService,
        {
            provide: RESIZE_OPTION_BOX,
            deps: [ElementRef],
            useFactory: boxExtractor,
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ResizeObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waResizeObserver]',
                    outputs: ['waResizeObserver'],
                    providers: [
                        ResizeObserverService,
                        {
                            provide: RESIZE_OPTION_BOX,
                            deps: [ElementRef],
                            useFactory: boxExtractor,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ResizeObserverService]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waResizeBox']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYnMvcmVzaXplLW9ic2VydmVyL3NyYy9kaXJlY3RpdmVzL3Jlc2l6ZS1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUd2RSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUseUJBQXlCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBRXpGLHlGQUF5RjtBQUN6RixNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQ3pCLGFBQWEsR0FDSztJQUNsQixNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUN4QyxhQUFhLENBQ1ksQ0FBQztJQUU5QixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FDdEIsR0FBb0M7SUFFcEMsT0FBTyxHQUFHLElBQUkseUJBQXlCLENBQUM7QUFDNUMsQ0FBQztBQWNELE1BQU0sT0FBTyx1QkFBdUI7SUFDaEMsWUFFYSxnQkFBbUQsRUFDbEMsSUFBOEI7UUFEL0MscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFtQztJQUU3RCxDQUFDOztxSEFMSyx1QkFBdUIsa0JBRXBCLHFCQUFxQixhQUVsQixhQUFhO3lHQUpuQix1QkFBdUIsZ0dBVHJCO1FBQ1AscUJBQXFCO1FBQ3JCO1lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDbEIsVUFBVSxFQUFFLFlBQVk7U0FDM0I7S0FDSjs0RkFFUSx1QkFBdUI7a0JBWm5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQzdCLFNBQVMsRUFBRTt3QkFDUCxxQkFBcUI7d0JBQ3JCOzRCQUNJLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQzs0QkFDbEIsVUFBVSxFQUFFLFlBQVk7eUJBQzNCO3FCQUNKO2lCQUNKOzswQkFHUSxNQUFNOzJCQUFDLHFCQUFxQjs7MEJBRTVCLFNBQVM7MkJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXR0cmlidXRlLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1Jlc2l6ZU9ic2VydmVyU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvcmVzaXplLW9ic2VydmVyLnNlcnZpY2UnO1xuaW1wb3J0IHtSRVNJWkVfT1BUSU9OX0JPWCwgUkVTSVpFX09QVElPTl9CT1hfREVGQVVMVH0gZnJvbSAnLi4vdG9rZW5zL3Jlc2l6ZS1vcHRpb24tYm94JztcblxuLy8gVE9ETyBzd2l0Y2ggdG8gQXR0cmlidXRlIG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzY0NzkgaXMgZml4ZWRcbmV4cG9ydCBmdW5jdGlvbiBib3hFeHRyYWN0b3Ioe1xuICAgIG5hdGl2ZUVsZW1lbnQsXG59OiBFbGVtZW50UmVmPEVsZW1lbnQ+KTogUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSBuYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZShcbiAgICAgICAgJ3dhUmVzaXplQm94JyxcbiAgICApIGFzIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcblxuICAgIHJldHVybiBib3hGYWN0b3J5KGF0dHJpYnV0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3hGYWN0b3J5KFxuICAgIGJveDogUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIHwgbnVsbCxcbik6IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB7XG4gICAgcmV0dXJuIGJveCB8fCBSRVNJWkVfT1BUSU9OX0JPWF9ERUZBVUxUO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t3YVJlc2l6ZU9ic2VydmVyXScsXG4gICAgb3V0cHV0czogWyd3YVJlc2l6ZU9ic2VydmVyJ10sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFJlc2l6ZU9ic2VydmVyU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogUkVTSVpFX09QVElPTl9CT1gsXG4gICAgICAgICAgICBkZXBzOiBbRWxlbWVudFJlZl0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBib3hFeHRyYWN0b3IsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFJlc2l6ZU9ic2VydmVyU2VydmljZSlcbiAgICAgICAgcmVhZG9ubHkgd2FSZXNpemVPYnNlcnZlcjogT2JzZXJ2YWJsZTxSZXNpemVPYnNlcnZlckVudHJ5W10+LFxuICAgICAgICBAQXR0cmlidXRlKCd3YVJlc2l6ZUJveCcpIF9ib3g6IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyxcbiAgICApIHt9XG59XG4iXX0=