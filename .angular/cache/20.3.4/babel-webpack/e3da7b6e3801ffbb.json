{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Self, Input, HostBinding, Output, Directive, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport { tuiIsHTMLElement, tuiPx, TuiResizeService, TuiDestroyService, EMPTY_QUERY, tuiQueryListChanges, tuiControlValue } from '@taiga-ui/cdk';\nimport { tuiBadgeNotificationOptionsProvider } from '@taiga-ui/experimental/components/badge-notification';\nimport { takeUntil, switchMap, map } from 'rxjs/operators';\nimport * as i1 from 'rxjs';\nimport { NgControl, RadioControlValueAccessor } from '@angular/forms';\nimport { RouterLinkActive } from '@angular/router';\nconst _c0 = [\"*\"];\nlet TuiSegmentedComponent = /*#__PURE__*/(() => {\n  class TuiSegmentedComponent {\n    constructor(el, resize$, destroy$) {\n      this.el = el;\n      this.size = 's';\n      this.activeItemIndex = 0;\n      this.activeItemIndexChange = new EventEmitter();\n      resize$.pipe(takeUntil(destroy$)).subscribe(() => this.refresh());\n    }\n    get tabs() {\n      return this.el.nativeElement.children;\n    }\n    ngOnChanges() {\n      this.refresh();\n    }\n    update(activeItemIndex) {\n      if (activeItemIndex === this.activeItemIndex || activeItemIndex < 0) {\n        return;\n      }\n      this.activeItemIndex = activeItemIndex;\n      this.activeItemIndexChange.emit(activeItemIndex);\n      this.refresh();\n    }\n    get left() {\n      const element = this.activeElement;\n      return tuiIsHTMLElement(element) ? element.offsetLeft : 0;\n    }\n    get width() {\n      var _a;\n      return ((_a = this.activeElement) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0;\n    }\n    get activeElement() {\n      return this.tabs.item(this.activeItemIndex);\n    }\n    // TODO: Switch to HostBinding signals in Angular 17+\n    refresh() {\n      this.el.nativeElement.style.setProperty('--t-left', tuiPx(this.left));\n      this.el.nativeElement.style.setProperty('--t-width', tuiPx(this.width));\n    }\n  }\n  TuiSegmentedComponent.ɵfac = function TuiSegmentedComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiSegmentedComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TuiResizeService), i0.ɵɵdirectiveInject(TuiDestroyService, 2));\n  };\n  TuiSegmentedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiSegmentedComponent,\n    selectors: [[\"tui-segmented\"]],\n    hostVars: 1,\n    hostBindings: function TuiSegmentedComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      size: \"size\",\n      activeItemIndex: \"activeItemIndex\"\n    },\n    outputs: {\n      activeItemIndexChange: \"activeItemIndexChange\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService, TuiResizeService, tuiBadgeNotificationOptionsProvider({\n      size: 's'\n    })]), i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function TuiSegmentedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"tui-segmented{position:relative;display:flex;box-sizing:border-box;isolation:isolate;color:var(--tui-clear);border:.125rem solid transparent}tui-segmented[data-size=s]{--t-padding: .625rem;--t-gap: .5rem;--t-margin: -.125rem;height:var(--tui-height-s);font:var(--tui-font-text-s);border-radius:var(--tui-radius-s)}tui-segmented[data-size=s]>*:before,tui-segmented[data-size=s]>*:after,tui-segmented[data-size=s] tui-icon{font-size:1rem}tui-segmented[data-size=m]{--t-padding: .875rem;--t-gap: 1rem;--t-margin: -.375rem;height:var(--tui-height-m);font:var(--tui-font-text-m);border-radius:var(--tui-radius-s)}tui-segmented[data-size=l]{--t-padding: 1.125rem;--t-gap: 1rem;--t-margin: -.375rem;height:var(--tui-height-l);font:var(--tui-font-text-l);border-radius:var(--tui-radius-m);border-width:.25rem}tui-segmented[data-size=l]:after{box-shadow:0 0 0 .25rem}tui-segmented>a,tui-segmented>button,tui-segmented>label,tui-segmented>label>input:not([tuiRadio]){transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:flex;align-items:center;justify-content:center;white-space:nowrap;grid-gap:var(--t-gap);gap:var(--t-gap);margin:0;padding:0 var(--t-padding);color:var(--tui-text-01);overflow:hidden;cursor:pointer;font:inherit;border-radius:inherit}tui-segmented>a>*,tui-segmented>button>*,tui-segmented>label>*,tui-segmented>label>input:not([tuiRadio])>*,tui-segmented>a:before,tui-segmented>button:before,tui-segmented>label:before,tui-segmented>label>input:not([tuiRadio]):before,tui-segmented>a:after,tui-segmented>button:after,tui-segmented>label:after,tui-segmented>label>input:not([tuiRadio]):after{margin:0 var(--t-margin)}tui-segmented>a:focus-visible,tui-segmented>button:focus-visible,tui-segmented>label:focus-visible,tui-segmented>label>input:not([tuiRadio]):focus-visible{outline:.125rem solid var(--tui-focus);outline-offset:-.125rem}tui-segmented>label>input:not([tuiRadio]){position:absolute;top:0;left:0;width:100%;height:100%}tui-segmented:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\\\"\\\";z-index:-1;border-radius:inherit;background:currentColor;box-shadow:0 0 0 .125rem}tui-segmented:before{transition-property:left,width;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;content:\\\"\\\";position:absolute;left:var(--t-left);height:100%;width:var(--t-width);border-radius:inherit;background:currentColor;color:var(--tui-base-01);box-shadow:0 .25rem 1.25rem #0000001a}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TuiSegmentedComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiSegmentedDirective = /*#__PURE__*/(() => {\n  class TuiSegmentedDirective {\n    constructor(component) {\n      this.component = component;\n      this.controls = EMPTY_QUERY;\n      this.radios = EMPTY_QUERY;\n      this.links = EMPTY_QUERY;\n      this.elements = EMPTY_QUERY;\n    }\n    update(target) {\n      this.component.update(this.getIndex(target));\n    }\n    ngAfterContentInit() {\n      tuiQueryListChanges(this.controls).pipe(switchMap(() => tuiControlValue(this.controls.first)), map(value => this.radios.toArray().findIndex(c => c.value === value))).subscribe(index => {\n        this.component.update(index);\n      });\n    }\n    ngAfterContentChecked() {\n      var _a;\n      if (this.links.length) {\n        this.update(((_a = this.elements.get(this.linkIndex)) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);\n      }\n    }\n    get linkIndex() {\n      return this.links.toArray().findIndex(link => link.isActive);\n    }\n    getIndex(element) {\n      return Array.from(this.component.tabs).findIndex(tab => tab.contains(element));\n    }\n  }\n  TuiSegmentedDirective.ɵfac = function TuiSegmentedDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiSegmentedDirective)(i0.ɵɵdirectiveInject(TuiSegmentedComponent));\n  };\n  TuiSegmentedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiSegmentedDirective,\n    selectors: [[\"tui-segmented\"]],\n    contentQueries: function TuiSegmentedDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NgControl, 5);\n        i0.ɵɵcontentQuery(dirIndex, RadioControlValueAccessor, 5);\n        i0.ɵɵcontentQuery(dirIndex, RouterLinkActive, 4);\n        i0.ɵɵcontentQuery(dirIndex, RouterLinkActive, 4, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controls = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radios = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elements = _t);\n      }\n    },\n    hostBindings: function TuiSegmentedDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TuiSegmentedDirective_click_HostBindingHandler($event) {\n          return ctx.update($event.target);\n        });\n      }\n    },\n    standalone: false\n  });\n  return TuiSegmentedDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiSegmentedModule = /*#__PURE__*/(() => {\n  class TuiSegmentedModule {}\n  TuiSegmentedModule.ɵfac = function TuiSegmentedModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiSegmentedModule)();\n  };\n  TuiSegmentedModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiSegmentedModule\n  });\n  TuiSegmentedModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiSegmentedModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiSegmentedComponent, TuiSegmentedDirective, TuiSegmentedModule };\n//# sourceMappingURL=taiga-ui-experimental-components-segmented.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}