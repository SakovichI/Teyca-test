{"ast":null,"code":"import { tuiIsNumber, tuiRoundWith, CHAR_HYPHEN, CHAR_PLUS } from '@taiga-ui/cdk';\nimport { TUI_DEFAULT_NUMBER_FORMAT } from '@taiga-ui/core/constants';\n\n/**\n * Capitalizes a given string, replacing it with a lowercase string and making\n * the first letter of each word uppercase.\n *\n * @param value the input string\n * @return the capitalized string\n */\nfunction tuiCapitalize(value) {\n  return value.toLowerCase().replace(/(?:^|\\s)\\S/g, char => char.toUpperCase());\n}\nfunction tuiCapitalizeFirstLetter(value) {\n  return `${value.charAt(0).toUpperCase()}${value.slice(1)}`;\n}\n\n/**\n * Convert number to string with replacing exponent part on decimals\n *\n * @param value the number\n * @return string representation of a number\n */\nfunction tuiNumberToStringWithoutExp(value) {\n  const valueAsString = String(value);\n  const [numberPart, expPart] = valueAsString.split('e-');\n  let valueWithoutExp = valueAsString;\n  if (expPart) {\n    const [, fractionalPart] = numberPart.split('.');\n    const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);\n    valueWithoutExp = value.toFixed(decimalDigits);\n  }\n  return valueWithoutExp;\n}\n\n/**\n * Return fractional part of number\n *\n * @param value the number\n * @param precision number of digits of decimal part, null to keep untouched\n * @return the fractional part of number\n */\nfunction tuiGetFractionPartPadded(value, precision) {\n  const [, fractionPartPadded = ''] = tuiNumberToStringWithoutExp(value).split('.');\n  return tuiIsNumber(precision) ? fractionPartPadded.slice(0, Math.max(0, precision)) : fractionPartPadded;\n}\n\n/**\n * Formats number adding a thousand separators and correct decimal separator\n * padding decimal part with zeroes to given length\n *\n * @param value the input number\n * @param settings See {@link TuiNumberFormatSettings}\n * @return the formatted string\n */\nfunction tuiFormatNumber(value, settings = {}) {\n  const {\n    decimalLimit,\n    decimalSeparator,\n    thousandSeparator,\n    zeroPadding,\n    rounding\n  } = Object.assign(Object.assign({}, TUI_DEFAULT_NUMBER_FORMAT), settings);\n  const rounded = Number.isFinite(decimalLimit) ? tuiRoundWith({\n    value,\n    precision: decimalLimit,\n    method: rounding\n  }) : value;\n  const integerPartString = String(Math.floor(Math.abs(rounded)));\n  let fractionPartPadded = tuiGetFractionPartPadded(rounded, decimalLimit);\n  if (Number.isFinite(decimalLimit)) {\n    if (zeroPadding) {\n      const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);\n      const zeroPartString = '0'.repeat(zeroPaddingSize);\n      fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;\n    } else {\n      fractionPartPadded = fractionPartPadded.replace(/0*$/, '');\n    }\n  }\n  const remainder = integerPartString.length % 3;\n  const sign = value < 0 ? CHAR_HYPHEN : '';\n  let result = sign + integerPartString.charAt(0);\n  for (let i = 1; i < integerPartString.length; i++) {\n    if (i % 3 === remainder && integerPartString.length > 3) {\n      result += thousandSeparator;\n    }\n    result += integerPartString.charAt(i);\n  }\n  return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;\n}\n\n/**\n * TODO: delete in v4.0\n * @deprecated Use {@link https://maskito.dev/core-concepts/transformer maskitoTransform} instead<br/>\n * @example\n * import {maskitoTransform} from '@maskito/core';\n *\n * const mask = {\n *     mask: ['+', '1', ' ', /\\d/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n * };\n * maskitoTransform('12125552368', mask); // +1 (212) 555-2368\n * ___\n * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,\n * adding parentheses and hyphens.\n *\n * @param value the input string\n * @param countryCode a country code\n * @param phoneMask a phone number mask\n * @return the formatted phone string of the form +7 XXX XXX-XX-XX\n */\nfunction tuiFormatPhone(value, countryCode, phoneMask) {\n  if (!value) {\n    return '';\n  }\n  let result = countryCode;\n  countryCode = countryCode.replace(/[()]/g, '');\n  if (!value.startsWith(countryCode)) {\n    value = countryCode + value.replace(CHAR_PLUS, '');\n  }\n  const splitPhoneMask = phoneMask.split('');\n  const splitValue = value.slice(countryCode.length).split('');\n  result += ' ';\n  if (splitValue.length === 0) {\n    return result;\n  }\n  for (const mask of splitPhoneMask) {\n    if (splitValue.length === 0) {\n      break;\n    }\n    if (mask === '#') {\n      result += splitValue[0] || '';\n      splitValue.splice(0, 1);\n    } else {\n      result += mask;\n    }\n  }\n  return result;\n}\nfunction tuiOtherDecimalSymbol(symbol) {\n  return symbol === '.' ? ',' : '.';\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCapitalize, tuiCapitalizeFirstLetter, tuiFormatNumber, tuiFormatPhone, tuiGetFractionPartPadded, tuiNumberToStringWithoutExp, tuiOtherDecimalSymbol };\n//# sourceMappingURL=taiga-ui-core-utils-format.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}