{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, Optional, SkipSelf, Inject, Self, Injector, NgModule } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@angular/forms';\nimport { NgControl, ControlContainer } from '@angular/forms';\nimport { TuiValidationError, tuiIsString, tuiPure } from '@taiga-ui/cdk';\nimport { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';\nimport { of, isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nconst EMPTY_RECORD = {};\nfunction unwrapObservable(content, context) {\n  return content.pipe(map(error => new TuiValidationError(error || '', context)));\n}\nfunction defaultError(content, context) {\n  return of(new TuiValidationError(content || '', context));\n}\nlet TuiFieldErrorPipe = /*#__PURE__*/(() => {\n  class TuiFieldErrorPipe {\n    constructor(parent, self, container, validationErrors) {\n      this.parent = parent;\n      this.self = self;\n      this.container = container;\n      this.validationErrors = validationErrors;\n      this.order = [];\n      if (this.self && !this.self.valueAccessor) {\n        this.self.valueAccessor = this;\n      }\n    }\n    transform(order) {\n      this.order = order;\n      return this.computedError;\n    }\n    get computedError() {\n      return this.invalid && this.touched && this.error || of(null);\n    }\n    registerOnChange() {}\n    registerOnTouched() {}\n    setDisabledState() {}\n    writeValue() {}\n    get error() {\n      const {\n        errorId\n      } = this;\n      if (!errorId) {\n        return null;\n      }\n      const firstError = this.controlErrors[errorId];\n      const errorContent = this.validationErrors[errorId];\n      return this.getError(firstError, errorContent);\n    }\n    get invalid() {\n      var _a;\n      return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid);\n    }\n    get touched() {\n      var _a;\n      return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.touched);\n    }\n    get control() {\n      var _a, _b, _c;\n      return ((_a = this.self) === null || _a === void 0 ? void 0 : _a.control) || ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.control) || ((_c = this.container) === null || _c === void 0 ? void 0 : _c.control);\n    }\n    get errorId() {\n      return this.getErrorId(this.order, this.controlErrors);\n    }\n    get controlErrors() {\n      var _a;\n      return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) || EMPTY_RECORD;\n    }\n    getErrorId(order, controlErrors) {\n      const id = order === null || order === void 0 ? void 0 : order.find(errorId => controlErrors[errorId]);\n      const fallback = Object.keys(controlErrors)[0];\n      return id || fallback || '';\n    }\n    getError(context, content) {\n      if (context instanceof TuiValidationError) {\n        return of(context);\n      }\n      if (content === undefined && tuiIsString(context)) {\n        return of(new TuiValidationError(context));\n      }\n      if (isObservable(content)) {\n        return unwrapObservable(content, context);\n      }\n      if (content instanceof Function) {\n        const message = content(context);\n        return isObservable(message) ? unwrapObservable(message, context) : defaultError(message, context);\n      }\n      return defaultError(content, context);\n    }\n  }\n  TuiFieldErrorPipe.ɵfac = function TuiFieldErrorPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiFieldErrorPipe)(i0.ɵɵdirectiveInject(NgControl, 28), i0.ɵɵdirectiveInject(NgControl, 26), i0.ɵɵdirectiveInject(ControlContainer, 24), i0.ɵɵdirectiveInject(TUI_VALIDATION_ERRORS, 16));\n  };\n  TuiFieldErrorPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"tuiFieldError\",\n    type: TuiFieldErrorPipe,\n    pure: false,\n    standalone: false\n  });\n  __decorate([tuiPure], TuiFieldErrorPipe.prototype, \"getErrorId\", null);\n  __decorate([tuiPure], TuiFieldErrorPipe.prototype, \"getError\", null);\n  return TuiFieldErrorPipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiFieldErrorContentPipe = /*#__PURE__*/(() => {\n  class TuiFieldErrorContentPipe {\n    constructor(injector) {\n      this.injector = injector;\n      this.localInjector = Injector.create({\n        providers: [{\n          provide: AsyncPipe\n        }, {\n          provide: TuiFieldErrorPipe\n        }],\n        parent: this.injector\n      });\n      this.asyncPipe = this.localInjector.get(AsyncPipe);\n      this.fieldErrorPipe = this.localInjector.get(TuiFieldErrorPipe);\n    }\n    transform(order) {\n      return this.getErrorContent(order);\n    }\n    ngOnDestroy() {\n      this.asyncPipe.ngOnDestroy();\n    }\n    getErrorContent(order) {\n      const error = this.asyncPipe.transform(this.fieldErrorPipe.transform(order));\n      if (!error) {\n        return '';\n      }\n      return typeof error.message === 'function' ? error.message(error.context) : error.message;\n    }\n  }\n  TuiFieldErrorContentPipe.ɵfac = function TuiFieldErrorContentPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiFieldErrorContentPipe)(i0.ɵɵdirectiveInject(Injector, 16));\n  };\n  TuiFieldErrorContentPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"tuiFieldErrorContent\",\n    type: TuiFieldErrorContentPipe,\n    pure: false,\n    standalone: false\n  });\n  return TuiFieldErrorContentPipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiFieldErrorPipeModule = /*#__PURE__*/(() => {\n  class TuiFieldErrorPipeModule {}\n  TuiFieldErrorPipeModule.ɵfac = function TuiFieldErrorPipeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiFieldErrorPipeModule)();\n  };\n  TuiFieldErrorPipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiFieldErrorPipeModule\n  });\n  TuiFieldErrorPipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiFieldErrorPipeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiFieldErrorContentPipe, TuiFieldErrorPipe, TuiFieldErrorPipeModule };\n//# sourceMappingURL=taiga-ui-kit-pipes-field-error.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}