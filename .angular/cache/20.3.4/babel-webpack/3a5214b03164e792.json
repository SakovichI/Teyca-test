{"ast":null,"code":"import { computed, inject, signal } from '@angular/core';\nimport { finalize } from 'rxjs';\nimport { SelectionService } from '../selection';\nimport { TableBarService } from '../table-bar';\nimport { toId } from '../../helpers';\nimport * as i0 from \"@angular/core\";\nexport let TableSelectionService = /*#__PURE__*/(() => {\n  class TableSelectionService extends SelectionService {\n    #tableBarService = inject(TableBarService);\n    #tableBarSubscription;\n    #tableBarTemplate;\n    #currentItemsIdsSignal = signal([], ...(ngDevMode ? [{\n      debugName: \"#currentItemsIdsSignal\"\n    }] : []));\n    $areAllSelected = this.#initAreAllSelected();\n    $isIndeterminate = this.#initIsIndeterminate();\n    $selectedItems = computed(() => this.getSelectedItems(this.$selectedItemsMap()), ...(ngDevMode ? [{\n      debugName: \"$selectedItems\"\n    }] : []));\n    getSelectedItems(itemsMap = this.$selectedItemsMap()) {\n      const isSelectedItem = item => !!item;\n      return [...itemsMap.values()].filter(isSelectedItem);\n    }\n    setCurrentItemsIds(items) {\n      const ids = items.map(toId);\n      this.#currentItemsIdsSignal.set(ids);\n    }\n    setTableBarTemplate(template) {\n      this.#tableBarTemplate = template;\n    }\n    toggleAll(items) {\n      const areAllSelected = this.$areAllSelected();\n      const hasAlreadySelectedItems = this.$selectedItems().length > items.length;\n      if (areAllSelected && hasAlreadySelectedItems) {\n        this.deselect(items);\n        return;\n      }\n      if (areAllSelected) {\n        this.clear();\n        this.#toggleTableBar();\n        return;\n      }\n      this.select(items);\n      this.#toggleTableBar();\n    }\n    toggle(item) {\n      if (this.isSelected(item.userId)) {\n        this.deselect(item);\n        this.#toggleTableBar();\n        return;\n      }\n      this.select(item);\n      this.#toggleTableBar();\n    }\n    clearSelectedItems() {\n      this.clear();\n      this.#closeTableBar();\n    }\n    mapValueSetter = (isSelected, item) => isSelected ? item : null;\n    #initAreAllSelected() {\n      return computed(() => {\n        const itemsMap = this.$selectedItemsMap();\n        const currentItemsIds = this.#currentItemsIdsSignal();\n        if (this.isSelectedMapEmpty) return false;\n        const areAllSelected = currentItemsIds.every(this.#hasCurrentId(itemsMap));\n        if (areAllSelected) return areAllSelected;\n        if (this.#areSomeSelected(currentItemsIds, itemsMap)) return null;\n        return false;\n      });\n    }\n    #initIsIndeterminate() {\n      return computed(() => {\n        const itemsMap = this.$selectedItemsMap();\n        const currentItemsIds = this.#currentItemsIdsSignal();\n        if (this.isSelectedMapEmpty || this.$areAllSelected()) return false;\n        return this.#areSomeSelected(currentItemsIds, itemsMap);\n      });\n    }\n    #hasCurrentId(itemsMap) {\n      return id => !!itemsMap.get(id);\n    }\n    #areSomeSelected(currentItemsIds = this.#currentItemsIdsSignal(), itemsMap = this.$selectedItemsMap()) {\n      return currentItemsIds.some(this.#hasCurrentId(itemsMap));\n    }\n    #toggleTableBar() {\n      if (!this.$selectedItems().length) {\n        this.#closeTableBar();\n        return;\n      }\n      if (!this.#tableBarTemplate || this.#tableBarSubscription) return;\n      this.#tableBarSubscription = this.#tableBarService.show(this.#tableBarTemplate).pipe(finalize(this.clearSelectedItems.bind(this))).subscribe();\n    }\n    #closeTableBar() {\n      this.#tableBarSubscription?.unsubscribe();\n      this.#tableBarSubscription = null;\n    }\n    static ɵfac = /*@__PURE__*/(() => {\n      let ɵTableSelectionService_BaseFactory;\n      return function TableSelectionService_Factory(__ngFactoryType__) {\n        return (ɵTableSelectionService_BaseFactory || (ɵTableSelectionService_BaseFactory = i0.ɵɵgetInheritedFactory(TableSelectionService)))(__ngFactoryType__ || TableSelectionService);\n      };\n    })();\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TableSelectionService,\n      factory: TableSelectionService.ɵfac\n    });\n  }\n  return TableSelectionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}