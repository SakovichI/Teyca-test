{"ast":null,"code":"import { computed, signal } from '@angular/core';\nimport { isArray } from 'lodash-es';\nimport * as i0 from \"@angular/core\";\nexport let SelectionService = /*#__PURE__*/(() => {\n  class SelectionService {\n    #selectedItemsMapSignal = signal(new Map(), ...(ngDevMode ? [{\n      debugName: \"#selectedItemsMapSignal\"\n    }] : []));\n    mapValueSetter;\n    $selectedItemsMap = this.#selectedItemsMapSignal.asReadonly();\n    $count = computed(() => [...this.$selectedItemsMap().values()].filter(Boolean).length, ...(ngDevMode ? [{\n      debugName: \"$count\"\n    }] : []));\n    get #itemsMap() {\n      return this.#selectedItemsMapSignal();\n    }\n    get isSelectedMapEmpty() {\n      return !this.#itemsMap.size;\n    }\n    select(items) {\n      this.#updateSelectedMap(items);\n    }\n    deselect(items) {\n      this.#updateSelectedMap(items, false);\n    }\n    clear() {\n      this.#selectedItemsMapSignal.set(new Map());\n    }\n    isSelected(id) {\n      return !!this.#itemsMap.get(id);\n    }\n    #updateSelectedMap(items, isSelected = true) {\n      const currentItems = isArray(items) ? items : [items];\n      const toCurrentMap = (currentMap, currentItem) => {\n        const value = this.mapValueSetter ? this.mapValueSetter(isSelected, currentItem) : isSelected;\n        currentMap.set(currentItem.userId, value);\n        return currentMap;\n      };\n      const updatedMap = currentItems.reduce(toCurrentMap, this.#itemsMap);\n      this.#setSelectedMap(updatedMap);\n    }\n    #setSelectedMap(updatedMap) {\n      this.#selectedItemsMapSignal.set(new Map(updatedMap));\n    }\n    static ɵfac = function SelectionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SelectionService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SelectionService,\n      factory: SelectionService.ɵfac\n    });\n  }\n  return SelectionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}