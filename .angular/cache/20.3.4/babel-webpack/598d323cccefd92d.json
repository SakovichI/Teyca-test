{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Inject, ChangeDetectorRef, Optional, Self, ViewChild, Input, HostBinding, HostListener, Directive, NgModule } from '@angular/core';\nimport * as i7 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { maskitoTimeOptionsGenerator } from '@maskito/kit';\nimport * as i2 from '@taiga-ui/cdk';\nimport { tuiCreateToken, tuiProvideOptions, TuiIdService, AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TuiTime, tuiIsNativeFocused, tuiIsElement, tuiIsInput, TUI_IS_MOBILE, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_TEXTFIELD_HOST, TUI_TEXTFIELD_SIZE, tuiAsDataListHost, tuiAsOptionContent, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiDataListModule, TuiWrapperModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiSvgModule } from '@taiga-ui/core';\nimport { TUI_SELECT_OPTION, TuiSelectOptionModule } from '@taiga-ui/kit/components/select-option';\nimport { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { TUI_TIME_TEXTS, TUI_TIME_VALUE_TRANSFORMER } from '@taiga-ui/kit/tokens';\nimport * as i8 from 'rxjs';\nimport { timer } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@taiga-ui/kit/directives';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i4 from '@maskito/angular';\nimport { MaskitoModule } from '@maskito/angular';\nimport * as i6 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nconst _c0 = [\"tuiTime\", \"\"];\nfunction TuiNativeTimeComponent_datalist_0_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 3);\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵinterpolate(item_r1));\n  }\n}\nfunction TuiNativeTimeComponent_datalist_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"datalist\", 1);\n    i0.ɵɵtemplate(1, TuiNativeTimeComponent_datalist_0_option_1_Template, 1, 2, \"option\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r1.autoIdString);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.items);\n  }\n}\nconst _c1 = [\"*\"];\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nfunction TuiInputTimeComponent_ng_template_5_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.disabledItemHandler(item_r2))(\"value\", item_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r2, \" \");\n  }\n}\nfunction TuiInputTimeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tui-data-list\", 5);\n    i0.ɵɵtemplate(1, TuiInputTimeComponent_ng_template_5_button_1_Template, 2, 3, \"button\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"size\", ctx_r2.itemSize);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.filtered);\n  }\n}\nfunction TuiInputTimeComponent_ng_template_7_tui_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tui-svg\", 10);\n  }\n  if (rf & 2) {\n    const src_r4 = ctx.polymorpheusOutlet;\n    i0.ɵɵproperty(\"src\", src_r4);\n  }\n}\nfunction TuiInputTimeComponent_ng_template_7_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 11);\n  }\n}\nfunction TuiInputTimeComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TuiInputTimeComponent_ng_template_7_tui_svg_0_Template, 1, 1, \"tui-svg\", 8)(1, TuiInputTimeComponent_ng_template_7_input_1_Template, 1, 0, \"input\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.icon)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(3, _c2, ctx_r2.size));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showNativePicker);\n  }\n}\nconst TUI_INPUT_TIME_DEFAULT_OPTIONS = {\n  icon: ({\n    $implicit\n  }) => $implicit === 's' ? 'tuiIconClock' : 'tuiIconClockLarge',\n  mode: 'HH:MM',\n  postfix: '',\n  maxValues: MAX_TIME_VALUES,\n  itemSize: 'm',\n  nativePicker: false\n};\n/**\n * Default parameters for InputTime component\n */\nconst TUI_INPUT_TIME_OPTIONS = tuiCreateToken(TUI_INPUT_TIME_DEFAULT_OPTIONS);\nfunction tuiInputTimeOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_TIME_OPTIONS, options, TUI_INPUT_TIME_DEFAULT_OPTIONS);\n}\nlet TuiNativeTimeComponent = /*#__PURE__*/(() => {\n  class TuiNativeTimeComponent {\n    constructor(host, idService) {\n      this.host = host;\n      this.autoIdString = idService.generate();\n    }\n    get items() {\n      return this.host.items.map(item => item.toString(this.host.mode));\n    }\n    get value() {\n      return this.host.value.length === this.host.mode.length ? this.host.value : '';\n    }\n    get step() {\n      switch (this.host.mode) {\n        case 'HH:MM:SS':\n          return 1;\n        case 'HH:MM:SS.MSS':\n          return 0.001;\n        default:\n          return 60;\n      }\n    }\n    onChange(value) {\n      this.host.onValueChange(value);\n    }\n  }\n  TuiNativeTimeComponent.ɵfac = function TuiNativeTimeComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiNativeTimeComponent)(i0.ɵɵdirectiveInject(TUI_TEXTFIELD_HOST), i0.ɵɵdirectiveInject(TuiIdService));\n  };\n  TuiNativeTimeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiNativeTimeComponent,\n    selectors: [[\"input\", \"tuiTime\", \"\"]],\n    hostAttrs: [\"type\", \"time\"],\n    hostVars: 4,\n    hostBindings: function TuiNativeTimeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change.stop\", function TuiNativeTimeComponent_change_stop_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"click.stop.silent\", function TuiNativeTimeComponent_click_stop_silent_HostBindingHandler() {\n          return 0;\n        })(\"mousedown.stop.silent\", function TuiNativeTimeComponent_mousedown_stop_silent_HostBindingHandler() {\n          return 0;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"tabIndex\", -1)(\"value\", ctx.value)(\"step\", ctx.step);\n        i0.ɵɵattribute(\"list\", ctx.autoIdString);\n      }\n    },\n    standalone: false,\n    attrs: _c0,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\", 4, \"ngIf\"], [3, \"id\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function TuiNativeTimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TuiNativeTimeComponent_datalist_0_Template, 2, 2, \"datalist\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.items.length);\n      }\n    },\n    dependencies: [i5.NgIf, i5.NgForOf],\n    styles: [\"[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\"],\n    changeDetection: 0\n  });\n  return TuiNativeTimeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputTimeComponent = /*#__PURE__*/(() => {\n  class TuiInputTimeComponent extends AbstractTuiNullableControl {\n    constructor(control, cdr, timeTexts$, options, isMobile, isIos, textfieldSize, valueTransformer) {\n      super(control, cdr, valueTransformer);\n      this.timeTexts$ = timeTexts$;\n      this.options = options;\n      this.isMobile = isMobile;\n      this.isIos = isIos;\n      this.textfieldSize = textfieldSize;\n      this.valueTransformer = valueTransformer;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.items = [];\n      this.itemsHidden = false;\n      this.itemSize = this.options.itemSize;\n      this.strict = false;\n      this.mode = this.options.mode;\n      /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */\n      this.postfix = this.options.postfix;\n      this.open = false;\n      this.identityMatcher = (controlValue, dropdownValue) => controlValue instanceof TuiTime && controlValue.valueOf() === dropdownValue.valueOf();\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get nativeFocusableElement() {\n      var _a, _b;\n      return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;\n    }\n    get focused() {\n      return tuiIsNativeFocused(this.nativeFocusableElement);\n    }\n    get canOpen() {\n      return this.interactive && !!this.filtered.length && !this.itemsHidden;\n    }\n    get filtered() {\n      return this.filter(this.items, this.mode, this.computedSearch);\n    }\n    get showNativePicker() {\n      return this.nativePicker && (!this.isIos || this.mode === 'HH:MM' && !this.items.length);\n    }\n    get nativeDatalist() {\n      return this.nativePicker && !this.isIos;\n    }\n    get maskOptions() {\n      return this.calculateMask(this.mode);\n    }\n    get computedValue() {\n      return this.value ? this.value.toString(this.mode) : this.nativeValue;\n    }\n    get computedSearch() {\n      return this.computedValue.length !== this.mode.length ? this.computedValue : '';\n    }\n    get innerPseudoFocused() {\n      if (this.pseudoFocus === false) {\n        return false;\n      }\n      if (this.open && this.canOpen || this.computedFocused) {\n        return true;\n      }\n      return null;\n    }\n    get icon() {\n      return this.options.icon;\n    }\n    get nativeValue() {\n      var _a;\n      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';\n    }\n    set nativeValue(value) {\n      if (!this.nativeFocusableElement) {\n        return;\n      }\n      this.nativeFocusableElement.value = value;\n    }\n    getFiller$(mode) {\n      return this.timeTexts$.pipe(map(texts => texts[mode]));\n    }\n    onClick() {\n      this.open = !this.open;\n    }\n    onValueChange(value) {\n      var _a;\n      this.open = !!this.items.length;\n      (_a = this.control) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity({\n        emitEvent: false\n      });\n      if (value.length !== this.mode.length) {\n        this.value = null;\n        return;\n      }\n      const time = TuiTime.fromString(value);\n      this.value = this.strict ? this.findNearestTimeFromItems(time) : time;\n    }\n    onFocused(focused) {\n      this.updateFocused(focused);\n      if (focused || this.value !== null || this.nativeValue === '' || this.mode === 'HH:MM') {\n        return;\n      }\n      this.value = TuiTime.fromString(this.nativeValue);\n      timer(0).pipe(takeUntil(this.destroy$)).subscribe(() => {\n        if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {\n          this.nativeValue = this.nativeValue.slice(0, -1);\n        }\n      });\n    }\n    onArrowUp(event) {\n      if (this.items.length) {\n        return;\n      }\n      this.processArrow(event, 1);\n    }\n    onArrowDown(event) {\n      if (this.items.length) {\n        return;\n      }\n      this.processArrow(event, -1);\n    }\n    checkOption(option) {\n      var _a;\n      if (option.valueOf() === ((_a = this.value) === null || _a === void 0 ? void 0 : _a.valueOf())) {\n        this.value = option;\n      }\n    }\n    handleOption(item) {\n      this.focusInput();\n      this.value = item;\n    }\n    onOpen(open) {\n      this.open = open;\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = value ? this.computedValue : '';\n    }\n    get nativePicker() {\n      return !!this.options.nativePicker && this.isMobile;\n    }\n    calculateMask(mode) {\n      const {\n        HH,\n        MM,\n        SS,\n        MS\n      } = this.options.maxValues;\n      return maskitoTimeOptionsGenerator({\n        mode,\n        timeSegmentMaxValues: {\n          hours: HH,\n          minutes: MM,\n          seconds: SS,\n          milliseconds: MS\n        }\n      });\n    }\n    filter(items, mode, search) {\n      return items.filter(item => item.toString(mode).includes(search));\n    }\n    findNearestTimeFromItems(value) {\n      // eslint-disable-next-line no-restricted-syntax\n      return this.items.reduce((previous, current) => Math.abs(current.valueOf() - value.valueOf()) < Math.abs(previous.valueOf() - value.valueOf()) ? current : previous);\n    }\n    close() {\n      this.open = false;\n    }\n    processArrow(event, shift) {\n      const {\n        target\n      } = event;\n      if (this.readOnly || !tuiIsElement(target) || !tuiIsInput(target)) {\n        return;\n      }\n      const selectionStart = target.selectionStart || 0;\n      this.shiftTime(this.calculateShift(selectionStart, shift));\n      target.setSelectionRange(selectionStart, selectionStart);\n      event.preventDefault();\n    }\n    calculateShift(selectionStart, shift) {\n      if (selectionStart <= 2) {\n        return {\n          hours: shift\n        };\n      }\n      if (selectionStart <= 5) {\n        return {\n          minutes: shift\n        };\n      }\n      if (selectionStart <= 8) {\n        return {\n          seconds: shift\n        };\n      }\n      return {\n        ms: shift\n      };\n    }\n    shiftTime(shift) {\n      if (this.value === null) {\n        return;\n      }\n      const increasedTime = this.value.shift(shift);\n      // Manual update so we can set caret position properly\n      this.nativeValue = increasedTime.toString(this.mode);\n      this.value = increasedTime;\n    }\n    focusInput(preventScroll = false) {\n      if (this.nativeFocusableElement) {\n        this.nativeFocusableElement.focus({\n          preventScroll\n        });\n        this.close();\n      }\n    }\n  }\n  TuiInputTimeComponent.ɵfac = function TuiInputTimeComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputTimeComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_TIME_TEXTS), i0.ɵɵdirectiveInject(TUI_INPUT_TIME_OPTIONS), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(TUI_IS_IOS), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), i0.ɵɵdirectiveInject(TUI_TIME_VALUE_TRANSFORMER, 8));\n  };\n  TuiInputTimeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputTimeComponent,\n    selectors: [[\"tui-input-time\"]],\n    viewQuery: function TuiInputTimeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputTimeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TuiInputTimeComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      disabledItemHandler: \"disabledItemHandler\",\n      items: \"items\",\n      itemsHidden: \"itemsHidden\",\n      itemSize: \"itemSize\",\n      strict: \"strict\",\n      mode: \"mode\",\n      postfix: \"postfix\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputTimeComponent), tuiAsControl(TuiInputTimeComponent), tuiAsDataListHost(TuiInputTimeComponent), tuiAsOptionContent(TUI_SELECT_OPTION)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 18,\n    consts: [[\"dropdownContent\", \"\"], [\"iconContent\", \"\"], [1, \"t-wrapper\", 3, \"focusedChange\", \"openChange\", \"canOpen\", \"content\", \"open\"], [\"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"keydown.arrowDown\", \"keydown.arrowUp\", \"valueChange\", \"disabled\", \"focusable\", \"invalid\", \"maskito\", \"nativeId\", \"postfix\", \"pseudoActive\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldFiller\", \"tuiTextfieldIcon\", \"value\"], [\"inputmode\", \"numeric\", \"tuiTextfield\", \"\"], [\"automation-id\", \"tui-input-time__dropdown\", 3, \"size\"], [\"automation-id\", \"tui-input-time__item\", \"tuiOption\", \"\", 3, \"disabled\", \"value\", 4, \"ngFor\", \"ngForOf\"], [\"automation-id\", \"tui-input-time__item\", \"tuiOption\", \"\", 3, \"disabled\", \"value\"], [\"appearance\", \"icon\", \"tuiWrapper\", \"\", 3, \"src\", 4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"tuiTime\", \"\", 4, \"ngIf\"], [\"appearance\", \"icon\", \"tuiWrapper\", \"\", 3, \"src\"], [\"tuiTime\", \"\"]],\n    template: function TuiInputTimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 2);\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputTimeComponent_Template_tui_hosted_dropdown_focusedChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFocused($event));\n        })(\"openChange\", function TuiInputTimeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onOpen($event));\n        });\n        i0.ɵɵelementStart(1, \"tui-primitive-textfield\", 3);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵlistener(\"keydown.arrowDown\", function TuiInputTimeComponent_Template_tui_primitive_textfield_keydown_arrowDown_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onArrowDown($event));\n        })(\"keydown.arrowUp\", function TuiInputTimeComponent_Template_tui_primitive_textfield_keydown_arrowUp_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onArrowUp($event));\n        })(\"valueChange\", function TuiInputTimeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onValueChange($event));\n        });\n        i0.ɵɵprojection(3);\n        i0.ɵɵelement(4, \"input\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(5, TuiInputTimeComponent_ng_template_5_Template, 2, 2, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(7, TuiInputTimeComponent_ng_template_7_Template, 2, 5, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const dropdownContent_r5 = i0.ɵɵreference(6);\n        const iconContent_r6 = i0.ɵɵreference(8);\n        i0.ɵɵproperty(\"canOpen\", ctx.canOpen && !ctx.nativeDatalist)(\"content\", dropdownContent_r5)(\"open\", ctx.canOpen && ctx.open);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"focusable\", ctx.focusable)(\"invalid\", ctx.computedInvalid)(\"maskito\", ctx.maskOptions)(\"nativeId\", ctx.nativeId)(\"postfix\", ctx.postfix)(\"pseudoActive\", ctx.pseudoActive)(\"pseudoFocus\", ctx.innerPseudoFocused)(\"pseudoHover\", ctx.pseudoHover)(\"readOnly\", ctx.readOnly)(\"tuiTextfieldFiller\", i0.ɵɵpipeBind1(2, 16, ctx.getFiller$(ctx.mode)) || \"\")(\"tuiTextfieldIcon\", ctx.icon && iconContent_r6)(\"value\", ctx.computedValue);\n      }\n    },\n    dependencies: [i1.TuiHostedDropdownComponent, i1.TuiPrimitiveTextfieldComponent, i1.TuiTextfieldComponent, i1.TuiDataListComponent, i1.TuiOptionComponent, i1.TuiSvgComponent, TuiNativeTimeComponent, i1.TuiPrimitiveTextfieldDirective, i3.TuiValueAccessorDirective, i4.MaskitoDirective, i1.TuiTextfieldFillerDirective, i1.TuiTextfieldIconDirective, i5.NgForOf, i6.PolymorpheusOutletDirective, i1.TuiWrapperDirective, i5.NgIf, i5.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputTimeComponent.prototype, \"getFiller$\", null);\n  __decorate([tuiPure], TuiInputTimeComponent.prototype, \"calculateMask\", null);\n  __decorate([tuiPure], TuiInputTimeComponent.prototype, \"filter\", null);\n  return TuiInputTimeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputTimeDirective = /*#__PURE__*/(() => {\n  class TuiInputTimeDirective extends AbstractTuiTextfieldHost {\n    get value() {\n      return this.host.computedValue;\n    }\n    get mode() {\n      return this.host.mode;\n    }\n    get items() {\n      return this.host.items;\n    }\n    onValueChange(value) {\n      if (!value) {\n        this.host.nativeValue = '';\n      }\n      this.host.onValueChange(value);\n    }\n    process(input) {\n      input.inputMode = 'numeric';\n    }\n  }\n  TuiInputTimeDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputTimeDirective_BaseFactory;\n    return function TuiInputTimeDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputTimeDirective_BaseFactory || (ɵTuiInputTimeDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputTimeDirective)))(__ngFactoryType__ || TuiInputTimeDirective);\n    };\n  })();\n  TuiInputTimeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputTimeDirective,\n    selectors: [[\"tui-input-time\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputTimeDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputTimeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputTimeModule = /*#__PURE__*/(() => {\n  class TuiInputTimeModule {}\n  TuiInputTimeModule.ɵfac = function TuiInputTimeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputTimeModule)();\n  };\n  TuiInputTimeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputTimeModule\n  });\n  TuiInputTimeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MaskitoModule, TuiSelectOptionModule, TuiDataListModule, TuiWrapperModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule, TuiSvgModule, PolymorpheusModule]]\n  });\n  return TuiInputTimeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_TIME_DEFAULT_OPTIONS, TUI_INPUT_TIME_OPTIONS, TuiInputTimeComponent, TuiInputTimeDirective, TuiInputTimeModule, tuiInputTimeOptionsProvider };\n//# sourceMappingURL=taiga-ui-kit-components-input-time.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}