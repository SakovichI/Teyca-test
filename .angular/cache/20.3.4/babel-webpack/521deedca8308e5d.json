{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, HostBinding, Directive, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { tuiCreateToken, tuiProvideOptions, AbstractTuiControl, tuiAsFocusableItemAccessor, tuiAsControl, tuiIsInput } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_TEXTFIELD_SIZE, TuiHintOptionsDirective, TUI_MODE, MODE_PROVIDER, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { TUI_PASSWORD_TEXTS } from '@taiga-ui/kit/tokens';\nimport * as i5 from 'rxjs';\nimport { EMPTY, combineLatest } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i2 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n// TODO: swap icon names in v4.0\n/** Default values for the input password options. */\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nfunction TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-svg\", 7);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵlistener(\"click\", function TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template_tui_svg_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r2.togglePasswordVisibility());\n    })(\"mousedown.silent.prevent\", function TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template_tui_svg_mousedown_silent_prevent_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      return i0.ɵɵresetView(0);\n    })(\"mouseup.silent.prevent\", function TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template_tui_svg_mouseup_silent_prevent_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      return i0.ɵɵresetView(0);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const src_r4 = ctx.polymorpheusOutlet;\n    const texts_r5 = i0.ɵɵnextContext().ngIf;\n    const hintContent_r6 = i0.ɵɵreference(3);\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", src_r4)(\"tuiHint\", texts_r5[0] && texts_r5[1] && hintContent_r6)(\"tuiHintAppearance\", i0.ɵɵpipeBind1(1, 4, ctx_r2.computedAppearance$) || \"\")(\"tuiHintDirection\", (ctx_r2.hintOptions == null ? null : ctx_r2.hintOptions.direction) || \"bottom-left\");\n  }\n}\nfunction TuiInputPasswordComponent_ng_template_3_ng_container_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const texts_r5 = i0.ɵɵnextContext().ngIf;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.isPasswordHidden ? texts_r5[0] : texts_r5[1], \" \");\n  }\n}\nfunction TuiInputPasswordComponent_ng_template_3_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template, 2, 6, \"tui-svg\", 5)(2, TuiInputPasswordComponent_ng_template_3_ng_container_0_ng_template_2_Template, 1, 1, \"ng-template\", 6, 1, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.icon)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r2.size));\n  }\n}\nfunction TuiInputPasswordComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TuiInputPasswordComponent_ng_template_3_ng_container_0_Template, 4, 4, \"ng-container\", 4);\n    i0.ɵɵpipe(1, \"async\");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx_r2.passwordTexts$));\n  }\n}\nconst TUI_INPUT_PASSWORD_DEFAULT_OPTIONS = {\n  icons: {\n    hide: ({\n      $implicit\n    }) => $implicit === 's' ? 'tuiIconEyeOff' : 'tuiIconEyeOffLarge',\n    show: ({\n      $implicit\n    }) => $implicit === 's' ? 'tuiIconEye' : 'tuiIconEyeLarge'\n  }\n};\n/**\n * Default parameters for input password component\n */\nconst TUI_INPUT_PASSWORD_OPTIONS = tuiCreateToken(TUI_INPUT_PASSWORD_DEFAULT_OPTIONS);\nfunction tuiInputPasswordOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_PASSWORD_OPTIONS, options, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS);\n}\nlet TuiInputPasswordComponent = /*#__PURE__*/(() => {\n  class TuiInputPasswordComponent extends AbstractTuiControl {\n    constructor(control, cdr, textfieldSize, passwordTexts$, options, hintOptions, mode$) {\n      var _a;\n      super(control, cdr);\n      this.textfieldSize = textfieldSize;\n      this.passwordTexts$ = passwordTexts$;\n      this.options = options;\n      this.hintOptions = hintOptions;\n      this.mode$ = mode$;\n      this.directive$ = ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.change$) || EMPTY;\n      this.isPasswordHidden = true;\n      this.computedAppearance$ = combineLatest([this.mode$.pipe(map(val => val === 'onDark' ? 'onDark' : '')), this.directive$.pipe(startWith(null), map(() => {\n        var _a;\n        return ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.appearance) || '';\n      }))]).pipe(map(([mode, controller]) => controller || mode), startWith(''));\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get nativeFocusableElement() {\n      return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;\n    }\n    get focused() {\n      var _a;\n      return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);\n    }\n    get icon() {\n      return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;\n    }\n    get inputType() {\n      return this.isPasswordHidden || this.computedDisabled ? 'password' : 'text';\n    }\n    onValueChange(textValue) {\n      this.value = textValue;\n    }\n    onFocused(focused) {\n      this.updateFocused(focused);\n    }\n    togglePasswordVisibility() {\n      this.isPasswordHidden = !this.isPasswordHidden;\n    }\n    getFallbackValue() {\n      return '';\n    }\n  }\n  TuiInputPasswordComponent.ɵfac = function TuiInputPasswordComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputPasswordComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), i0.ɵɵdirectiveInject(TUI_PASSWORD_TEXTS), i0.ɵɵdirectiveInject(TUI_INPUT_PASSWORD_OPTIONS), i0.ɵɵdirectiveInject(TuiHintOptionsDirective, 8), i0.ɵɵdirectiveInject(TUI_MODE));\n  };\n  TuiInputPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputPasswordComponent,\n    selectors: [[\"tui-input-password\"]],\n    viewQuery: function TuiInputPasswordComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputPasswordComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputPasswordComponent), tuiAsControl(TuiInputPasswordComponent), MODE_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 11,\n    consts: [[\"iconContent\", \"polymorpheus\"], [\"hintContent\", \"polymorpheus\"], [1, \"t-textfield\", 3, \"valueChange\", \"focusedChange\", \"disabled\", \"focusable\", \"invalid\", \"nativeId\", \"pseudoActive\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldIcon\", \"value\"], [3, \"polymorpheus\"], [4, \"ngIf\"], [\"appearance\", \"icon\", \"automation-id\", \"tui-password__icon\", \"tuiWrapper\", \"\", \"class\", \"t-icon\", 3, \"src\", \"tuiHint\", \"tuiHintAppearance\", \"tuiHintDirection\", \"click\", \"mousedown.silent.prevent\", \"mouseup.silent.prevent\", 4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"polymorpheus\", \"\"], [\"appearance\", \"icon\", \"automation-id\", \"tui-password__icon\", \"tuiWrapper\", \"\", 1, \"t-icon\", 3, \"click\", \"mousedown.silent.prevent\", \"mouseup.silent.prevent\", \"src\", \"tuiHint\", \"tuiHintAppearance\", \"tuiHintDirection\"]],\n    template: function TuiInputPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-primitive-textfield\", 2);\n        i0.ɵɵtwoWayListener(\"valueChange\", function TuiInputPasswordComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputPasswordComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFocused($event));\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TuiInputPasswordComponent_ng_template_3_Template, 2, 3, \"ng-template\", 3, 0, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const iconContent_r7 = i0.ɵɵreference(4);\n        i0.ɵɵproperty(\"disabled\", ctx.computedDisabled)(\"focusable\", ctx.focusable)(\"invalid\", ctx.computedInvalid)(\"nativeId\", ctx.nativeId)(\"pseudoActive\", ctx.pseudoActive)(\"pseudoFocus\", ctx.pseudoFocus)(\"pseudoHover\", ctx.pseudoHover)(\"readOnly\", ctx.readOnly)(\"tuiTextfieldIcon\", !ctx.computedDisabled ? iconContent_r7 : \"\");\n        i0.ɵɵtwoWayProperty(\"value\", ctx.value);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"polymorpheus\", ctx.type);\n      }\n    },\n    dependencies: [i1.TuiPrimitiveTextfieldComponent, i1.TuiSvgComponent, i1.TuiPrimitiveTextfieldDirective, i1.TuiTextfieldIconDirective, i2.PolymorpheusTemplate, i3.NgIf, i2.PolymorpheusOutletDirective, i1.TuiWrapperDirective, i1.TuiHintDirective, i1.TuiHintDriverDirective, i1.TuiHintHoverDirective, i1.TuiHintPositionDirective, i3.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon[_ngcontent-%COMP%]{cursor:pointer;pointer-events:auto}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n    changeDetection: 0\n  });\n  return TuiInputPasswordComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputPasswordDirective = /*#__PURE__*/(() => {\n  class TuiInputPasswordDirective extends AbstractTuiTextfieldHost {\n    onValueChange(value) {\n      this.host.onValueChange(value);\n    }\n    process(input) {\n      this.input = input;\n    }\n    ngDoCheck() {\n      if (this.host.nativeFocusableElement && tuiIsInput(this.host.nativeFocusableElement)) {\n        this.host.nativeFocusableElement.type = this.host.inputType;\n      }\n    }\n  }\n  TuiInputPasswordDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputPasswordDirective_BaseFactory;\n    return function TuiInputPasswordDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputPasswordDirective_BaseFactory || (ɵTuiInputPasswordDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputPasswordDirective)))(__ngFactoryType__ || TuiInputPasswordDirective);\n    };\n  })();\n  TuiInputPasswordDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputPasswordDirective,\n    selectors: [[\"tui-input-password\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputPasswordDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputPasswordDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputPasswordModule = /*#__PURE__*/(() => {\n  class TuiInputPasswordModule {}\n  TuiInputPasswordModule.ɵfac = function TuiInputPasswordModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputPasswordModule)();\n  };\n  TuiInputPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputPasswordModule\n  });\n  TuiInputPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputPasswordModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PASSWORD_DEFAULT_OPTIONS, TUI_INPUT_PASSWORD_OPTIONS, TuiInputPasswordComponent, TuiInputPasswordDirective, TuiInputPasswordModule, tuiInputPasswordOptionsProvider };\n//# sourceMappingURL=taiga-ui-kit-components-input-password.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}