{"ast":null,"code":"import { HttpParams, HttpResponse } from '@angular/common/http';\nimport { snakeCase } from 'lodash-es';\nimport { filter, map, merge, share } from 'rxjs';\nimport { isInternalApiUrl, transformKeys } from '../../helpers';\nconst isNotEmptyQueryParam = value => !['null', 'undefined'].includes(value);\nconst toTransformedParams = params => (transformedParams, paramName) => {\n  const setNewParam = value => {\n    transformedParams = transformedParams.append(snakeCase(paramName), value);\n  };\n  params.getAll(paramName)?.filter(isNotEmptyQueryParam).forEach(setNewParam);\n  return transformedParams;\n};\nexport const transformPropertiesInterceptor = (req, next) => {\n  if (!isInternalApiUrl(req)) return next(req);\n  const isHttpResponse = event => event instanceof HttpResponse;\n  const isNotHttpResponse = event => !(event instanceof HttpResponse);\n  const toTransformedResponse = response => {\n    return response.clone({\n      body: transformKeys(response.body)\n    });\n  };\n  const transformedParams = req.params.keys().reduce(toTransformedParams(req.params), new HttpParams());\n  const transformedBody = transformKeys(req.body, 'snakeCase');\n  const request$ = next(req.clone({\n    params: transformedParams,\n    body: transformedBody\n  })).pipe(share());\n  const httpResponse$ = request$.pipe(filter(isHttpResponse), map(toTransformedResponse));\n  const httpEvents$ = request$.pipe(filter(isNotHttpResponse));\n  return merge(httpResponse$, httpEvents$);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}