{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, NgModule } from '@angular/core';\nimport { TuiInteractiveState } from '@taiga-ui/core/enums';\nimport { MODE_PROVIDER } from '@taiga-ui/core/providers';\nimport { TUI_MODE } from '@taiga-ui/core/tokens';\nimport * as i1 from 'rxjs';\nlet TuiWrapperDirective = /*#__PURE__*/(() => {\n  class TuiWrapperDirective {\n    constructor(mode$) {\n      this.mode$ = mode$;\n      this.disabled = false;\n      this.readOnly = false;\n      this.hover = null;\n      this.active = null;\n      this.focus = false;\n      this.invalid = false;\n      this.appearance = '';\n    }\n    get computedInvalid() {\n      return !this.disabled && !this.readOnly && this.invalid;\n    }\n    get computedFocused() {\n      return this.focus && !this.disabled;\n    }\n    get interactiveState() {\n      if (this.disabled) {\n        return TuiInteractiveState.Disabled;\n      }\n      if (this.readOnly) {\n        return TuiInteractiveState.Readonly;\n      }\n      if (this.active) {\n        return TuiInteractiveState.Active;\n      }\n      if (this.hover) {\n        return TuiInteractiveState.Hover;\n      }\n      return null;\n    }\n    get noHover() {\n      return this.readOnly || this.hover === false;\n    }\n    get noActive() {\n      return this.readOnly || this.active === false;\n    }\n  }\n  TuiWrapperDirective.ɵfac = function TuiWrapperDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiWrapperDirective)(i0.ɵɵdirectiveInject(TUI_MODE));\n  };\n  TuiWrapperDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiWrapperDirective,\n    selectors: [[\"\", \"tuiWrapper\", \"\"]],\n    hostVars: 10,\n    hostBindings: function TuiWrapperDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"$.data-mode.attr\", function TuiWrapperDirective___data_mode_attr_HostBindingHandler() {\n          return ctx.mode$;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-appearance\", ctx.appearance)(\"data-state\", ctx.interactiveState);\n        i0.ɵɵclassProp(\"_invalid\", ctx.computedInvalid)(\"_focused\", ctx.computedFocused)(\"_no-hover\", ctx.noHover)(\"_no-active\", ctx.noActive);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      readOnly: \"readOnly\",\n      hover: \"hover\",\n      active: \"active\",\n      focus: \"focus\",\n      invalid: \"invalid\",\n      appearance: \"appearance\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([MODE_PROVIDER])]\n  });\n  return TuiWrapperDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiWrapperModule = /*#__PURE__*/(() => {\n  class TuiWrapperModule {}\n  TuiWrapperModule.ɵfac = function TuiWrapperModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiWrapperModule)();\n  };\n  TuiWrapperModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiWrapperModule\n  });\n  TuiWrapperModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiWrapperModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiWrapperDirective, TuiWrapperModule };\n//# sourceMappingURL=taiga-ui-core-directives-wrapper.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}