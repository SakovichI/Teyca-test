{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, NgZone, Directive, Inject, Self, Input, HostBinding, NgModule } from '@angular/core';\nimport { tuiTypedFromEvent, tuiZonefree } from '@taiga-ui/cdk/observables';\nimport { TuiDestroyService } from '@taiga-ui/cdk/services';\nimport { tuiIsElement, tuiGetScrollParent, tuiCanScroll } from '@taiga-ui/cdk/utils/dom';\nimport { filter, takeUntil, switchMap, tap } from 'rxjs/operators';\nimport * as i1 from 'rxjs';\n\n/**\n * Directive to isolate scrolling, i.e. prevent body scroll behind modal dialog\n */\nlet TuiOverscrollDirective = /*#__PURE__*/(() => {\n  class TuiOverscrollDirective {\n    constructor({\n      nativeElement\n    }, zone, destroy$) {\n      this.mode = 'scroll';\n      tuiTypedFromEvent(nativeElement, 'wheel', {\n        passive: false\n      }).pipe(filter(() => this.enabled), tuiZonefree(zone), takeUntil(destroy$)).subscribe(event => {\n        this.processEvent(event, !!event.deltaY, event.deltaY ? event.deltaY < 0 : event.deltaX < 0);\n      });\n      tuiTypedFromEvent(nativeElement, 'touchstart', {\n        passive: true\n      }).pipe(switchMap(({\n        touches\n      }) => {\n        let {\n          clientX,\n          clientY\n        } = touches[0];\n        let deltaX = 0;\n        let deltaY = 0;\n        let vertical;\n        return tuiTypedFromEvent(nativeElement, 'touchmove', {\n          passive: false\n        }).pipe(filter(() => this.enabled), tap(event => {\n          // We have to have it in tap instead of subscribe due to variables in closure\n          const changedTouch = event.changedTouches[0];\n          deltaX = clientX - changedTouch.clientX;\n          deltaY = clientY - changedTouch.clientY;\n          clientX = changedTouch.clientX;\n          clientY = changedTouch.clientY;\n          if (vertical === undefined) {\n            vertical = Math.abs(deltaY) > Math.abs(deltaX);\n          }\n          this.processEvent(event, vertical, vertical ? deltaY < 0 : deltaX < 0);\n        }));\n      }), tuiZonefree(zone), takeUntil(destroy$)).subscribe();\n    }\n    get enabled() {\n      return this.mode !== 'none';\n    }\n    get overscrollBehavior() {\n      return this.enabled ? 'contain' : null;\n    }\n    processEvent(event, vertical, negative) {\n      var _a;\n      const {\n        target,\n        currentTarget,\n        cancelable\n      } = event;\n      if (!cancelable || !tuiIsElement(target) || ((_a = target) === null || _a === void 0 ? void 0 : _a.type) === 'range') {\n        return;\n      }\n      // This is all what's needed in Chrome/Firefox thanks to CSS overscroll-behavior\n      if (this.mode === 'all' && (vertical && !currentTarget.contains(tuiGetScrollParent(target)) || !vertical && !currentTarget.contains(tuiGetScrollParent(target, false)))) {\n        event.preventDefault();\n        return;\n      }\n      // This is Safari/IE/Edge fallback\n      if (vertical && (negative && !tuiCanScroll(target, currentTarget, true, false) || !negative && !tuiCanScroll(target, currentTarget, true, true))) {\n        event.preventDefault();\n        return;\n      }\n      if (!vertical && (negative && !tuiCanScroll(target, currentTarget, false, false) || !negative && !tuiCanScroll(target, currentTarget, false, true))) {\n        event.preventDefault();\n      }\n    }\n  }\n  TuiOverscrollDirective.ɵfac = function TuiOverscrollDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiOverscrollDirective)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(NgZone), i0.ɵɵdirectiveInject(TuiDestroyService, 2));\n  };\n  TuiOverscrollDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiOverscrollDirective,\n    selectors: [[\"\", \"tuiOverscroll\", \"\"]],\n    hostVars: 2,\n    hostBindings: function TuiOverscrollDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"overscroll-behavior\", ctx.overscrollBehavior);\n      }\n    },\n    inputs: {\n      mode: [0, \"tuiOverscroll\", \"mode\"]\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService])]\n  });\n  return TuiOverscrollDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiOverscrollModule = /*#__PURE__*/(() => {\n  class TuiOverscrollModule {}\n  TuiOverscrollModule.ɵfac = function TuiOverscrollModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiOverscrollModule)();\n  };\n  TuiOverscrollModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiOverscrollModule\n  });\n  TuiOverscrollModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiOverscrollModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiOverscrollDirective, TuiOverscrollModule };\n//# sourceMappingURL=taiga-ui-cdk-directives-overscroll.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}