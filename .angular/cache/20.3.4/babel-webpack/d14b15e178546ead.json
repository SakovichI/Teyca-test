{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Directive, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, ViewChild, Input, HostBinding, HostListener, NgModule } from '@angular/core';\nimport * as i8 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { maskitoDateTimeOptionsGenerator } from '@maskito/kit';\nimport * as i7 from '@taiga-ui/cdk';\nimport { TuiDay, TuiTime, AbstractTuiControl, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, TUI_FIRST_DAY, TUI_LAST_DAY, DATE_FILLER_LENGTH, tuiDateClamp, tuiNullableSame, tuiClamp, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_IS_MOBILE, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure, TuiPreventDefaultModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_TEXTFIELD_HOST, TUI_TEXTFIELD_SIZE, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { DATE_TIME_SEPARATOR, TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/kit/constants';\nimport { TUI_TIME_TEXTS, TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, tuiDateStreamWithTransformer } from '@taiga-ui/kit/tokens';\nimport * as i9 from 'rxjs';\nimport { BehaviorSubject, combineLatest, timer } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport * as i2 from '@taiga-ui/kit/directives';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i3 from '@maskito/angular';\nimport { MaskitoModule } from '@maskito/angular';\nimport * as i4 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nfunction TuiInputDateTimeComponent_ng_template_5_tui_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tui-svg\", 7);\n  }\n  if (rf & 2) {\n    const src_r2 = ctx.polymorpheusOutlet;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"t-icon\", !ctx_r2.computedDisabled);\n    i0.ɵɵproperty(\"readOnly\", ctx_r2.readOnly)(\"src\", src_r2);\n  }\n}\nfunction TuiInputDateTimeComponent_ng_template_5_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 8);\n  }\n}\nfunction TuiInputDateTimeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TuiInputDateTimeComponent_ng_template_5_tui_svg_0_Template, 1, 4, \"tui-svg\", 5)(1, TuiInputDateTimeComponent_ng_template_5_input_1_Template, 1, 0, \"input\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.calendarIcon)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(3, _c2, ctx_r2.size));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showNativePicker);\n  }\n}\nfunction TuiInputDateTimeComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-calendar\", 9);\n    i0.ɵɵlistener(\"dayClick\", function TuiInputDateTimeComponent_ng_template_7_Template_tui_calendar_dayClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDayClick($event));\n    })(\"monthChange\", function TuiInputDateTimeComponent_ng_template_7_Template_tui_calendar_monthChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onMonthChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabledItemHandler\", ctx_r2.disabledItemHandler)(\"max\", ctx_r2.calendarMaxDay)(\"min\", ctx_r2.calendarMinDay)(\"month\", ctx_r2.computedActiveYearMonth)(\"value\", ctx_r2.calendarValue);\n  }\n}\nlet TuiNativeDateTimeDirective = /*#__PURE__*/(() => {\n  class TuiNativeDateTimeDirective {\n    constructor(host) {\n      this.host = host;\n    }\n    get value() {\n      var _a, _b;\n      if (!this.host.rawValue[0] || !this.host.rawValue[1]) {\n        return '';\n      }\n      return `${(_a = this.host.rawValue[0]) === null || _a === void 0 ? void 0 : _a.toString('YMD', '-')}T${(_b = this.host.rawValue[1]) === null || _b === void 0 ? void 0 : _b.toString('HH:MM')}`;\n    }\n    onChange(value) {\n      if (!value) {\n        this.host.writeValue([null, null]);\n        return;\n      }\n      const date = new Date(value);\n      const day = TuiDay.fromLocalNativeDate(date);\n      const time = TuiTime.fromLocalNativeDate(date);\n      this.host.writeValue([day, time]);\n    }\n  }\n  TuiNativeDateTimeDirective.ɵfac = function TuiNativeDateTimeDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiNativeDateTimeDirective)(i0.ɵɵdirectiveInject(TUI_TEXTFIELD_HOST));\n  };\n  TuiNativeDateTimeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiNativeDateTimeDirective,\n    selectors: [[\"input\", \"tuiDateTime\", \"\"]],\n    hostAttrs: [\"type\", \"datetime-local\"],\n    hostVars: 2,\n    hostBindings: function TuiNativeDateTimeDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change.stop\", function TuiNativeDateTimeDirective_change_stop_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"input.stop\", function TuiNativeDateTimeDirective_input_stop_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"click.stop.silent\", function TuiNativeDateTimeDirective_click_stop_silent_HostBindingHandler() {\n          return 0;\n        })(\"mousedown.stop.silent\", function TuiNativeDateTimeDirective_mousedown_stop_silent_HostBindingHandler() {\n          return 0;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"tabIndex\", -1)(\"value\", ctx.value);\n      }\n    },\n    standalone: false\n  });\n  return TuiNativeDateTimeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateTimeComponent = /*#__PURE__*/(() => {\n  class TuiInputDateTimeComponent extends AbstractTuiControl {\n    constructor(control, cdr, dateFormat, dateSeparator, timeTexts$, dateTexts$, valueTransformer, options, isMobile, isIos, textfieldSize) {\n      super(control, cdr, valueTransformer);\n      this.dateFormat = dateFormat;\n      this.dateSeparator = dateSeparator;\n      this.timeTexts$ = timeTexts$;\n      this.dateTexts$ = dateTexts$;\n      this.valueTransformer = valueTransformer;\n      this.options = options;\n      this.isMobile = isMobile;\n      this.isIos = isIos;\n      this.textfieldSize = textfieldSize;\n      this.month = null;\n      this.timeMode$ = new BehaviorSubject('HH:MM');\n      this.min = this.options.min;\n      this.max = this.options.max;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.defaultActiveYearMonth = TuiMonth.currentLocal();\n      this.open = false;\n      this.filler$ = combineLatest([this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator))), this.timeTexts$, this.timeMode$]).pipe(map(([dateFiller, timeTexts, timeMode]) => this.getDateTimeString(dateFiller, timeTexts[timeMode])));\n    }\n    set timeMode(value) {\n      this.timeMode$.next(value);\n    }\n    get timeMode() {\n      return this.timeMode$.value;\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get computedMin() {\n      var _a;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {\n        return TUI_FIRST_DAY;\n      }\n      return this.toTuiDay(this.min, this.options.min);\n    }\n    get computedMax() {\n      var _a;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {\n        return TUI_LAST_DAY;\n      }\n      return this.toTuiDay(this.max, this.options.max);\n    }\n    get fillerLength() {\n      return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;\n    }\n    get maskOptions() {\n      return this.calculateMask(this.computedMin, this.computedMax, this.timeMode, this.dateFormat, this.dateSeparator);\n    }\n    get nativeFocusableElement() {\n      var _a, _b;\n      return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;\n    }\n    get focused() {\n      var _a;\n      return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);\n    }\n    get calendarIcon() {\n      return this.options.icon;\n    }\n    get nativePicker() {\n      return this.options.nativePicker && this.isMobile;\n    }\n    get showNativePicker() {\n      return this.nativePicker && this.timeMode === 'HH:MM';\n    }\n    get computedValue() {\n      const {\n        value,\n        nativeValue,\n        timeMode\n      } = this;\n      const [date, time] = value;\n      const hasTimeInputChars = nativeValue.length > DATE_FILLER_LENGTH;\n      if (!date || !time && hasTimeInputChars) {\n        return nativeValue;\n      }\n      return this.getDateTimeString(date, time, timeMode);\n    }\n    get calendarValue() {\n      return this.value[0];\n    }\n    get calendarMinDay() {\n      const min = this.toTuiDay(this.min, this.options.min);\n      return Array.isArray(min) ? min[0] : min;\n    }\n    get calendarMaxDay() {\n      const max = this.toTuiDay(this.max, this.options.max);\n      return Array.isArray(max) ? max[0] : max;\n    }\n    get computedActiveYearMonth() {\n      const {\n        computedMin,\n        computedMax\n      } = this;\n      return this.month || this.value[0] || tuiDateClamp(this.defaultActiveYearMonth, Array.isArray(computedMin) ? computedMin[0] : computedMin, Array.isArray(computedMax) ? computedMax[0] : computedMax);\n    }\n    get nativeValue() {\n      var _a;\n      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';\n    }\n    set nativeValue(value) {\n      if (!this.nativeFocusableElement) {\n        return;\n      }\n      this.nativeFocusableElement.value = value;\n    }\n    onClick() {\n      this.open = !this.open;\n    }\n    onValueChange(value) {\n      if (this.control) {\n        this.control.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      if (!value) {\n        this.onOpenChange(true);\n      }\n      if (value.length < DATE_FILLER_LENGTH) {\n        this.value = [null, null];\n        return;\n      }\n      const [date, time] = value.split(DATE_TIME_SEPARATOR);\n      const parsedDate = TuiDay.normalizeParse(date, this.dateFormat);\n      const parsedTime = time && time.length === this.timeMode.length ? TuiTime.fromString(time) : null;\n      this.open = false;\n      this.value = [parsedDate, parsedTime];\n    }\n    onDayClick(day) {\n      var _a;\n      const modifiedTime = this.value[1] && this.clampTime(this.value[1], day);\n      const newCaretIndex = DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length;\n      this.value = [day, modifiedTime];\n      this.updateNativeValue(day);\n      (_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(newCaretIndex, newCaretIndex);\n      this.open = false;\n    }\n    onMonthChange(month) {\n      this.month = month;\n    }\n    onOpenChange(open) {\n      this.open = open;\n    }\n    onFocused(focused) {\n      this.updateFocused(focused);\n      if (focused) {\n        return;\n      }\n      timer(0).pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.nativeValue = this.trimTrailingSeparator(this.nativeValue);\n      });\n      if (this.value[0] === null || this.value[1] !== null || this.nativeValue.length === this.fillerLength || this.timeMode === 'HH:MM') {\n        return;\n      }\n      const [, time] = this.nativeValue.split(DATE_TIME_SEPARATOR);\n      if (!time) {\n        return;\n      }\n      const parsedTime = TuiTime.fromString(time);\n      this.value = [this.value[0], parsedTime];\n    }\n    setDisabledState() {\n      super.setDisabledState();\n      this.open = false;\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = this.value && (this.value[0] || this.value[1]) ? this.computedValue : '';\n    }\n    getFallbackValue() {\n      return [null, null];\n    }\n    valueIdenticalComparator(oldValue, newValue) {\n      return tuiNullableSame(oldValue[0], newValue[0], (a, b) => a.daySame(b)) && tuiNullableSame(oldValue[1], newValue[1], (a, b) => String(a) === String(b));\n    }\n    calculateMask(min, max, timeMode, dateFormat, dateSeparator) {\n      return maskitoDateTimeOptionsGenerator({\n        timeMode,\n        dateSeparator,\n        dateMode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],\n        min: this.toNativeDate(min),\n        max: this.toNativeDate(max)\n      });\n    }\n    getDateTimeString(date, time, timeMode = 'HH:MM') {\n      const dateString = date instanceof TuiDay ? date.toString(this.dateFormat, this.dateSeparator) : date;\n      const timeString = time instanceof TuiTime ? time.toString(timeMode) : time || '';\n      return timeString ? `${dateString}${DATE_TIME_SEPARATOR}${timeString}` : dateString;\n    }\n    updateNativeValue(day) {\n      const time = this.nativeValue.split(DATE_TIME_SEPARATOR)[1] || '';\n      this.nativeValue = this.getDateTimeString(day, time);\n    }\n    clampTime(time, day) {\n      const {\n        computedMin,\n        computedMax\n      } = this;\n      const ms = time.toAbsoluteMilliseconds();\n      const min = Array.isArray(computedMin) && day.daySame(this.calendarMinDay) ? computedMin[1].toAbsoluteMilliseconds() : -Infinity;\n      const max = Array.isArray(computedMax) && day.daySame(this.calendarMaxDay) ? computedMax[1].toAbsoluteMilliseconds() : Infinity;\n      return TuiTime.fromAbsoluteMilliseconds(tuiClamp(ms, min, max));\n    }\n    trimTrailingSeparator(value) {\n      return value.replace(new RegExp(`(\\\\${this.dateSeparator}|${DATE_TIME_SEPARATOR}|\\\\.)$`), '');\n    }\n    toNativeDate(value) {\n      if (!Array.isArray(value)) {\n        return value.toLocalNativeDate();\n      }\n      const [{\n        year,\n        month,\n        day\n      }, {\n        hours,\n        minutes,\n        seconds,\n        ms\n      }] = value;\n      return new Date(year, month, day, hours, minutes, seconds, ms);\n    }\n    toTuiDay(value, fallback) {\n      if (!value) {\n        return fallback;\n      }\n      if (!Array.isArray(value)) {\n        return value;\n      }\n      const [tuiDay, tuiTime] = value;\n      if (!tuiDay) {\n        return fallback;\n      }\n      if (!tuiTime) {\n        return tuiDay;\n      }\n      return value;\n    }\n  }\n  TuiInputDateTimeComponent.ɵfac = function TuiInputDateTimeComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputDateTimeComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_DATE_FORMAT), i0.ɵɵdirectiveInject(TUI_DATE_SEPARATOR), i0.ɵɵdirectiveInject(TUI_TIME_TEXTS), i0.ɵɵdirectiveInject(TUI_DATE_TEXTS), i0.ɵɵdirectiveInject(TUI_DATE_TIME_VALUE_TRANSFORMER, 8), i0.ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(TUI_IS_IOS), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));\n  };\n  TuiInputDateTimeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputDateTimeComponent,\n    selectors: [[\"tui-input-date-time\"]],\n    viewQuery: function TuiInputDateTimeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputDateTimeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TuiInputDateTimeComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      disabledItemHandler: \"disabledItemHandler\",\n      defaultActiveYearMonth: \"defaultActiveYearMonth\",\n      timeMode: \"timeMode\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateTimeComponent), tuiAsControl(TuiInputDateTimeComponent), tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER)]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 16,\n    consts: [[\"iconContent\", \"\"], [\"dropdown\", \"polymorpheus\"], [1, \"t-hosted\", 3, \"openChange\", \"canOpen\", \"content\", \"open\"], [\"automation-id\", \"tui-input-date-time__textfield\", \"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"focusedChange\", \"valueChange\", \"disabled\", \"invalid\", \"maskito\", \"nativeId\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldFiller\", \"tuiTextfieldIcon\", \"value\"], [3, \"polymorpheus\"], [\"appearance\", \"icon\", \"tuiWrapper\", \"\", 3, \"t-icon\", \"readOnly\", \"src\", 4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"tuiDateTime\", \"\", \"class\", \"t-native-input\", 4, \"ngIf\"], [\"appearance\", \"icon\", \"tuiWrapper\", \"\", 3, \"readOnly\", \"src\"], [\"tuiDateTime\", \"\", 1, \"t-native-input\"], [\"automation-id\", \"tui-input-date-time__calendar\", \"tuiPreventDefault\", \"mousedown\", 3, \"dayClick\", \"monthChange\", \"disabledItemHandler\", \"max\", \"min\", \"month\", \"value\"]],\n    template: function TuiInputDateTimeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 2);\n        i0.ɵɵlistener(\"openChange\", function TuiInputDateTimeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onOpenChange($event));\n        });\n        i0.ɵɵelementStart(1, \"tui-primitive-textfield\", 3);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_focusedChange_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFocused($event));\n        })(\"valueChange\", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onValueChange($event));\n        });\n        i0.ɵɵprojection(3);\n        i0.ɵɵprojection(4, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, TuiInputDateTimeComponent_ng_template_5_Template, 2, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(7, TuiInputDateTimeComponent_ng_template_7_Template, 1, 5, \"ng-template\", 4, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const iconContent_r5 = i0.ɵɵreference(6);\n        const dropdown_r6 = i0.ɵɵreference(8);\n        i0.ɵɵproperty(\"canOpen\", ctx.interactive && !ctx.showNativePicker)(\"content\", dropdown_r6)(\"open\", ctx.open && ctx.interactive);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"disabled\", ctx.computedDisabled)(\"invalid\", ctx.computedInvalid)(\"maskito\", ctx.maskOptions)(\"nativeId\", ctx.nativeId)(\"pseudoFocus\", ctx.pseudoFocus)(\"pseudoHover\", ctx.pseudoHover)(\"readOnly\", ctx.readOnly)(\"tuiTextfieldFiller\", i0.ɵɵpipeBind1(2, 14, ctx.filler$) || \"\")(\"tuiTextfieldIcon\", ctx.calendarIcon && iconContent_r5)(\"value\", ctx.computedValue);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"polymorpheus\", ctx.type);\n      }\n    },\n    dependencies: [i1.TuiHostedDropdownComponent, i1.TuiPrimitiveTextfieldComponent, i1.TuiSvgComponent, i1.TuiCalendarComponent, i1.TuiPrimitiveTextfieldDirective, i2.TuiValueAccessorDirective, i3.MaskitoDirective, i1.TuiTextfieldFillerDirective, i1.TuiTextfieldIconDirective, i4.PolymorpheusOutletDirective, i1.TuiWrapperDirective, i5.NgIf, TuiNativeDateTimeDirective, i4.PolymorpheusTemplate, i7.TuiPreventDefaultDirective, i5.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-native-input[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputDateTimeComponent.prototype, \"calculateMask\", null);\n  __decorate([tuiPure], TuiInputDateTimeComponent.prototype, \"getDateTimeString\", null);\n  return TuiInputDateTimeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateTimeDirective = /*#__PURE__*/(() => {\n  class TuiInputDateTimeDirective extends AbstractTuiTextfieldHost {\n    get value() {\n      return this.host.computedValue;\n    }\n    get rawValue() {\n      return this.host.value;\n    }\n    onValueChange(value) {\n      this.host.onValueChange(value);\n    }\n    writeValue(value) {\n      this.host.writeValue(value);\n    }\n    process(input) {\n      input.inputMode = 'numeric';\n    }\n  }\n  TuiInputDateTimeDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputDateTimeDirective_BaseFactory;\n    return function TuiInputDateTimeDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputDateTimeDirective_BaseFactory || (ɵTuiInputDateTimeDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputDateTimeDirective)))(__ngFactoryType__ || TuiInputDateTimeDirective);\n    };\n  })();\n  TuiInputDateTimeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputDateTimeDirective,\n    selectors: [[\"tui-input-date-time\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDateTimeDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputDateTimeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateTimeModule = /*#__PURE__*/(() => {\n  class TuiInputDateTimeModule {}\n  TuiInputDateTimeModule.ɵfac = function TuiInputDateTimeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputDateTimeModule)();\n  };\n  TuiInputDateTimeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputDateTimeModule\n  });\n  TuiInputDateTimeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputDateTimeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiInputDateTimeModule };\n//# sourceMappingURL=taiga-ui-kit-components-input-date-time.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}