{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { ElementRef, Directive, Inject, Output, Input, EventEmitter, ChangeDetectorRef, TemplateRef, Component, ChangeDetectionStrategy, HostBinding, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport * as i5 from '@taiga-ui/cdk';\nimport { tuiTypedFromEvent, ALWAYS_FALSE_HANDLER, ALWAYS_TRUE_HANDLER, tuiIfMap, EMPTY_QUERY, tuiClamp, TUI_IS_MOBILE, TUI_SWIPE_OPTIONS, TuiItemDirective, tuiPure, TuiPanModule, TuiSwipeModule, TuiItemModule } from '@taiga-ui/cdk';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { filter, throttleTime, map, tap } from 'rxjs/operators';\nimport * as i3 from '@ng-web-apis/intersection-observer';\nimport { IntersectionObserverModule } from '@ng-web-apis/intersection-observer';\nimport { PAGE_VISIBILITY } from '@ng-web-apis/common';\nimport * as i1 from 'rxjs';\nimport { Observable, BehaviorSubject, merge, combineLatest, interval } from 'rxjs';\nimport { tuiButtonOptionsProvider, TuiAppearance } from '@taiga-ui/core';\nfunction TuiCarouselComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TuiCarouselComponent_fieldset_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"fieldset\", 5);\n    i0.ɵɵlistener(\"waIntersectionObservee\", function TuiCarouselComponent_fieldset_5_Template_fieldset_waIntersectionObservee_0_listener($event) {\n      const i_r2 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onIntersection($event[0], i_r2));\n    });\n    i0.ɵɵelementContainer(1, 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r2.isDisabled(i_r2))(\"ngStyle\", ctx_r2.getStyle(ctx_r2.itemsCount));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", item_r4);\n  }\n}\nlet TuiCarouselScrollDirective = /*#__PURE__*/(() => {\n  class TuiCarouselScrollDirective {\n    constructor(el) {\n      this.el = el;\n      this.tuiCarouselScroll = tuiTypedFromEvent(this.el.nativeElement, 'wheel').pipe(filter(({\n        deltaX\n      }) => Math.abs(deltaX) > 20), throttleTime(500), map(({\n        deltaX\n      }) => Math.sign(deltaX)), tap(() => {\n        // So we always have space to scroll and overflow-behavior saves us from back nav\n        this.el.nativeElement.scrollLeft = 10;\n      }));\n    }\n  }\n  TuiCarouselScrollDirective.ɵfac = function TuiCarouselScrollDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiCarouselScrollDirective)(i0.ɵɵdirectiveInject(ElementRef));\n  };\n  TuiCarouselScrollDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiCarouselScrollDirective,\n    selectors: [[\"\", \"tuiCarouselScroll\", \"\"]],\n    outputs: {\n      tuiCarouselScroll: \"tuiCarouselScroll\"\n    },\n    standalone: false\n  });\n  return TuiCarouselScrollDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiCarouselDirective = /*#__PURE__*/(() => {\n  class TuiCarouselDirective extends Observable {\n    constructor(el, visible$) {\n      super(subscriber => this.output$.subscribe(subscriber));\n      this.el = el;\n      this.visible$ = visible$;\n      this.duration$ = new BehaviorSubject(0);\n      this.running$ = merge(tuiTypedFromEvent(this.el.nativeElement, 'mouseenter').pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'touchstart').pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'touchend').pipe(map(ALWAYS_TRUE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'mouseleave').pipe(map(ALWAYS_TRUE_HANDLER)), this.visible$);\n      this.output$ = combineLatest([this.duration$, this.running$]).pipe(tuiIfMap(([duration]) => interval(duration), values => values.every(Boolean)));\n    }\n    set duration(duration) {\n      this.duration$.next(duration);\n    }\n    set index(_) {\n      this.duration$.next(this.duration$.value);\n    }\n  }\n  TuiCarouselDirective.ɵfac = function TuiCarouselDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiCarouselDirective)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(PAGE_VISIBILITY));\n  };\n  TuiCarouselDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiCarouselDirective,\n    selectors: [[\"tui-carousel\"]],\n    inputs: {\n      duration: \"duration\",\n      index: \"index\"\n    },\n    standalone: false,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiCarouselDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiCarouselAutoscrollDirective = /*#__PURE__*/(() => {\n  class TuiCarouselAutoscrollDirective {\n    constructor(tuiCarouselAutoscroll) {\n      this.tuiCarouselAutoscroll = tuiCarouselAutoscroll;\n    }\n  }\n  TuiCarouselAutoscrollDirective.ɵfac = function TuiCarouselAutoscrollDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiCarouselAutoscrollDirective)(i0.ɵɵdirectiveInject(TuiCarouselDirective));\n  };\n  TuiCarouselAutoscrollDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiCarouselAutoscrollDirective,\n    selectors: [[\"\", \"tuiCarouselAutoscroll\", \"\"]],\n    outputs: {\n      tuiCarouselAutoscroll: \"tuiCarouselAutoscroll\"\n    },\n    standalone: false\n  });\n  return TuiCarouselAutoscrollDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiCarouselComponent = /*#__PURE__*/(() => {\n  class TuiCarouselComponent {\n    constructor(cdr, el, isMobile) {\n      this.cdr = cdr;\n      this.el = el;\n      this.isMobile = isMobile;\n      this.translate = 0;\n      this.draggable = false;\n      this.itemsCount = 1;\n      this.index = 0;\n      this.indexChange = new EventEmitter();\n      this.items = EMPTY_QUERY;\n      this.transitioned = true;\n    }\n    get transform() {\n      const x = this.transitioned ? this.computedTranslate : this.translate;\n      return `translateX(${100 * x}%)`;\n    }\n    onTransitioned(transitioned) {\n      this.transitioned = transitioned;\n      if (!transitioned) {\n        this.translate = this.computedTranslate;\n      }\n    }\n    getStyle(itemsCount) {\n      const percent = `${100 / itemsCount}%`;\n      return {\n        flexBasis: percent,\n        minWidth: percent,\n        maxWidth: percent\n      };\n    }\n    next() {\n      if (this.items && this.index === this.items.length - this.itemsCount) {\n        return;\n      }\n      this.updateIndex(this.index + 1);\n    }\n    prev() {\n      this.updateIndex(this.index - 1);\n    }\n    isDisabled(index) {\n      return index < this.index || index > this.index + this.itemsCount;\n    }\n    onIntersection({\n      intersectionRatio\n    }, index) {\n      if (intersectionRatio && intersectionRatio >= 0.5 && !this.transitioned) {\n        this.updateIndex(this.index < index ? index - this.itemsCount + 1 : index);\n      }\n    }\n    onScroll(delta) {\n      if (!this.isMobile) {\n        delta > 0 ? this.next() : this.prev();\n      }\n    }\n    onPan(x) {\n      if (!this.computedDraggable) {\n        return;\n      }\n      const {\n        clientWidth\n      } = this.el.nativeElement;\n      const min = 1 - this.items.length / this.itemsCount;\n      this.translate = tuiClamp(x / clientWidth + this.translate, min, 0);\n    }\n    onSwipe(direction) {\n      if (direction === 'left') {\n        this.next();\n      } else if (direction === 'right') {\n        this.prev();\n      }\n    }\n    onAutoscroll() {\n      this.updateIndex(this.index === this.items.length - 1 ? 0 : this.index + 1);\n    }\n    get computedTranslate() {\n      return -this.index / this.itemsCount;\n    }\n    get computedDraggable() {\n      return this.isMobile || this.draggable;\n    }\n    updateIndex(index) {\n      this.index = tuiClamp(index, 0, this.items.length - 1);\n      this.indexChange.emit(this.index);\n      this.cdr.markForCheck();\n    }\n  }\n  TuiCarouselComponent.ɵfac = function TuiCarouselComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiCarouselComponent)(i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TUI_IS_MOBILE));\n  };\n  TuiCarouselComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiCarouselComponent,\n    selectors: [[\"tui-carousel\"]],\n    contentQueries: function TuiCarouselComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TuiItemDirective, 4, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function TuiCarouselComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"touchstart\", function TuiCarouselComponent_touchstart_HostBindingHandler() {\n          return ctx.onTransitioned(false);\n        })(\"touchend\", function TuiCarouselComponent_touchend_HostBindingHandler() {\n          return ctx.onTransitioned(true);\n        })(\"mousedown\", function TuiCarouselComponent_mousedown_HostBindingHandler() {\n          return ctx.onTransitioned(false);\n        })(\"mouseup.silent\", function TuiCarouselComponent_mouseup_silent_HostBindingHandler() {\n          return ctx.onTransitioned(true);\n        }, i0.ɵɵresolveDocument);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"_draggable\", ctx.draggable)(\"_transitioned\", ctx.transitioned);\n      }\n    },\n    inputs: {\n      draggable: \"draggable\",\n      itemsCount: \"itemsCount\",\n      index: \"index\"\n    },\n    outputs: {\n      indexChange: \"indexChange\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_SWIPE_OPTIONS,\n      useValue: {\n        timeout: 200,\n        threshold: 30\n      }\n    }])],\n    decls: 6,\n    vars: 6,\n    consts: [[4, \"ngIf\"], [1, \"t-scroller\", 3, \"tuiCarouselScroll\"], [\"waIntersectionObserver\", \"\", \"waIntersectionThreshold\", \"0.5\", 1, \"t-wrapper\"], [1, \"t-items\", 3, \"tuiCarouselAutoscroll\", \"tuiPan\", \"tuiSwipe\"], [\"class\", \"t-item\", 3, \"disabled\", \"ngStyle\", \"waIntersectionObservee\", 4, \"ngFor\", \"ngForOf\"], [1, \"t-item\", 3, \"waIntersectionObservee\", \"disabled\", \"ngStyle\"], [3, \"ngTemplateOutlet\"]],\n    template: function TuiCarouselComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TuiCarouselComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵlistener(\"tuiCarouselScroll\", function TuiCarouselComponent_Template_div_tuiCarouselScroll_2_listener($event) {\n          return ctx.onScroll($event);\n        });\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3);\n        i0.ɵɵlistener(\"tuiCarouselAutoscroll\", function TuiCarouselComponent_Template_div_tuiCarouselAutoscroll_4_listener() {\n          return ctx.onAutoscroll();\n        })(\"tuiPan\", function TuiCarouselComponent_Template_div_tuiPan_4_listener($event) {\n          return ctx.onPan($event[0]);\n        })(\"tuiSwipe\", function TuiCarouselComponent_Template_div_tuiSwipe_4_listener($event) {\n          return ctx.onSwipe($event.direction);\n        });\n        i0.ɵɵtemplate(5, TuiCarouselComponent_fieldset_5_Template, 2, 3, \"fieldset\", 4);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 4, ctx.items.changes));\n        i0.ɵɵadvance(4);\n        i0.ɵɵstyleProp(\"transform\", ctx.transform);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    dependencies: [i1$1.NgIf, TuiCarouselScrollDirective, i3.IntersectionObserverDirective, TuiCarouselAutoscrollDirective, i5.TuiPanDirective, i5.TuiSwipeDirective, i1$1.NgForOf, i1$1.NgStyle, i3.IntersectionObserveeDirective, i1$1.NgTemplateOutlet, i1$1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:block;overflow:hidden}._draggable[_nghost-%COMP%]{-webkit-user-select:none;-moz-user-select:none;user-select:none}._draggable[_nghost-%COMP%]:hover{cursor:grab}._draggable[_nghost-%COMP%]:active{cursor:grabbing}.t-items[_ngcontent-%COMP%]{display:flex}._transitioned[_nghost-%COMP%]   .t-items[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-item[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;padding:var(--tui-carousel-padding, 0 1.25rem);flex:1;min-width:100%;max-width:100%;box-sizing:border-box;border:none;margin:0}.t-wrapper[_ngcontent-%COMP%]{position:-webkit-sticky;position:sticky;left:0;right:0;min-width:100%;overflow:hidden}.t-scroller[_ngcontent-%COMP%]{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;overscroll-behavior-x:none;touch-action:none}.t-scroller[_ngcontent-%COMP%]::-webkit-scrollbar, .t-scroller[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{display:none}.t-scroller[_ngcontent-%COMP%]:before, .t-scroller[_ngcontent-%COMP%]:after{content:\\\"\\\";display:block;min-width:1rem}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiCarouselComponent.prototype, \"getStyle\", null);\n  return TuiCarouselComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiCarouselButtonsDirective = /*#__PURE__*/(() => {\n  class TuiCarouselButtonsDirective {}\n  TuiCarouselButtonsDirective.ɵfac = function TuiCarouselButtonsDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiCarouselButtonsDirective)();\n  };\n  TuiCarouselButtonsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiCarouselButtonsDirective,\n    selectors: [[\"\", \"tuiCarouselButtons\", \"\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiButtonOptionsProvider({\n      appearance: TuiAppearance.Secondary,\n      shape: 'rounded',\n      size: 'm'\n    })])]\n  });\n  return TuiCarouselButtonsDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiCarouselModule = /*#__PURE__*/(() => {\n  class TuiCarouselModule {}\n  TuiCarouselModule.ɵfac = function TuiCarouselModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiCarouselModule)();\n  };\n  TuiCarouselModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiCarouselModule\n  });\n  TuiCarouselModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, IntersectionObserverModule, TuiPanModule, TuiSwipeModule, TuiItemModule]]\n  });\n  return TuiCarouselModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiCarouselAutoscrollDirective, TuiCarouselButtonsDirective, TuiCarouselComponent, TuiCarouselDirective, TuiCarouselModule, TuiCarouselScrollDirective };\n//# sourceMappingURL=taiga-ui-kit-components-carousel.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}