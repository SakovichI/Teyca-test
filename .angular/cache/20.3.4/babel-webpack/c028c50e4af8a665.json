{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, Input, HostBinding, Output, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { AbstractTuiMultipleControl, TUI_DEFAULT_IDENTITY_MATCHER, ALWAYS_FALSE_HANDLER, TUI_DEFAULT_STRINGIFY, tuiIsNativeFocusedIn } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/kit/components/checkbox-block';\nimport { TuiCheckboxBlockModule } from '@taiga-ui/kit/components/checkbox-block';\nimport * as i2 from '@taiga-ui/kit/components/badge';\nimport { TuiBadgeModule } from '@taiga-ui/kit/components/badge';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i6 from '@taiga-ui/core';\nimport { TuiModeModule } from '@taiga-ui/core';\n\n// @bad TODO: Add active zone to track focus\nconst _c0 = a0 => ({\n  $implicit: a0\n});\nfunction TuiFilterComponent_tui_checkbox_block_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r4 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r4, \" \");\n  }\n}\nfunction TuiFilterComponent_tui_checkbox_block_0_tui_badge_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tui-badge\", 5);\n  }\n  if (rf & 2) {\n    const badgeValue_r5 = ctx.ngIf;\n    const item_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"t-badge_disabled\", ctx_r2.disabledItemHandler(item_r2));\n    i0.ɵɵproperty(\"size\", ctx_r2.size)(\"value\", badgeValue_r5);\n  }\n}\nfunction TuiFilterComponent_tui_checkbox_block_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-checkbox-block\", 1);\n    i0.ɵɵlistener(\"ngModelChange\", function TuiFilterComponent_tui_checkbox_block_0_Template_tui_checkbox_block_ngModelChange_0_listener($event) {\n      const item_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onCheckbox($event, item_r2));\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtemplate(2, TuiFilterComponent_tui_checkbox_block_0_ng_container_2_Template, 2, 1, \"ng-container\", 3)(3, TuiFilterComponent_tui_checkbox_block_0_tui_badge_3_Template, 1, 4, \"tui-badge\", 4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r2.disabledItemHandler(item_r2))(\"hideCheckbox\", true)(\"ngModel\", ctx_r2.isCheckboxEnabled(item_r2))(\"size\", ctx_r2.size);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.content)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(7, _c0, item_r2));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.badgeHandler(item_r2));\n  }\n}\nlet TuiFilterComponent = /*#__PURE__*/(() => {\n  class TuiFilterComponent extends AbstractTuiMultipleControl {\n    constructor(control, cdr, el) {\n      super(control, cdr);\n      this.el = el;\n      this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;\n      this.items = [];\n      this.size = 'm';\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.toggledItem = new EventEmitter();\n      this.content = ({\n        $implicit\n      }) => TUI_DEFAULT_STRINGIFY($implicit);\n      this.badgeHandler = item => Number(item);\n    }\n    get focused() {\n      return tuiIsNativeFocusedIn(this.el.nativeElement);\n    }\n    onCheckbox(value, item) {\n      this.toggledItem.emit(item);\n      this.value = value ? [...this.value, item] : this.value.filter(arrItem => !this.identityMatcher(arrItem, item));\n    }\n    isCheckboxEnabled(item) {\n      return this.value.some(arrItem => this.identityMatcher(arrItem, item));\n    }\n  }\n  TuiFilterComponent.ɵfac = function TuiFilterComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiFilterComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(ElementRef));\n  };\n  TuiFilterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiFilterComponent,\n    selectors: [[\"tui-filter\"]],\n    hostVars: 1,\n    hostBindings: function TuiFilterComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      identityMatcher: \"identityMatcher\",\n      items: \"items\",\n      size: \"size\",\n      disabledItemHandler: \"disabledItemHandler\",\n      content: \"content\",\n      badgeHandler: \"badgeHandler\"\n    },\n    outputs: {\n      toggledItem: \"toggledItem\"\n    },\n    standalone: false,\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"automation-id\", \"tui-filter__checkbox\", \"class\", \"t-item\", 3, \"disabled\", \"hideCheckbox\", \"ngModel\", \"size\", \"ngModelChange\", 4, \"ngFor\", \"ngForOf\"], [\"automation-id\", \"tui-filter__checkbox\", 1, \"t-item\", 3, \"ngModelChange\", \"disabled\", \"hideCheckbox\", \"ngModel\", \"size\"], [\"automation-id\", \"tui-filter__content\", 1, \"t-content\"], [4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"automation-id\", \"tui-filter__badge\", \"tuiMode\", \"onLight\", \"class\", \"t-badge\", 3, \"t-badge_disabled\", \"size\", \"value\", 4, \"ngIf\"], [\"automation-id\", \"tui-filter__badge\", \"tuiMode\", \"onLight\", 1, \"t-badge\", 3, \"size\", \"value\"]],\n    template: function TuiFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TuiFilterComponent_tui_checkbox_block_0_Template, 4, 9, \"tui-checkbox-block\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    dependencies: [i1.TuiCheckboxBlockComponent, i2.TuiBadgeComponent, i3.NgForOf, i4.NgControlStatus, i4.NgModel, i5.PolymorpheusOutletDirective, i3.NgIf, i6.TuiModeDirective],\n    styles: [\"[_nghost-%COMP%]{display:block;margin-bottom:-.25rem}.t-content[_ngcontent-%COMP%]{display:flex;align-items:center}.t-item[_ngcontent-%COMP%]{margin-right:.25rem;margin-bottom:.25rem}.t-item[_ngcontent-%COMP%]:last-child, [data-size=l][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]:last-child{margin-right:0}[data-size=l][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]{margin-right:.5rem;margin-bottom:.5rem}.t-badge[_ngcontent-%COMP%]{margin-left:.25rem}.t-badge_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}\"],\n    changeDetection: 0\n  });\n  return TuiFilterComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiFilterModule = /*#__PURE__*/(() => {\n  class TuiFilterModule {}\n  TuiFilterModule.ɵfac = function TuiFilterModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiFilterModule)();\n  };\n  TuiFilterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiFilterModule\n  });\n  TuiFilterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiCheckboxBlockModule, TuiBadgeModule, TuiModeModule]]\n  });\n  return TuiFilterModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiFilterComponent, TuiFilterModule };\n//# sourceMappingURL=taiga-ui-kit-components-filter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}