{"ast":null,"code":"import { camelCase, snakeCase, isArray } from 'lodash-es';\nconst modesMap = new Map([['camelCase', camelCase], ['snakeCase', snakeCase]]);\nconst isObject = entity => !isArray(entity) && typeof entity === 'object';\nconst toTransformedArray = (entity, mode) => {\n  const toTransformedItem = item => transformKeys(item, mode);\n  return entity.map(toTransformedItem);\n};\nconst toTransformedObject = (entity, mode) => {\n  const transformerFunction = modesMap.get(mode);\n  if (!transformerFunction) return entity;\n  const toNewObject = (newObject, key) => {\n    const preservedUpperCaseKey = key === key.toUpperCase() ? key : transformerFunction(key);\n    newObject[preservedUpperCaseKey] = transformKeys(entity[key], mode);\n    return newObject;\n  };\n  return Object.keys(entity).reduce(toNewObject, {});\n};\nexport const transformKeys = (entity, mode = 'camelCase') => {\n  if (!entity || entity instanceof FormData || entity instanceof File || entity instanceof Blob) return entity;\n  if (isObject(entity)) {\n    return toTransformedObject(entity, mode);\n  }\n  if (isArray(entity)) {\n    return toTransformedArray(entity, mode);\n  }\n  return entity;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}