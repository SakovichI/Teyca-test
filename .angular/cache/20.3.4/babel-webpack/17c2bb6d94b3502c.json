{"ast":null,"code":"import { Router } from '@angular/router';\nimport { inject, signal } from '@angular/core';\nimport { OAuthService } from 'angular-oauth2-oidc';\nimport { tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AUTH_BASE_PATH } from '../../constants';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    #oauthService = inject(OAuthService);\n    #http = inject(HttpClient);\n    #router = inject(Router);\n    #isLoggedInSignal = signal(false, ...(ngDevMode ? [{\n      debugName: \"#isLoggedInSignal\"\n    }] : []));\n    $isLoggedIn = this.#isLoggedInSignal.asReadonly();\n    get hasValidAccessToken() {\n      return !!this.accessToken;\n    }\n    get accessToken() {\n      const token = localStorage.getItem('authToken') ?? '';\n      return token;\n    }\n    login() {\n      this.#oauthService.initLoginFlow();\n    }\n    loginWithCredentials(data) {\n      return this.#http.post(`${AUTH_BASE_PATH}`, data).pipe(tap(token => {\n        localStorage.setItem('authToken', token.authToken);\n        this.#setIsLoggedIn(Boolean(token.authToken));\n      }));\n    }\n    logout() {\n      localStorage.removeItem('authToken');\n      this.#router.navigate(['/login']);\n      this.#setIsLoggedIn(false);\n    }\n    setConfig(authConfig) {\n      this.#oauthService.configure(authConfig);\n    }\n    #setIsLoggedIn = isLoggedIn => {\n      this.#isLoggedInSignal.set(isLoggedIn);\n    };\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}