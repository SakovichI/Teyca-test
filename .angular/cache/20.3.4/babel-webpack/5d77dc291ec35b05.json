{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChildren, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport * as i4 from '@taiga-ui/cdk';\nimport { AbstractTuiControl, EMPTY_QUERY, tuiIsNativeFocusedIn, tuiIsNativeFocused, tuiRound, tuiClamp, TUI_IS_MOBILE, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure, TuiActiveZoneModule, TuiPressedModule } from '@taiga-ui/cdk';\nimport * as i3 from '@taiga-ui/core';\nimport { tuiGetFractionPartPadded, TUI_TEXTFIELD_WATCHED_CONTROLLER, TEXTFIELD_CONTROLLER_PROVIDER, TuiWrapperModule, TuiTextfieldControllerModule } from '@taiga-ui/core';\nimport * as i1 from '@taiga-ui/kit/components/input-number';\nimport { TuiInputNumberComponent, TuiInputNumberModule } from '@taiga-ui/kit/components/input-number';\nimport * as i2 from '@taiga-ui/kit/components/range';\nimport { TuiRangeComponent, TuiRangeModule } from '@taiga-ui/kit/components/range';\nimport { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i7 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nconst _c0 = [\"*\"];\nconst _c1 = a0 => ({\n  $implicit: a0\n});\nfunction TuiInputRangeComponent_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r1 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r1, \" \");\n  }\n}\nfunction TuiInputRangeComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, TuiInputRangeComponent_div_4_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r1.leftValueContent)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.value[0]));\n  }\n}\nfunction TuiInputRangeComponent_div_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r3 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r3, \" \");\n  }\n}\nfunction TuiInputRangeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, TuiInputRangeComponent_div_7_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r1.rightValueContent)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.value[1]));\n  }\n}\nlet TuiInputRangeComponent = /*#__PURE__*/(() => {\n  class TuiInputRangeComponent extends AbstractTuiControl {\n    constructor(control, cdr, isMobile, el, controller) {\n      super(control, cdr);\n      this.isMobile = isMobile;\n      this.el = el;\n      this.controller = controller;\n      this.inputNumberRefs = EMPTY_QUERY;\n      this.rangeRef = null;\n      this.min = 0;\n      this.max = 100;\n      this.quantum = 1;\n      this.steps = 0;\n      this.segments = 1;\n      this.keySteps = null;\n      this.pluralize = null;\n      this.leftTextfieldValue = this.safeCurrentValue[0];\n      this.rightTextfieldValue = this.safeCurrentValue[1];\n      this.lastActiveSide = 'left';\n    }\n    get leftFocusableElement() {\n      var _a;\n      return ((_a = this.inputNumberRefs.first) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;\n    }\n    get rightFocusableElement() {\n      var _a;\n      return ((_a = this.inputNumberRefs.last) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;\n    }\n    get nativeFocusableElement() {\n      return this.disabled ? null : this.leftFocusableElement || this.rightFocusableElement;\n    }\n    get focused() {\n      return tuiIsNativeFocusedIn(this.el.nativeElement);\n    }\n    get appearance() {\n      return this.controller.appearance;\n    }\n    get showLeftValueContent() {\n      var _a;\n      return Boolean(this.leftValueContent && !tuiIsNativeFocused(this.leftFocusableElement) && !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'left'));\n    }\n    get showRightValueContent() {\n      var _a;\n      return Boolean(this.rightValueContent && !tuiIsNativeFocused(this.rightFocusableElement) && !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'right'));\n    }\n    get precision() {\n      return tuiGetFractionPartPadded(this.quantum).length;\n    }\n    get decimal() {\n      return this.precision ? 'not-zero' : 'never';\n    }\n    get computedSteps() {\n      return this.steps || (this.max - this.min) / this.quantum;\n    }\n    get step() {\n      return (this.max - this.min) / this.computedSteps;\n    }\n    computeKeySteps(keySteps, min, max) {\n      return keySteps || [[0, min], [100, max]];\n    }\n    onActiveZone(active) {\n      this.updateFocused(active);\n    }\n    onTextInputFocused(focused) {\n      if (!focused) {\n        this.updateTextfieldValues(this.value);\n      }\n    }\n    changeByStep(event, [leftCoefficient, rightCoefficient]) {\n      if (this.readOnly) {\n        return;\n      }\n      event.preventDefault();\n      const newValue = this.valueGuard([this.value[0] + leftCoefficient * this.step, this.value[1] + rightCoefficient * this.step]);\n      if (newValue[0] !== this.value[0] || newValue[1] !== this.value[1]) {\n        this.onExternalValueUpdate(newValue);\n      }\n    }\n    onInputLeft(value) {\n      this.safelyUpdateValue([value !== null && value !== void 0 ? value : this.safeCurrentValue[0], this.value[1]]);\n    }\n    onInputRight(value) {\n      this.safelyUpdateValue([this.value[0], value !== null && value !== void 0 ? value : this.safeCurrentValue[1]]);\n    }\n    onExternalValueUpdate(value) {\n      this.safelyUpdateValue(value);\n      this.updateTextfieldValues(this.value);\n    }\n    focusToTextInput() {\n      const element = this.lastActiveSide === 'left' ? this.leftFocusableElement : this.rightFocusableElement;\n      if (!this.isMobile && element) {\n        element.focus();\n      }\n    }\n    onActiveThumbChange(activeThumb) {\n      this.lastActiveSide = activeThumb;\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.updateTextfieldValues(this.value);\n    }\n    getFallbackValue() {\n      return [0, 0];\n    }\n    safelyUpdateValue(value) {\n      this.value = this.valueGuard(value);\n    }\n    valueGuard([leftValue, rightValue]) {\n      const leftCalibratedValue = this.calibrate(leftValue);\n      const rightCalibratedValue = this.calibrate(rightValue);\n      return [Math.min(leftCalibratedValue, this.value[1]), Math.max(rightCalibratedValue, this.value[0])];\n    }\n    calibrate(value) {\n      const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);\n      return tuiClamp(roundedValue, this.min, this.max);\n    }\n    updateTextfieldValues([leftValue, rightValue]) {\n      this.leftTextfieldValue = leftValue;\n      this.rightTextfieldValue = rightValue;\n    }\n  }\n  TuiInputRangeComponent.ɵfac = function TuiInputRangeComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputRangeComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER));\n  };\n  TuiInputRangeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputRangeComponent,\n    selectors: [[\"tui-input-range\"]],\n    viewQuery: function TuiInputRangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiRangeComponent, 5);\n        i0.ɵɵviewQuery(TuiInputNumberComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rangeRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputNumberRefs = _t);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function TuiInputRangeComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.controller.size);\n        i0.ɵɵclassProp(\"_label-outside\", ctx.controller.labelOutside);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      quantum: \"quantum\",\n      steps: \"steps\",\n      segments: \"segments\",\n      keySteps: \"keySteps\",\n      leftValueContent: \"leftValueContent\",\n      rightValueContent: \"rightValueContent\",\n      pluralize: \"pluralize\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputRangeComponent), tuiAsControl(TuiInputRangeComponent), TEXTFIELD_CONTROLLER_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 9,\n    vars: 38,\n    consts: [[\"tuiWrapper\", \"\", 1, \"t-wrapper\", 3, \"tuiActiveZoneChange\", \"appearance\", \"disabled\", \"focus\", \"hover\", \"invalid\", \"readOnly\"], [\"automation-id\", \"tui-input-range__left-input\", \"tuiTextfieldAppearance\", \"none\", 1, \"t-left\", 3, \"ngModelChange\", \"focusedChange\", \"keydown.arrowDown\", \"keydown.arrowUp\", \"decimal\", \"disabled\", \"max\", \"min\", \"precision\", \"readOnly\", \"tuiTextfieldPostfix\", \"ngModel\"], [\"ngProjectAs\", \"tuiContent\", 5, [\"tuiContent\"], 4, \"ngIf\"], [\"automation-id\", \"tui-input-range__right-input\", \"tuiTextfieldAppearance\", \"none\", 1, \"t-right\", 3, \"ngModelChange\", \"focusedChange\", \"keydown.arrowDown\", \"keydown.arrowUp\", \"decimal\", \"disabled\", \"max\", \"min\", \"precision\", \"readOnly\", \"tuiTextfieldPostfix\", \"ngModel\"], [1, \"t-range\", 3, \"activeThumbChange\", \"ngModelChange\", \"tuiPressedChange\", \"disabled\", \"focusable\", \"keySteps\", \"max\", \"min\", \"ngModel\", \"segments\", \"step\"], [\"ngProjectAs\", \"tuiContent\", 5, [\"tuiContent\"]], [4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"]],\n    template: function TuiInputRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"tuiActiveZoneChange\", function TuiInputRangeComponent_Template_div_tuiActiveZoneChange_0_listener($event) {\n          return ctx.onActiveZone($event);\n        });\n        i0.ɵɵelementStart(1, \"tui-input-number\", 1);\n        i0.ɵɵpipe(2, \"i18nPlural\");\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_1_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.leftTextfieldValue, $event) || (ctx.leftTextfieldValue = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputRangeComponent_Template_tui_input_number_focusedChange_1_listener($event) {\n          return ctx.onTextInputFocused($event);\n        })(\"keydown.arrowDown\", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowDown_1_listener($event) {\n          return ctx.changeByStep($event, [-1, 0]);\n        })(\"keydown.arrowUp\", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowUp_1_listener($event) {\n          return ctx.changeByStep($event, [1, 0]);\n        })(\"ngModelChange\", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_1_listener($event) {\n          return ctx.onInputLeft($event);\n        });\n        i0.ɵɵprojection(3);\n        i0.ɵɵtemplate(4, TuiInputRangeComponent_div_4_Template, 2, 4, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"tui-input-number\", 3);\n        i0.ɵɵpipe(6, \"i18nPlural\");\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_5_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.rightTextfieldValue, $event) || (ctx.rightTextfieldValue = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputRangeComponent_Template_tui_input_number_focusedChange_5_listener($event) {\n          return ctx.onTextInputFocused($event);\n        })(\"keydown.arrowDown\", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowDown_5_listener($event) {\n          return ctx.changeByStep($event, [0, -1]);\n        })(\"keydown.arrowUp\", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowUp_5_listener($event) {\n          return ctx.changeByStep($event, [0, 1]);\n        })(\"ngModelChange\", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_5_listener($event) {\n          return ctx.onInputRight($event);\n        });\n        i0.ɵɵtemplate(7, TuiInputRangeComponent_div_7_Template, 2, 4, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"tui-range\", 4);\n        i0.ɵɵlistener(\"activeThumbChange\", function TuiInputRangeComponent_Template_tui_range_activeThumbChange_8_listener($event) {\n          return ctx.onActiveThumbChange($event);\n        })(\"ngModelChange\", function TuiInputRangeComponent_Template_tui_range_ngModelChange_8_listener($event) {\n          return ctx.onExternalValueUpdate($event);\n        })(\"tuiPressedChange\", function TuiInputRangeComponent_Template_tui_range_tuiPressedChange_8_listener() {\n          return ctx.focusToTextInput();\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"appearance\", ctx.appearance)(\"disabled\", ctx.disabled)(\"focus\", ctx.computedFocused)(\"hover\", ctx.pseudoHover)(\"invalid\", ctx.computedInvalid)(\"readOnly\", ctx.readOnly);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"decimal\", ctx.decimal)(\"disabled\", ctx.computedDisabled)(\"max\", ctx.value[1])(\"min\", ctx.min)(\"precision\", ctx.precision)(\"readOnly\", ctx.readOnly)(\"tuiTextfieldPostfix\", ctx.pluralize && !ctx.showLeftValueContent ? i0.ɵɵpipeBind2(2, 32, ctx.value[0], ctx.pluralize) : \"\");\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.leftTextfieldValue);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.showLeftValueContent);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"decimal\", ctx.decimal)(\"disabled\", ctx.computedDisabled)(\"max\", ctx.max)(\"min\", ctx.value[0])(\"precision\", ctx.precision)(\"readOnly\", ctx.readOnly)(\"tuiTextfieldPostfix\", ctx.pluralize && !ctx.showRightValueContent ? i0.ɵɵpipeBind2(6, 35, ctx.value[1], ctx.pluralize) : \"\");\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.rightTextfieldValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showRightValueContent);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"disabled\", ctx.readOnly || ctx.disabled)(\"focusable\", false)(\"keySteps\", ctx.computeKeySteps(ctx.keySteps, ctx.min, ctx.max))(\"max\", ctx.max)(\"min\", ctx.min)(\"ngModel\", ctx.value)(\"segments\", ctx.segments)(\"step\", ctx.step);\n      }\n    },\n    dependencies: [i1.TuiInputNumberComponent, i2.TuiRangeComponent, i3.TuiWrapperDirective, i4.TuiActiveZoneDirective, i1.TuiInputNumberDirective, i3.TuiTextfieldAppearanceDirective, i3.TuiTextfieldPostfixDirective, i5.NgControlStatus, i5.NgModel, i6.NgIf, i7.PolymorpheusOutletDirective, i2.TuiRangeChangeDirective, i4.TuiPressedDirective, i6.I18nPluralPipe],\n    styles: [\".t-wrapper[_ngcontent-%COMP%]{position:relative}.t-left[_ngcontent-%COMP%]{width:100%}.t-right[_ngcontent-%COMP%]{position:absolute;right:0;top:0;display:flex;width:50%;height:100%;text-align:right}[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m)}.t-range[_ngcontent-%COMP%]{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0;background:transparent}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputRangeComponent.prototype, \"computeKeySteps\", null);\n  return TuiInputRangeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputRangeModule = /*#__PURE__*/(() => {\n  class TuiInputRangeModule {}\n  TuiInputRangeModule.ɵfac = function TuiInputRangeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputRangeModule)();\n  };\n  TuiInputRangeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputRangeModule\n  });\n  TuiInputRangeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiActiveZoneModule, TuiInputNumberModule, TuiPressedModule, TuiRangeModule, TuiWrapperModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputRangeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiInputRangeComponent, TuiInputRangeModule };\n//# sourceMappingURL=taiga-ui-kit-components-input-range.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}