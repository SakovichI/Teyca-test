{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Self, Inject, SkipSelf, Optional } from '@angular/core';\nimport { TuiDestroyService, AbstractTuiControl } from '@taiga-ui/cdk';\nimport * as i1 from 'rxjs';\nimport { Observable, merge } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass TuiDriver extends Observable {}\nfunction tuiAsDriver(useExisting) {\n  return {\n    provide: TuiDriver,\n    multi: true,\n    useExisting\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass TuiVehicle {}\nfunction tuiAsVehicle(useExisting) {\n  return {\n    provide: TuiVehicle,\n    multi: true,\n    useExisting\n  };\n}\nlet AbstractTuiDriverDirective = /*#__PURE__*/(() => {\n  class AbstractTuiDriverDirective {\n    constructor(destroy$, drivers, vehicles) {\n      this.destroy$ = destroy$;\n      this.drivers = drivers;\n      this.vehicles = vehicles;\n    }\n    ngOnInit() {\n      const vehicle = this.vehicles.find(({\n        type\n      }) => type === this.type);\n      merge(...this.drivers.filter(({\n        type\n      }) => type === this.type)).pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe(value => {\n        vehicle === null || vehicle === void 0 ? void 0 : vehicle.toggle(value);\n      });\n    }\n  }\n  AbstractTuiDriverDirective.ɵfac = function AbstractTuiDriverDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AbstractTuiDriverDirective)(i0.ɵɵdirectiveInject(TuiDestroyService, 2), i0.ɵɵdirectiveInject(TuiDriver), i0.ɵɵdirectiveInject(TuiVehicle));\n  };\n  AbstractTuiDriverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: AbstractTuiDriverDirective,\n    standalone: false\n  });\n  return AbstractTuiDriverDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AbstractTuiTextfieldHost = /*#__PURE__*/(() => {\n  class AbstractTuiTextfieldHost {\n    constructor(host) {\n      this.host = host;\n    }\n    get readOnly() {\n      return this.host.readOnly;\n    }\n    get disabled() {\n      return this.host.computedDisabled;\n    }\n    get invalid() {\n      return this.host.computedInvalid;\n    }\n    get focusable() {\n      return this.host.computedFocusable;\n    }\n    get inputMode() {\n      return 'text';\n    }\n    get value() {\n      var _a;\n      return ((_a = this.host.value) === null || _a === void 0 ? void 0 : _a.toString()) || '';\n    }\n    process(_input) {}\n  }\n  AbstractTuiTextfieldHost.ɵfac = function AbstractTuiTextfieldHost_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AbstractTuiTextfieldHost)(i0.ɵɵdirectiveInject(AbstractTuiControl));\n  };\n  AbstractTuiTextfieldHost.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: AbstractTuiTextfieldHost,\n    standalone: false\n  });\n  return AbstractTuiTextfieldHost;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO: Drop any\nfunction tuiFallbackAccessor(type) {\n  return (accessors, fallback) => (accessors === null || accessors === void 0 ? void 0 : accessors.find(accessor => accessor !== fallback && accessor.type === type)) || fallback;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass TuiPositionAccessor {}\n// TODO: Make fallback required\nfunction tuiPositionAccessorFor(type, fallback) {\n  return {\n    provide: TuiPositionAccessor,\n    deps: fallback ? [[new SkipSelf(), new Optional(), TuiPositionAccessor], fallback] : [[new SkipSelf(), new Optional(), TuiPositionAccessor]],\n    useFactory: tuiFallbackAccessor(type)\n  };\n}\nfunction tuiAsPositionAccessor(useExisting) {\n  return {\n    provide: TuiPositionAccessor,\n    multi: true,\n    useExisting\n  };\n}\n\n// TODO: Rename to getBoundingClientRect to match the DOM API\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass TuiRectAccessor {}\nfunction tuiRectAccessorFor(type, fallback) {\n  return {\n    provide: TuiRectAccessor,\n    deps: [[new SkipSelf(), new Optional(), TuiRectAccessor], fallback],\n    useFactory: tuiFallbackAccessor(type)\n  };\n}\nconst tuiFallbackRectAccessor = tuiFallbackAccessor;\nfunction tuiAsRectAccessor(useExisting) {\n  return {\n    provide: TuiRectAccessor,\n    multi: true,\n    useExisting\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTuiDriverDirective, AbstractTuiTextfieldHost, TuiDriver, TuiPositionAccessor, TuiRectAccessor, TuiVehicle, tuiAsDriver, tuiAsPositionAccessor, tuiAsRectAccessor, tuiAsVehicle, tuiFallbackAccessor, tuiFallbackRectAccessor, tuiPositionAccessorFor, tuiRectAccessorFor };\n//# sourceMappingURL=taiga-ui-core-abstract.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}