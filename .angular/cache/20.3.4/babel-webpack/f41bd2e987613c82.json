{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, HostBinding, Directive, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { NgControl, FormsModule } from '@angular/forms';\nimport { maskitoParseNumber } from '@maskito/kit';\nimport { tuiCreateToken, tuiProvideOptions, AbstractTuiNullableControl, tuiIsNativeFocused, tuiIsPresent, tuiClamp, TUI_IS_MOBILE, tuiAsFocusableItemAccessor, tuiAsControl } from '@taiga-ui/cdk';\nimport * as i2 from '@taiga-ui/core';\nimport { TUI_TEXTFIELD_WATCHED_CONTROLLER, TUI_NUMBER_FORMAT, TEXTFIELD_CONTROLLER_PROVIDER, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport * as i1 from '@taiga-ui/kit/components/input-number';\nimport { TuiInputNumberComponent, TuiInputNumberModule } from '@taiga-ui/kit/components/input-number';\nimport { TUI_PLUS_MINUS_TEXTS } from '@taiga-ui/kit/tokens';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from 'rxjs';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\n\n/** Default values for the input count options. */\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nfunction TuiInputCountComponent_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"section\", 2)(2, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.increaseValue());\n    })(\"mousedown\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_mousedown_2_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onButtonMouseDown($event, ctx_r1.plusButtonDisabled));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.decreaseValue());\n    })(\"mousedown\", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_mousedown_3_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onButtonMouseDown($event, ctx_r1.minusButtonDisabled));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const texts_r3 = ctx.ngIf;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r1.options.appearance)(\"disabled\", ctx_r1.plusButtonDisabled)(\"focusable\", false)(\"icon\", ctx_r1.iconUp)(\"title\", texts_r3[0]);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"appearance\", ctx_r1.options.appearance)(\"disabled\", ctx_r1.minusButtonDisabled)(\"focusable\", false)(\"icon\", ctx_r1.iconDown)(\"title\", texts_r3[1]);\n  }\n}\nfunction TuiInputCountComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TuiInputCountComponent_ng_container_3_ng_container_1_Template, 4, 10, \"ng-container\", 1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx_r1.minusTexts$));\n  }\n}\nconst TUI_INPUT_COUNT_DEFAULT_OPTIONS = {\n  icons: {\n    up: 'tuiIconPlus',\n    down: 'tuiIconMinus'\n  },\n  appearance: 'textfield',\n  hideButtons: false,\n  min: 0,\n  max: Number.MAX_SAFE_INTEGER,\n  step: 1,\n  postfix: ''\n};\n/**\n * Default parameters for input count component\n */\nconst TUI_INPUT_COUNT_OPTIONS = tuiCreateToken(TUI_INPUT_COUNT_DEFAULT_OPTIONS);\nfunction tuiInputCountOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_COUNT_OPTIONS, options, TUI_INPUT_COUNT_DEFAULT_OPTIONS);\n}\n\n/**\n * @deprecated use {@link TuiInputNumberComponent} with [step] instead\n */\nlet TuiInputCountComponent = /*#__PURE__*/(() => {\n  class TuiInputCountComponent extends AbstractTuiNullableControl {\n    constructor(control, cdr, textfieldController, minusTexts$, isMobile, options, numberFormat) {\n      super(control, cdr);\n      this.textfieldController = textfieldController;\n      this.minusTexts$ = minusTexts$;\n      this.isMobile = isMobile;\n      this.options = options;\n      this.numberFormat = numberFormat;\n      this.step = this.options.step;\n      this.min = this.options.min;\n      this.max = this.options.max;\n      this.hideButtons = this.options.hideButtons;\n      /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */\n      this.prefix = '';\n      /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */\n      this.postfix = this.options.postfix;\n    }\n    get computedMin() {\n      var _a;\n      return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;\n    }\n    get computedMax() {\n      var _a;\n      return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;\n    }\n    get buttonsHidden() {\n      return this.hideButtons || this.textfieldController.appearance === 'table';\n    }\n    get iconUp() {\n      return this.options.icons.up;\n    }\n    get iconDown() {\n      return this.options.icons.down;\n    }\n    get nativeFocusableElement() {\n      return !this.inputNumber || this.computedDisabled ? null : this.inputNumber.nativeFocusableElement;\n    }\n    get size() {\n      return this.textfieldController.size;\n    }\n    get focused() {\n      return tuiIsNativeFocused(this.nativeFocusableElement);\n    }\n    get minusButtonDisabled() {\n      return !this.interactive || tuiIsPresent(this.value) && this.value <= this.computedMin;\n    }\n    get plusButtonDisabled() {\n      return !this.interactive || tuiIsPresent(this.value) && this.value >= this.computedMax;\n    }\n    onButtonMouseDown(event, disabled = false) {\n      if (disabled || !this.nativeFocusableElement || this.isMobile) {\n        return;\n      }\n      event.preventDefault();\n      this.nativeFocusableElement.focus();\n    }\n    onFocused(focused) {\n      this.updateFocused(focused);\n    }\n    /**\n     * @deprecated\n     * TODO: drop in v4.0 as unused method\n     */\n    onInputNumberChange(value) {\n      this.value = value;\n    }\n    /** @deprecated */\n    onValueChange(value) {\n      this.value = maskitoParseNumber(value, this.numberFormat.decimalSeparator);\n    }\n    decreaseValue() {\n      if (this.readOnly) {\n        return;\n      }\n      const newValue = (this.value || 0) - this.step;\n      this.safeUpdateValue(newValue);\n    }\n    increaseValue() {\n      if (this.readOnly) {\n        return;\n      }\n      const newValue = (this.value || 0) + this.step;\n      this.safeUpdateValue(newValue);\n    }\n    onKeydown(event) {\n      switch (event.key) {\n        case 'ArrowUp':\n        case 'Up':\n          this.increaseValue();\n          event.preventDefault();\n          break;\n        case 'ArrowDown':\n        case 'Down':\n          this.decreaseValue();\n          event.preventDefault();\n          break;\n        default:\n          break;\n      }\n    }\n    safeUpdateValue(newValue) {\n      this.value = tuiClamp(newValue, this.computedMin, this.computedMax);\n    }\n  }\n  TuiInputCountComponent.ɵfac = function TuiInputCountComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputCountComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER), i0.ɵɵdirectiveInject(TUI_PLUS_MINUS_TEXTS), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(TUI_INPUT_COUNT_OPTIONS), i0.ɵɵdirectiveInject(TUI_NUMBER_FORMAT));\n  };\n  TuiInputCountComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputCountComponent,\n    selectors: [[\"tui-input-count\"]],\n    viewQuery: function TuiInputCountComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiInputNumberComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputNumber = _t.first);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function TuiInputCountComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n        i0.ɵɵclassProp(\"_hide-buttons\", ctx.buttonsHidden);\n      }\n    },\n    inputs: {\n      step: \"step\",\n      min: \"min\",\n      max: \"max\",\n      hideButtons: \"hideButtons\",\n      prefix: \"prefix\",\n      postfix: \"postfix\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputCountComponent), tuiAsControl(TuiInputCountComponent), TEXTFIELD_CONTROLLER_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 14,\n    consts: [[\"decimal\", \"never\", 1, \"t-textfield\", 3, \"ngModelChange\", \"focusedChange\", \"keydown\", \"disabled\", \"focusable\", \"max\", \"min\", \"nativeId\", \"postfix\", \"prefix\", \"pseudoActive\", \"pseudoFocus\", \"pseudoHover\", \"pseudoInvalid\", \"readOnly\", \"ngModel\"], [4, \"ngIf\"], [1, \"t-buttons\"], [\"automation-id\", \"tui-input-count__plus-button\", \"size\", \"s\", \"tuiIconButton\", \"\", \"type\", \"button\", 1, \"t-button\", \"t-button_plus\", 3, \"click\", \"mousedown\", \"appearance\", \"disabled\", \"focusable\", \"icon\", \"title\"], [\"automation-id\", \"tui-input-count__minus-button\", \"size\", \"s\", \"tuiIconButton\", \"\", \"type\", \"button\", 1, \"t-button\", \"t-button_minus\", 3, \"click\", \"mousedown\", \"appearance\", \"disabled\", \"focusable\", \"icon\", \"title\"]],\n    template: function TuiInputCountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-input-number\", 0);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function TuiInputCountComponent_Template_tui_input_number_ngModelChange_0_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputCountComponent_Template_tui_input_number_focusedChange_0_listener($event) {\n          return ctx.onFocused($event);\n        })(\"keydown\", function TuiInputCountComponent_Template_tui_input_number_keydown_0_listener($event) {\n          return ctx.onKeydown($event);\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, TuiInputCountComponent_ng_container_3_Template, 3, 3, \"ng-container\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.computedDisabled)(\"focusable\", ctx.focusable)(\"max\", ctx.computedMax)(\"min\", ctx.computedMin)(\"nativeId\", ctx.nativeId)(\"postfix\", ctx.postfix)(\"prefix\", ctx.prefix)(\"pseudoActive\", ctx.pseudoActive)(\"pseudoFocus\", ctx.pseudoFocus)(\"pseudoHover\", ctx.pseudoHover)(\"pseudoInvalid\", ctx.pseudoInvalid)(\"readOnly\", ctx.readOnly);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.value);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.buttonsHidden);\n      }\n    },\n    dependencies: [i1.TuiInputNumberComponent, i2.TuiButtonComponent, i1.TuiInputNumberDirective, i3.NgControlStatus, i3.NgModel, i4.NgIf, i4.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}[data-size=l][_nghost-%COMP%]{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-textfield[_ngcontent-%COMP%]{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}[_nghost-%COMP%]:not(._hide-buttons)   .t-textfield[_ngcontent-%COMP%]{border-top-right-radius:0;border-bottom-right-radius:0}.t-buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-left:.125rem;height:100%;border-radius:inherit}.t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem);border-radius:0}.t-buttons[_ngcontent-%COMP%]   .t-button_plus[_ngcontent-%COMP%]{margin-bottom:.125rem;border-top-right-radius:inherit}.t-buttons[_ngcontent-%COMP%]   .t-button_minus[_ngcontent-%COMP%]{border-bottom-right-radius:inherit}[data-size=l][_nghost-%COMP%]   .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-l) * .75)}\"],\n    changeDetection: 0\n  });\n  return TuiInputCountComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputCountDirective = /*#__PURE__*/(() => {\n  class TuiInputCountDirective extends AbstractTuiTextfieldHost {\n    onValueChange(value) {\n      this.host.onValueChange(value);\n    }\n    ngAfterViewInit() {\n      if (this.host.nativeFocusableElement) {\n        const {\n          nativeFocusableElement\n        } = this.host;\n        nativeFocusableElement.autocomplete = 'off';\n        nativeFocusableElement.inputMode = 'numeric';\n        nativeFocusableElement.maxLength = nativeFocusableElement.maxLength > -1 ? nativeFocusableElement.maxLength : 18;\n      }\n    }\n  }\n  TuiInputCountDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputCountDirective_BaseFactory;\n    return function TuiInputCountDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputCountDirective_BaseFactory || (ɵTuiInputCountDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputCountDirective)))(__ngFactoryType__ || TuiInputCountDirective);\n    };\n  })();\n  TuiInputCountDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputCountDirective,\n    selectors: [[\"tui-input-count\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputCountDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputCountDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @deprecated use {@link TuiInputNumberComponent} with [step] instead\n */\nlet TuiInputCountModule = /*#__PURE__*/(() => {\n  class TuiInputCountModule {}\n  TuiInputCountModule.ɵfac = function TuiInputCountModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputCountModule)();\n  };\n  TuiInputCountModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputCountModule\n  });\n  TuiInputCountModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, TuiInputNumberModule]]\n  });\n  return TuiInputCountModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_COUNT_DEFAULT_OPTIONS, TUI_INPUT_COUNT_OPTIONS, TuiInputCountComponent, TuiInputCountDirective, TuiInputCountModule, tuiInputCountOptionsProvider };\n//# sourceMappingURL=taiga-ui-kit-components-input-count.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}