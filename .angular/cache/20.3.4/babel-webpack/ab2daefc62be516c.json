{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, Directive, Inject, Component, ChangeDetectionStrategy, Input, HostBinding, HostListener, NgModule } from '@angular/core';\nimport * as i1 from '@taiga-ui/cdk';\nimport { TUI_SCROLL_REF, tuiCreateToken, tuiProvideOptions, tuiIsFirefox, tuiGetElementOffset, TUI_IS_IOS, TuiScrollControlsModule } from '@taiga-ui/cdk';\nimport { TUI_SCROLLABLE, TUI_SCROLL_INTO_VIEW } from '@taiga-ui/core/constants';\nimport { CSS, USER_AGENT } from '@ng-web-apis/common';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/** @deprecated import from `@taiga-ui/cdk` instead */\nconst _c0 = [\"*\"];\nfunction TuiScrollbarComponent_tui_scroll_controls_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tui-scroll-controls\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"t-hover-mode\", ctx_r0.options.mode === \"hover\");\n  }\n}\nconst SCROLL_REF_SELECTOR = '[tuiScrollRef]';\n/** @deprecated import from `@taiga-ui/cdk` instead */\nlet TuiScrollRefDirective = /*#__PURE__*/(() => {\n  class TuiScrollRefDirective {}\n  TuiScrollRefDirective.ɵfac = function TuiScrollRefDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiScrollRefDirective)();\n  };\n  TuiScrollRefDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiScrollRefDirective,\n    selectors: [[\"\", \"tuiScrollRef\", \"\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_SCROLL_REF,\n      useExisting: ElementRef\n    }])]\n  });\n  return TuiScrollRefDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiScrollableDirective = /*#__PURE__*/(() => {\n  class TuiScrollableDirective {\n    constructor(el) {\n      this.el = el;\n    }\n    ngOnInit() {\n      this.el.nativeElement.dispatchEvent(new CustomEvent(TUI_SCROLLABLE, {\n        bubbles: true,\n        detail: this.el.nativeElement\n      }));\n    }\n  }\n  TuiScrollableDirective.ɵfac = function TuiScrollableDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiScrollableDirective)(i0.ɵɵdirectiveInject(ElementRef));\n  };\n  TuiScrollableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiScrollableDirective,\n    selectors: [[\"\", \"tuiScrollable\", \"\"]],\n    standalone: false\n  });\n  return TuiScrollableDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst TUI_DEFAULT_SCROLLBAR_OPTIONS = {\n  mode: 'always'\n};\nconst TUI_SCROLLBAR_OPTIONS = tuiCreateToken(TUI_DEFAULT_SCROLLBAR_OPTIONS);\nfunction tuiScrollbarOptionsProvider(options) {\n  return tuiProvideOptions(TUI_SCROLLBAR_OPTIONS, options, TUI_DEFAULT_SCROLLBAR_OPTIONS);\n}\n\n// TODO: Remove all legacy code in 4.0\nlet TuiScrollbarComponent = /*#__PURE__*/(() => {\n  class TuiScrollbarComponent {\n    constructor(cssRef, el, userAgent, isIos, options) {\n      this.cssRef = cssRef;\n      this.el = el;\n      this.userAgent = userAgent;\n      this.isIos = isIos;\n      this.options = options;\n      this.isLegacy = !this.cssRef.supports('position', 'sticky') || tuiIsFirefox(this.userAgent) && !this.cssRef.supports('scrollbar-width', 'none');\n      this.hidden = false;\n      this.browserScrollRef = new ElementRef(this.el.nativeElement);\n    }\n    get delegated() {\n      return this.browserScrollRef.nativeElement !== this.el.nativeElement;\n    }\n    get showScrollbars() {\n      return !this.hidden && !this.isIos && (!this.isLegacy || this.delegated);\n    }\n    get showNative() {\n      return this.isLegacy && !this.hidden && !this.delegated;\n    }\n    onScrollable(element) {\n      this.browserScrollRef.nativeElement = element;\n    }\n    scrollIntoView(detail) {\n      var _a;\n      if (this.delegated) {\n        return;\n      }\n      const {\n        nativeElement\n      } = this.browserScrollRef;\n      const {\n        offsetTop,\n        offsetLeft\n      } = tuiGetElementOffset(nativeElement, detail);\n      const {\n        clientHeight,\n        clientWidth\n      } = nativeElement;\n      const {\n        offsetHeight,\n        offsetWidth\n      } = detail;\n      const scrollTop = offsetTop + offsetHeight / 2 - clientHeight / 2;\n      const scrollLeft = offsetLeft + offsetWidth / 2 - clientWidth / 2;\n      // ?. for our clients on Windows XP and Chrome 49\n      (_a = nativeElement.scrollTo) === null || _a === void 0 ? void 0 : _a.call(nativeElement, scrollLeft, scrollTop);\n    }\n  }\n  TuiScrollbarComponent.ɵfac = function TuiScrollbarComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiScrollbarComponent)(i0.ɵɵdirectiveInject(CSS), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(USER_AGENT), i0.ɵɵdirectiveInject(TUI_IS_IOS), i0.ɵɵdirectiveInject(TUI_SCROLLBAR_OPTIONS));\n  };\n  TuiScrollbarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiScrollbarComponent,\n    selectors: [[\"tui-scrollbar\"]],\n    hostVars: 2,\n    hostBindings: function TuiScrollbarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"tui-scrollable.stop\", function TuiScrollbarComponent_tui_scrollable_stop_HostBindingHandler($event) {\n          return ctx.onScrollable($event.detail);\n        })(\"tui-scroll-into-view.stop\", function TuiScrollbarComponent_tui_scroll_into_view_stop_HostBindingHandler($event) {\n          return ctx.scrollIntoView($event.detail);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"_legacy\", ctx.showNative);\n      }\n    },\n    inputs: {\n      hidden: \"hidden\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_SCROLL_REF,\n      deps: [TuiScrollbarComponent],\n      useFactory: ({\n        browserScrollRef\n      }) => browserScrollRef\n    }])],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 3,\n    consts: [[\"class\", \"t-bars\", 3, \"t-hover-mode\", 4, \"ngIf\"], [1, \"t-content\"], [1, \"t-bars\"]],\n    template: function TuiScrollbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, TuiScrollbarComponent_tui_scroll_controls_0_Template, 1, 2, \"tui-scroll-controls\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.showScrollbars);\n        i0.ɵɵadvance();\n        i0.ɵɵclassProp(\"t-content_delegated\", ctx.delegated);\n      }\n    },\n    dependencies: [i1.TuiScrollControlsComponent, i2.NgIf],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:flex;isolation:isolate;overflow:auto}[_nghost-%COMP%]:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}[_nghost-%COMP%]:not(._legacy)::-webkit-scrollbar, [_nghost-%COMP%]:not(._legacy)::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}._legacy[_nghost-%COMP%]{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){._legacy[_nghost-%COMP%]::-webkit-scrollbar, ._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}._legacy[_nghost-%COMP%]::-webkit-scrollbar{background-color:transparent}._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}[_nghost-%COMP%]   .t-hover-mode[_ngcontent-%COMP%]:not(:active){transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;opacity:0}[_nghost-%COMP%]:hover   .t-hover-mode[_ngcontent-%COMP%]{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;opacity:1}.t-content[_ngcontent-%COMP%]{isolation:isolate;flex:1;flex-basis:auto;width:100%;height:-webkit-max-content;height:max-content}.t-content_delegated[_ngcontent-%COMP%]{height:100%}.t-bars[_ngcontent-%COMP%]{color:var(--tui-text-01)}\"],\n    changeDetection: 0\n  });\n  return TuiScrollbarComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiScrollbarModule = /*#__PURE__*/(() => {\n  class TuiScrollbarModule {}\n  TuiScrollbarModule.ɵfac = function TuiScrollbarModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiScrollbarModule)();\n  };\n  TuiScrollbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiScrollbarModule\n  });\n  TuiScrollbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiScrollControlsModule]]\n  });\n  return TuiScrollbarModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SCROLL_REF_SELECTOR, TUI_DEFAULT_SCROLLBAR_OPTIONS, TUI_SCROLLBAR_OPTIONS, TuiScrollRefDirective, TuiScrollableDirective, TuiScrollbarComponent, TuiScrollbarModule, tuiScrollbarOptionsProvider };\n//# sourceMappingURL=taiga-ui-core-components-scrollbar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}