{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { ElementRef, Directive, Self, Inject, ContentChildren, NgModule } from '@angular/core';\nimport * as i1 from '@taiga-ui/cdk';\nimport { EMPTY_QUERY, tuiTypedFromEvent, tuiQueryListChanges, tuiPreventDefault, tuiGetClosestFocusable, TuiDestroyService, tuiPure } from '@taiga-ui/cdk';\nimport { TuiDropdownDirective } from '@taiga-ui/core';\nimport { merge, EMPTY } from 'rxjs';\nimport { takeUntil, switchMap, take, filter, tap, map, shareReplay, debounceTime } from 'rxjs/operators';\nlet TuiDataListDropdownManagerDirective = /*#__PURE__*/(() => {\n  class TuiDataListDropdownManagerDirective {\n    constructor(destroy$) {\n      this.destroy$ = destroy$;\n      this.dropdowns = EMPTY_QUERY;\n      this.els = EMPTY_QUERY;\n    }\n    ngAfterViewInit() {\n      this.right$.pipe(takeUntil(this.destroy$)).subscribe(index => {\n        this.tryToFocus(index);\n      });\n      merge(this.immediate$, this.debounce$).pipe(switchMap(active => {\n        this.dropdowns.forEach((dropdown, index) => {\n          dropdown.toggle(index === active);\n        });\n        const element = this.els.get(active);\n        const dropdown = this.dropdowns.get(active);\n        if (!element || !(dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef)) {\n          return EMPTY;\n        }\n        const {\n          nativeElement\n        } = dropdown.dropdownBoxRef.location;\n        const mouseEnter$ = tuiTypedFromEvent(nativeElement, 'mouseenter').pipe(take(1));\n        const esc$ = merge(tuiTypedFromEvent(element.nativeElement, 'keydown'), tuiTypedFromEvent(nativeElement, 'keydown')).pipe(filter(({\n          key\n        }) => key === 'Escape'));\n        return merge(mouseEnter$, esc$).pipe(tap(event => {\n          if (dropdown.dropdownBoxRef) {\n            event.stopPropagation();\n          }\n          element.nativeElement.focus();\n          dropdown.toggle('offsetX' in event);\n        }));\n      }), takeUntil(this.destroy$)).subscribe();\n    }\n    get elements$() {\n      return tuiQueryListChanges(this.els).pipe(map(array => array.map(({\n        nativeElement\n      }) => nativeElement)), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n    get right$() {\n      return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => tuiTypedFromEvent(element, 'keydown').pipe(filter(({\n        key\n      }) => key === 'ArrowRight'), tuiPreventDefault(), map(() => index))))));\n    }\n    get immediate$() {\n      return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => tuiTypedFromEvent(element, 'click').pipe(map(() => index))))));\n    }\n    get debounce$() {\n      return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => merge(tuiTypedFromEvent(element, 'focus'), tuiTypedFromEvent(element, 'blur')).pipe(filter(({\n        relatedTarget\n      }) => this.notInDropdown(relatedTarget, index)), map(({\n        type\n      }) => type === 'focus' ? index : NaN))))), debounceTime(300));\n    }\n    notInDropdown(element, index) {\n      var _a, _b;\n      return !((_b = (_a = this.dropdowns.get(index)) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement.contains(element));\n    }\n    tryToFocus(index) {\n      var _a, _b;\n      const content = (_b = (_a = this.dropdowns.get(index)) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;\n      if (!content) {\n        return;\n      }\n      // First item is focus trap\n      const focusTrap = tuiGetClosestFocusable({\n        initial: content,\n        root: content\n      });\n      const item = tuiGetClosestFocusable({\n        initial: focusTrap || content,\n        root: content\n      });\n      if (item) {\n        item.focus();\n      }\n    }\n  }\n  TuiDataListDropdownManagerDirective.ɵfac = function TuiDataListDropdownManagerDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiDataListDropdownManagerDirective)(i0.ɵɵdirectiveInject(TuiDestroyService, 2));\n  };\n  TuiDataListDropdownManagerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiDataListDropdownManagerDirective,\n    selectors: [[\"tui-data-list\", \"tuiDataListDropdownManager\", \"\"]],\n    contentQueries: function TuiDataListDropdownManagerDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TuiDropdownDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, TuiDropdownDirective, 5, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdowns = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.els = _t);\n      }\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService])]\n  });\n  __decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, \"elements$\", null);\n  __decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, \"right$\", null);\n  __decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, \"immediate$\", null);\n  __decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, \"debounce$\", null);\n  return TuiDataListDropdownManagerDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiDataListDropdownManagerModule = /*#__PURE__*/(() => {\n  class TuiDataListDropdownManagerModule {}\n  TuiDataListDropdownManagerModule.ɵfac = function TuiDataListDropdownManagerModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiDataListDropdownManagerModule)();\n  };\n  TuiDataListDropdownManagerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiDataListDropdownManagerModule\n  });\n  TuiDataListDropdownManagerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiDataListDropdownManagerModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiDataListDropdownManagerDirective, TuiDataListDropdownManagerModule };\n//# sourceMappingURL=taiga-ui-kit-directives-data-list-dropdown-manager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}