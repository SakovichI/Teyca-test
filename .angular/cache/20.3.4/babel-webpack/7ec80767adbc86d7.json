{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ChangeDetectorRef, TemplateRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, Output, ContentChild, HostBinding, Directive, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { maskitoTransform, MASKITO_DEFAULT_OPTIONS } from '@maskito/core';\nimport { maskitoPrefixPostprocessorGenerator, maskitoCaretGuard } from '@maskito/kit';\nimport * as i2 from '@taiga-ui/cdk';\nimport { tuiCreateToken, tuiProvideOptions, AbstractTuiControl, tuiIsNativeFocused, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure, TuiActiveZoneModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_MASK_SYMBOLS_REGEXP, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_SIZE, tuiAsDataListHost, TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport * as i3 from '@taiga-ui/kit/directives';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i4 from '@maskito/angular';\nimport { MaskitoModule } from '@maskito/angular';\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst TUI_INPUT_PHONE_DEFAULT_OPTIONS = {\n  phoneMaskAfterCountryCode: '### ###-##-##',\n  allowText: false,\n  countryCode: '+7'\n};\n/**\n * Default parameters for input phone component\n */\nconst TUI_INPUT_PHONE_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_DEFAULT_OPTIONS);\nfunction tuiInputPhoneOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_PHONE_OPTIONS, options, TUI_INPUT_PHONE_DEFAULT_OPTIONS);\n}\nconst countDigits = value => value.replace(/\\D/g, '').length;\n/**\n * `InputPhone` component sets country code as non-removable prefix.\n * This prefix appears on focus and cannot be erased.\n * But users sometimes can copy complete phone number (from any different source)\n * and try to insert the whole string inside our `InputPhone` textfield.\n * This preprocessor helps to avoid country prefix duplication on paste/drop/autofill events.\n */\nfunction tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode) {\n  const completePhoneLength = (countryCode + phoneMaskAfterCountryCode).replace(/[^#\\d]+/g, '').length;\n  const trimCountryPrefix = value => countryCode === '+7' ? value.replace(/^(\\+?7?\\s?8?)\\s?/, '') : value.replace(new RegExp(`^(\\\\+?${countryCode.replace('+', '')}?)\\\\s?`), '');\n  return ({\n    elementState,\n    data\n  }) => {\n    const {\n      value,\n      selection\n    } = elementState;\n    return {\n      elementState: {\n        selection,\n        value:\n        /**\n         * The only possible case when `value` includes digits more\n         * than mask expression allows – browser autofill.\n         * It means that we are inside `input`-event\n         * and mask are ready to reject \"extra\" characters.\n         * We should cut leading country prefix to save trailing characters!\n         */\n        countDigits(value) > completePhoneLength ? trimCountryPrefix(value) : value\n      },\n      data: countDigits(data) >= completePhoneLength ?\n      /**\n       * User tries to insert/drop the complete phone number (with country prefix).\n       * We should drop already existing non-removable prefix.\n       */\n      trimCountryPrefix(data) : data\n    };\n  };\n}\n\n/**\n * Create {@link https://maskito.dev/core-concepts/mask-expression pattern mask expression} for phone number\n *\n * @example\n * tuiCreatePhoneMaskExpression('+1', '(###) ###-####');\n */\nfunction tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode) {\n  return [...countryCode.split(''), ' ', ...phoneMaskAfterCountryCode.replace(/[^#\\- ()]+/g, '').split('').map(item => item === '#' ? /\\d/ : item)];\n}\nfunction isText(value) {\n  return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));\n}\nlet TuiInputPhoneComponent = /*#__PURE__*/(() => {\n  class TuiInputPhoneComponent extends AbstractTuiControl {\n    constructor(control, cdr, textfieldCleaner, options, textfieldSize) {\n      super(control, cdr);\n      this.textfieldCleaner = textfieldCleaner;\n      this.options = options;\n      this.textfieldSize = textfieldSize;\n      this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;\n      this.allowText = this.options.allowText;\n      this.search = '';\n      this.searchChange = new EventEmitter();\n      this.countryCode = this.options.countryCode;\n      this.open = false;\n    }\n    set countryCodeSetter(newCountryCode) {\n      const prevCountryCode = this.countryCode;\n      this.countryCode = newCountryCode;\n      this.updateValueWithNewCountryCode(prevCountryCode, newCountryCode);\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get nativeFocusableElement() {\n      return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;\n    }\n    get focused() {\n      return tuiIsNativeFocused(this.nativeFocusableElement) || !!this.dropdown && this.dropdown.focused;\n    }\n    get nativeValue() {\n      var _a;\n      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || maskitoTransform(this.value, this.maskOptions);\n    }\n    set nativeValue(value) {\n      if (this.nativeFocusableElement) {\n        this.nativeFocusableElement.value = value;\n      }\n    }\n    get inputMode() {\n      return this.allowText ? 'text' : 'numeric';\n    }\n    get canOpen() {\n      return this.interactive && !!this.datalist;\n    }\n    get canClean() {\n      return this.nativeValue !== this.nonRemovablePrefix && this.textfieldCleaner.cleaner;\n    }\n    get maskOptions() {\n      return this.calculateMask(this.countryCode, this.phoneMaskAfterCountryCode, this.nonRemovablePrefix, this.allowText);\n    }\n    onActiveZone(active) {\n      this.updateFocused(active);\n      if (active && !this.nativeValue && !this.readOnly && !this.allowText) {\n        this.updateSearch(this.nonRemovablePrefix);\n        this.nativeValue = this.nonRemovablePrefix;\n        return;\n      }\n      if (this.nativeValue === this.nonRemovablePrefix || this.isTextValue) {\n        this.updateSearch('');\n        this.nativeValue = '';\n        return;\n      }\n      if (!active && !this.allowText && this.nativeFocusableElement) {\n        this.nativeValue = this.nativeValue.replace(/\\D$/, '');\n      }\n    }\n    onValueChange(value) {\n      const parsed = isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, '').slice(0, this.maxPhoneLength);\n      this.updateSearch(parsed);\n      this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;\n      this.open = true;\n      if (!this.value && !this.allowText) {\n        this.nativeValue = this.nonRemovablePrefix;\n      }\n    }\n    handleOption(item) {\n      this.focusInput();\n      this.value = item;\n      this.nativeValue = maskitoTransform(this.value, this.maskOptions);\n      this.updateSearch('');\n      this.open = false;\n    }\n    setDisabledState() {\n      super.setDisabledState();\n      this.open = false;\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = maskitoTransform(value || '', this.maskOptions);\n      this.updateSearch('');\n    }\n    getFallbackValue() {\n      return '';\n    }\n    get nonRemovablePrefix() {\n      return `${this.countryCode} `;\n    }\n    get maxPhoneLength() {\n      return this.countryCode.length + this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length;\n    }\n    get isTextValue() {\n      return !!this.search && isText(this.search);\n    }\n    calculateMask(countryCode, phoneMaskAfterCountryCode, nonRemovablePrefix, allowText) {\n      const mask = tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode);\n      const preprocessors = [tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode)];\n      return allowText ? {\n        mask: ({\n          value\n        }) => isText(value) && value !== '+' ? MASKITO_DEFAULT_OPTIONS.mask : mask,\n        preprocessors\n      } : {\n        mask,\n        preprocessors,\n        postprocessors: [maskitoPrefixPostprocessorGenerator(nonRemovablePrefix)],\n        plugins: [maskitoCaretGuard((value, [from, to]) => [from === to ? nonRemovablePrefix.length : 0, value.length])]\n      };\n    }\n    focusInput() {\n      if (this.nativeFocusableElement) {\n        this.nativeFocusableElement.focus({\n          preventScroll: true\n        });\n      }\n    }\n    updateSearch(search) {\n      if (this.search === search) {\n        return;\n      }\n      this.search = search;\n      this.searchChange.emit(search);\n    }\n    updateValueWithNewCountryCode(prevCountryCode, newCountryCode) {\n      if (!this.isTextValue) {\n        this.value = this.value.replace(prevCountryCode, newCountryCode);\n        this.nativeValue = maskitoTransform(this.value, this.maskOptions);\n      }\n    }\n  }\n  TuiInputPhoneComponent.ɵfac = function TuiInputPhoneComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputPhoneComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_CLEANER), i0.ɵɵdirectiveInject(TUI_INPUT_PHONE_OPTIONS), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));\n  };\n  TuiInputPhoneComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputPhoneComponent,\n    selectors: [[\"tui-input-phone\"]],\n    contentQueries: function TuiInputPhoneComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datalist = _t.first);\n      }\n    },\n    viewQuery: function TuiInputPhoneComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiHostedDropdownComponent, 5);\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputPhoneComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      countryCodeSetter: [0, \"countryCode\", \"countryCodeSetter\"],\n      phoneMaskAfterCountryCode: \"phoneMaskAfterCountryCode\",\n      allowText: \"allowText\",\n      search: \"search\"\n    },\n    outputs: {\n      searchChange: \"searchChange\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputPhoneComponent), tuiAsControl(TuiInputPhoneComponent), tuiAsDataListHost(TuiInputPhoneComponent)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 13,\n    consts: [[1, \"t-hosted\", 3, \"openChange\", \"tuiActiveZoneChange\", \"canOpen\", \"content\", \"open\"], [\"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"valueChange\", \"disabled\", \"focusable\", \"invalid\", \"maskito\", \"nativeId\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldCleaner\", \"value\"]],\n    template: function TuiInputPhoneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n        i0.ɵɵtwoWayListener(\"openChange\", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.open, $event) || (ctx.open = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"tuiActiveZoneChange\", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {\n          return ctx.onActiveZone($event);\n        });\n        i0.ɵɵelementStart(1, \"tui-primitive-textfield\", 1);\n        i0.ɵɵtwoWayListener(\"valueChange\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.nativeValue, $event) || (ctx.nativeValue = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"valueChange\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n          return ctx.onValueChange($event);\n        });\n        i0.ɵɵprojection(2);\n        i0.ɵɵprojection(3, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"canOpen\", ctx.canOpen)(\"content\", ctx.datalist || \"\");\n        i0.ɵɵtwoWayProperty(\"open\", ctx.open);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"disabled\", ctx.computedDisabled)(\"focusable\", ctx.focusable)(\"invalid\", ctx.computedInvalid)(\"maskito\", ctx.maskOptions)(\"nativeId\", ctx.nativeId)(\"pseudoFocus\", ctx.computedFocused)(\"pseudoHover\", ctx.pseudoHover)(\"readOnly\", ctx.readOnly)(\"tuiTextfieldCleaner\", ctx.canClean);\n        i0.ɵɵtwoWayProperty(\"value\", ctx.nativeValue);\n      }\n    },\n    dependencies: [i1.TuiHostedDropdownComponent, i1.TuiPrimitiveTextfieldComponent, i2.TuiActiveZoneDirective, i1.TuiPrimitiveTextfieldDirective, i3.TuiValueAccessorDirective, i4.MaskitoDirective, i1.TuiTextfieldCleanerDirective],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputPhoneComponent.prototype, \"calculateMask\", null);\n  return TuiInputPhoneComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputPhoneDirective = /*#__PURE__*/(() => {\n  class TuiInputPhoneDirective extends AbstractTuiTextfieldHost {\n    get value() {\n      return this.host.nativeValue;\n    }\n    onValueChange(value) {\n      this.host.onValueChange(value);\n    }\n    process(input) {\n      this.input = input;\n    }\n    ngDoCheck() {\n      if (!this.input) {\n        return;\n      }\n      this.input.type = 'tel';\n      this.input.inputMode = this.host.inputMode;\n    }\n  }\n  TuiInputPhoneDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputPhoneDirective_BaseFactory;\n    return function TuiInputPhoneDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputPhoneDirective_BaseFactory || (ɵTuiInputPhoneDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputPhoneDirective)))(__ngFactoryType__ || TuiInputPhoneDirective);\n    };\n  })();\n  TuiInputPhoneDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputPhoneDirective,\n    selectors: [[\"tui-input-phone\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputPhoneDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputPhoneDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputPhoneModule = /*#__PURE__*/(() => {\n  class TuiInputPhoneModule {}\n  TuiInputPhoneModule.ɵfac = function TuiInputPhoneModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputPhoneModule)();\n  };\n  TuiInputPhoneModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputPhoneModule\n  });\n  TuiInputPhoneModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[MaskitoModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule]]\n  });\n  return TuiInputPhoneModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_DEFAULT_OPTIONS, TUI_INPUT_PHONE_OPTIONS, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, tuiInputPhoneOptionsProvider };\n//# sourceMappingURL=taiga-ui-kit-components-input-phone.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}