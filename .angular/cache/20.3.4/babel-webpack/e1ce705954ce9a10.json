{"ast":null,"code":"const MASKITO_DEFAULT_ELEMENT_PREDICATE = e => e.querySelector('input,textarea') || e;\nconst MASKITO_DEFAULT_OPTIONS = {\n  mask: /^.*$/,\n  preprocessors: [],\n  postprocessors: [],\n  plugins: [],\n  overwriteMode: 'shift'\n};\nclass MaskHistory {\n  constructor() {\n    this.now = null;\n    this.past = [];\n    this.future = [];\n  }\n  undo() {\n    const state = this.past.pop();\n    if (state && this.now) {\n      this.future.push(this.now);\n      this.updateElement(state, 'historyUndo');\n    }\n  }\n  redo() {\n    const state = this.future.pop();\n    if (state && this.now) {\n      this.past.push(this.now);\n      this.updateElement(state, 'historyRedo');\n    }\n  }\n  updateHistory(state) {\n    if (!this.now) {\n      this.now = state;\n      return;\n    }\n    const isValueChanged = this.now.value !== state.value;\n    const isSelectionChanged = this.now.selection.some((item, index) => item !== state.selection[index]);\n    if (!isValueChanged && !isSelectionChanged) {\n      return;\n    }\n    if (isValueChanged) {\n      this.past.push(this.now);\n      this.future = [];\n    }\n    this.now = state;\n  }\n  updateElement(state, inputType) {\n    this.now = state;\n    this.updateElementState(state, {\n      inputType,\n      data: null\n    });\n  }\n}\nfunction areElementValuesEqual(sampleState, ...states) {\n  return states.every(({\n    value\n  }) => value === sampleState.value);\n}\nfunction areElementStatesEqual(sampleState, ...states) {\n  return states.every(({\n    value,\n    selection\n  }) => value === sampleState.value && selection[0] === sampleState.selection[0] && selection[1] === sampleState.selection[1]);\n}\nfunction applyOverwriteMode({\n  value,\n  selection\n}, newCharacters, mode) {\n  const [from, to] = selection;\n  const computedMode = typeof mode === 'function' ? mode({\n    value,\n    selection\n  }) : mode;\n  return {\n    value,\n    selection: computedMode === 'replace' ? [from, from + newCharacters.length] : [from, to]\n  };\n}\nfunction isFixedCharacter(char) {\n  return typeof char === 'string';\n}\nfunction getLeadingFixedCharacters(mask, validatedValuePart, newCharacter, initialElementState) {\n  let leadingFixedCharacters = '';\n  for (let i = validatedValuePart.length; i < mask.length; i++) {\n    const charConstraint = mask[i];\n    const isInitiallyExisted = (initialElementState === null || initialElementState === void 0 ? void 0 : initialElementState.value[i]) === charConstraint;\n    if (!isFixedCharacter(charConstraint) || charConstraint === newCharacter && !isInitiallyExisted) {\n      return leadingFixedCharacters;\n    }\n    leadingFixedCharacters += charConstraint;\n  }\n  return leadingFixedCharacters;\n}\nfunction validateValueWithMask(value, maskExpression) {\n  if (Array.isArray(maskExpression)) {\n    return value.length === maskExpression.length && Array.from(value).every((char, i) => {\n      const charConstraint = maskExpression[i];\n      return isFixedCharacter(charConstraint) ? char === charConstraint : char.match(charConstraint);\n    });\n  }\n  return maskExpression.test(value);\n}\nfunction guessValidValueByPattern(elementState, mask, initialElementState) {\n  let maskedFrom = null;\n  let maskedTo = null;\n  const maskedValue = Array.from(elementState.value).reduce((validatedCharacters, char, charIndex) => {\n    const leadingCharacters = getLeadingFixedCharacters(mask, validatedCharacters, char, initialElementState);\n    const newValidatedChars = validatedCharacters + leadingCharacters;\n    const charConstraint = mask[newValidatedChars.length];\n    if (isFixedCharacter(charConstraint)) {\n      return newValidatedChars + charConstraint;\n    }\n    if (!char.match(charConstraint)) {\n      return newValidatedChars;\n    }\n    if (maskedFrom === null && charIndex >= elementState.selection[0]) {\n      maskedFrom = newValidatedChars.length;\n    }\n    if (maskedTo === null && charIndex >= elementState.selection[1]) {\n      maskedTo = newValidatedChars.length;\n    }\n    return newValidatedChars + char;\n  }, '');\n  const trailingFixedCharacters = getLeadingFixedCharacters(mask, maskedValue, '', initialElementState);\n  return {\n    value: validateValueWithMask(maskedValue + trailingFixedCharacters, mask) ? maskedValue + trailingFixedCharacters : maskedValue,\n    selection: [maskedFrom !== null && maskedFrom !== void 0 ? maskedFrom : maskedValue.length, maskedTo !== null && maskedTo !== void 0 ? maskedTo : maskedValue.length]\n  };\n}\nfunction guessValidValueByRegExp({\n  value,\n  selection\n}, maskRegExp) {\n  const [from, to] = selection;\n  let newFrom = from;\n  let newTo = to;\n  const validatedValue = Array.from(value).reduce((validatedValuePart, char, i) => {\n    const newPossibleValue = validatedValuePart + char;\n    if (from === i) {\n      newFrom = validatedValuePart.length;\n    }\n    if (to === i) {\n      newTo = validatedValuePart.length;\n    }\n    return newPossibleValue.match(maskRegExp) ? newPossibleValue : validatedValuePart;\n  }, '');\n  return {\n    value: validatedValue,\n    selection: [newFrom, newTo]\n  };\n}\nfunction calibrateValueByMask(elementState, mask, initialElementState = null) {\n  if (validateValueWithMask(elementState.value, mask)) {\n    return elementState;\n  }\n  const {\n    value,\n    selection\n  } = Array.isArray(mask) ? guessValidValueByPattern(elementState, mask, initialElementState) : guessValidValueByRegExp(elementState, mask);\n  return {\n    selection,\n    value: Array.isArray(mask) ? value.slice(0, mask.length) : value\n  };\n}\nfunction removeFixedMaskCharacters(initialElementState, mask) {\n  if (!Array.isArray(mask)) {\n    return initialElementState;\n  }\n  const [from, to] = initialElementState.selection;\n  const selection = [];\n  const unmaskedValue = Array.from(initialElementState.value).reduce((rawValue, char, i) => {\n    const charConstraint = mask[i];\n    if (i === from) {\n      selection.push(rawValue.length);\n    }\n    if (i === to) {\n      selection.push(rawValue.length);\n    }\n    return isFixedCharacter(charConstraint) && charConstraint === char ? rawValue : rawValue + char;\n  }, '');\n  if (selection.length < 2) {\n    selection.push(...new Array(2 - selection.length).fill(unmaskedValue.length));\n  }\n  return {\n    value: unmaskedValue,\n    selection: [selection[0], selection[1]]\n  };\n}\nclass MaskModel {\n  constructor(initialElementState, maskOptions) {\n    this.initialElementState = initialElementState;\n    this.maskOptions = maskOptions;\n    this.value = '';\n    this.selection = [0, 0];\n    const {\n      value,\n      selection\n    } = calibrateValueByMask(initialElementState, this.getMaskExpression(initialElementState));\n    this.value = value;\n    this.selection = selection;\n  }\n  addCharacters([from, to], newCharacters) {\n    const {\n      value\n    } = this;\n    const maskExpression = this.getMaskExpression({\n      value: value.slice(0, from) + newCharacters + value.slice(to),\n      selection: [from + newCharacters.length, from + newCharacters.length]\n    });\n    const initialElementState = {\n      value,\n      selection: [from, to]\n    };\n    const unmaskedElementState = removeFixedMaskCharacters(initialElementState, maskExpression);\n    const [unmaskedFrom, unmaskedTo] = applyOverwriteMode(unmaskedElementState, newCharacters, this.maskOptions.overwriteMode).selection;\n    const newUnmaskedLeadingValuePart = unmaskedElementState.value.slice(0, unmaskedFrom) + newCharacters;\n    const newCaretIndex = newUnmaskedLeadingValuePart.length;\n    const maskedElementState = calibrateValueByMask({\n      value: newUnmaskedLeadingValuePart + unmaskedElementState.value.slice(unmaskedTo),\n      selection: [newCaretIndex, newCaretIndex]\n    }, maskExpression, initialElementState);\n    const isInvalidCharsInsertion =\n    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n    value.slice(0, unmaskedFrom) === calibrateValueByMask({\n      value: newUnmaskedLeadingValuePart,\n      selection: [newCaretIndex, newCaretIndex]\n    }, maskExpression, initialElementState).value;\n    if (isInvalidCharsInsertion || areElementStatesEqual(this, maskedElementState) // If typing new characters does not change value\n    ) {\n      throw new Error('Invalid mask value');\n    }\n    this.value = maskedElementState.value;\n    this.selection = maskedElementState.selection;\n  }\n  deleteCharacters([from, to]) {\n    if (from === to || !to) {\n      return;\n    }\n    const {\n      value\n    } = this;\n    const maskExpression = this.getMaskExpression({\n      value: value.slice(0, from) + value.slice(to),\n      selection: [from, from]\n    });\n    const initialElementState = {\n      value,\n      selection: [from, to]\n    };\n    const unmaskedElementState = removeFixedMaskCharacters(initialElementState, maskExpression);\n    const [unmaskedFrom, unmaskedTo] = unmaskedElementState.selection;\n    const newUnmaskedValue = unmaskedElementState.value.slice(0, unmaskedFrom) + unmaskedElementState.value.slice(unmaskedTo);\n    const maskedElementState = calibrateValueByMask({\n      value: newUnmaskedValue,\n      selection: [unmaskedFrom, unmaskedFrom]\n    }, maskExpression, initialElementState);\n    this.value = maskedElementState.value;\n    this.selection = maskedElementState.selection;\n  }\n  getMaskExpression(elementState) {\n    const {\n      mask\n    } = this.maskOptions;\n    return typeof mask === 'function' ? mask(elementState) : mask;\n  }\n}\nclass EventListener {\n  constructor(element) {\n    this.element = element;\n    this.listeners = [];\n  }\n  listen(eventType, fn, options) {\n    const untypedFn = fn;\n    this.element.addEventListener(eventType, untypedFn, options);\n    this.listeners.push(() => this.element.removeEventListener(eventType, untypedFn));\n  }\n  destroy() {\n    this.listeners.forEach(stopListen => stopListen());\n  }\n}\n\n/**\r\n * Checks if the passed keyboard event match the required hotkey.\r\n *\r\n * We intentionally use legacy {@link KeyboardEvent#keyCode `keyCode`} property. It is more\r\n * \"keyboard-layout\"-independent than {@link KeyboardEvent#key `key`} or {@link KeyboardEvent#code `code`} properties.\r\n *\r\n * @example\r\n * input.addEventListener('keydown', (event) => {\r\n *     if (isHotkey(event, HotkeyModifier.CTRL | HotkeyModifier.SHIFT, HotkeyCode.Z)) {\r\n *         // redo hotkey pressed\r\n *     }\r\n * })\r\n *\r\n * @see {@link https://github.com/taiga-family/maskito/issues/315 `KeyboardEvent#code` issue}\r\n *\r\n * @return will return `true` only if the {@link HotkeyCode} matches and only the necessary\r\n * {@link HotkeyModifier modifiers} have been pressed\r\n */\nfunction isHotkey(event, modifiers, hotkeyCode) {\n  return event.ctrlKey === !!(modifiers & 1\n  /* CTRL */) && event.altKey === !!(modifiers & 2\n  /* ALT */) && event.shiftKey === !!(modifiers & 4\n  /* SHIFT */) && event.metaKey === !!(modifiers & 8\n  /* META */) && event.keyCode === hotkeyCode;\n}\nfunction isRedo(event) {\n  return isHotkey(event, 1\n  /* CTRL */, 89\n  /* Y */) ||\n  // Windows\n  isHotkey(event, 1\n  /* CTRL */ | 4\n  /* SHIFT */, 90\n  /* Z */) ||\n  // Windows & Android\n  isHotkey(event, 8\n  /* META */ | 4\n  /* SHIFT */, 90\n  /* Z */) // macOS & iOS\n  ;\n}\nfunction isUndo(event) {\n  return isHotkey(event, 1\n  /* CTRL */, 90\n  /* Z */) ||\n  // Windows & Android\n  isHotkey(event, 8\n  /* META */, 90\n  /* Z */) // macOS & iOS\n  ;\n}\n\n/**\r\n * \"beforeinput\" is more appropriate event for preprocessing of the input masking (than `keydown`):\r\n * - `keydown` is not triggered by predictive text from native mobile keyboards.\r\n * - `keydown` is triggered by system key combinations (we don't need them, and they should be manually filtered).\r\n * - Dropping text inside input triggers `beforeinput` (but not `keydown`).\r\n * ___\r\n * \"beforeinput\" is not supported by Chrome 49+ (only from 60+) and by Firefox 52+ (only from 87+).\r\n *\r\n * @see https://caniuse.com/?search=beforeinput\r\n * @see https://taiga-ui.dev/browser-support\r\n */\nfunction isBeforeInputEventSupported(element) {\n  return 'onbeforeinput' in element;\n}\nfunction isEventProducingCharacter({\n  key,\n  ctrlKey,\n  metaKey,\n  altKey\n}) {\n  const isSystemKeyCombinations = ctrlKey || metaKey || altKey;\n  const isSingleUnicodeChar = /^.$/u.test(key); // 4-byte characters case (e.g. smile)\n\n  return !isSystemKeyCombinations && key !== 'Backspace' && isSingleUnicodeChar;\n}\nfunction getLineSelection({\n  value,\n  selection\n}, isForward) {\n  const [from, to] = selection;\n  if (from !== to) {\n    return [from, to];\n  }\n  const nearestBreak = isForward ? value.slice(from).indexOf('\\n') + 1 || value.length : value.slice(0, to).lastIndexOf('\\n') + 1;\n  const selectFrom = isForward ? from : nearestBreak;\n  const selectTo = isForward ? nearestBreak : to;\n  return [selectFrom, selectTo];\n}\nfunction getNotEmptySelection({\n  value,\n  selection\n}, isForward) {\n  const [from, to] = selection;\n  if (from !== to) {\n    return [from, to];\n  }\n  const notEmptySelection = isForward ? [from, to + 1] : [from - 1, to];\n  return notEmptySelection.map(x => Math.min(Math.max(x, 0), value.length));\n}\nconst TRAILING_SPACES_REG = /\\s+$/g;\nconst LEADING_SPACES_REG = /^\\s+/g;\nconst SPACE_REG = /\\s/;\nfunction getWordSelection({\n  value,\n  selection\n}, isForward) {\n  const [from, to] = selection;\n  if (from !== to) {\n    return [from, to];\n  }\n  if (isForward) {\n    const valueAfterSelectionStart = value.slice(from);\n    const [leadingSpaces] = valueAfterSelectionStart.match(LEADING_SPACES_REG) || [''];\n    const nearestWordEndIndex = valueAfterSelectionStart.replace(LEADING_SPACES_REG, '') // TODO replace with `String.trimStart` after bumping Firefox to 61+\n    .search(SPACE_REG);\n    return [from, nearestWordEndIndex !== -1 ? from + leadingSpaces.length + nearestWordEndIndex : value.length];\n  }\n  const valueBeforeSelectionEnd = value.slice(0, to);\n  const [trailingSpaces] = valueBeforeSelectionEnd.match(TRAILING_SPACES_REG) || [''];\n  const selectedWordLength = valueBeforeSelectionEnd.replace(TRAILING_SPACES_REG, '') // TODO replace with `String.trimEnd` after bumping Firefox to 61+\n  .split('').reverse().findIndex(char => char.match(SPACE_REG));\n  return [selectedWordLength !== -1 ? to - trailingSpaces.length - selectedWordLength : 0, to];\n}\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/**\r\n * @internal\r\n */\nfunction maskitoPipe(processors = []) {\n  return (initialData, ...readonlyArgs) => processors.reduce((data, fn) => Object.assign(Object.assign({}, data), fn(data, ...readonlyArgs)), initialData);\n}\nfunction maskitoTransform(valueOrState, maskitoOptions) {\n  const options = Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), maskitoOptions);\n  const preprocessor = maskitoPipe(options.preprocessors);\n  const postprocessor = maskitoPipe(options.postprocessors);\n  const initialElementState = typeof valueOrState === 'string' ? {\n    value: valueOrState,\n    selection: [0, 0]\n  } : valueOrState;\n  const {\n    elementState\n  } = preprocessor({\n    elementState: initialElementState,\n    data: ''\n  }, 'validation');\n  const maskModel = new MaskModel(elementState, options);\n  const {\n    value,\n    selection\n  } = postprocessor(maskModel, initialElementState);\n  return typeof valueOrState === 'string' ? value : {\n    value,\n    selection\n  };\n}\nclass Maskito extends MaskHistory {\n  constructor(element, maskitoOptions) {\n    super();\n    this.element = element;\n    this.maskitoOptions = maskitoOptions;\n    this.isTextArea = this.element.nodeName === 'TEXTAREA';\n    this.eventListener = new EventListener(this.element);\n    this.options = Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), this.maskitoOptions);\n    this.preprocessor = maskitoPipe(this.options.preprocessors);\n    this.postprocessor = maskitoPipe(this.options.postprocessors);\n    this.teardowns = this.options.plugins.map(plugin => plugin(this.element, this.options));\n    this.ensureValueFitsMask();\n    this.updateHistory(this.elementState);\n    this.eventListener.listen('keydown', event => {\n      if (isRedo(event)) {\n        event.preventDefault();\n        return this.redo();\n      }\n      if (isUndo(event)) {\n        event.preventDefault();\n        return this.undo();\n      }\n    });\n    if (isBeforeInputEventSupported(element)) {\n      this.eventListener.listen('beforeinput', event => {\n        const isForward = event.inputType.includes('Forward');\n        this.updateHistory(this.elementState);\n        switch (event.inputType) {\n          // historyUndo/historyRedo will not be triggered if value was modified programmatically\n          case 'historyUndo':\n            event.preventDefault();\n            return this.undo();\n          case 'historyRedo':\n            event.preventDefault();\n            return this.redo();\n          case 'deleteByCut':\n          case 'deleteContentBackward':\n          case 'deleteContentForward':\n            return this.handleDelete({\n              event,\n              isForward,\n              selection: getNotEmptySelection(this.elementState, isForward)\n            });\n          case 'deleteWordForward':\n          case 'deleteWordBackward':\n            return this.handleDelete({\n              event,\n              isForward,\n              selection: getWordSelection(this.elementState, isForward),\n              force: true\n            });\n          case 'deleteSoftLineBackward':\n          case 'deleteSoftLineForward':\n          case 'deleteHardLineBackward':\n          case 'deleteHardLineForward':\n            return this.handleDelete({\n              event,\n              isForward,\n              selection: getLineSelection(this.elementState, isForward),\n              force: true\n            });\n          case 'insertCompositionText':\n            return;\n          // will be handled inside `compositionend` event\n\n          case 'insertLineBreak':\n            return this.handleEnter(event);\n          case 'insertFromPaste':\n          case 'insertText':\n          case 'insertFromDrop':\n          default:\n            return this.handleInsert(event, event.data || '');\n        }\n      });\n    } else {\n      /** TODO: drop it after browser support bump (Firefox 87+)\r\n       * Also, replace union types `Event | TypedInputEvent` with `TypedInputEvent` inside:\r\n       *** {@link handleDelete}\r\n       *** {@link handleInsert}\r\n       */\n      this.eventListener.listen('keydown', event => this.handleKeydown(event));\n      this.eventListener.listen('paste', event => {\n        var _a;\n        return this.handleInsert(event, ((_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/plain')) || '');\n      });\n    }\n    this.eventListener.listen('input', ({\n      inputType\n    }) => {\n      if (inputType === 'insertCompositionText') {\n        return; // will be handled inside `compositionend` event\n      }\n      this.ensureValueFitsMask();\n      this.updateHistory(this.elementState);\n    });\n    this.eventListener.listen('compositionend', () => {\n      this.ensureValueFitsMask();\n      this.updateHistory(this.elementState);\n    });\n  }\n  get elementState() {\n    const {\n      value,\n      selectionStart,\n      selectionEnd\n    } = this.element;\n    return {\n      value,\n      selection: [selectionStart || 0, selectionEnd || 0]\n    };\n  }\n  get maxLength() {\n    const {\n      maxLength\n    } = this.element;\n    return maxLength === -1 ? Infinity : maxLength;\n  }\n  destroy() {\n    this.eventListener.destroy();\n    this.teardowns.forEach(teardown => teardown === null || teardown === void 0 ? void 0 : teardown());\n  }\n  updateElementState({\n    value,\n    selection\n  }, eventInit = {\n    inputType: 'insertText',\n    data: null\n  }) {\n    const initialValue = this.elementState.value;\n    this.updateValue(value);\n    this.updateSelectionRange(selection);\n    if (initialValue !== value) {\n      this.dispatchInputEvent(eventInit);\n    }\n  }\n  updateSelectionRange([from, to]) {\n    var _a, _b;\n    if (this.element.selectionStart !== from || this.element.selectionEnd !== to) {\n      (_b = (_a = this.element).setSelectionRange) === null || _b === void 0 ? void 0 : _b.call(_a, from, to);\n    }\n  }\n  updateValue(value) {\n    this.element.value = value;\n  }\n  ensureValueFitsMask() {\n    this.updateElementState(maskitoTransform(this.elementState, this.options));\n  }\n  dispatchInputEvent(eventInit = {\n    inputType: 'insertText',\n    data: null\n  }) {\n    const globalObject = typeof window !== 'undefined' ? window : globalThis; // TODO: replace `globalObject` with `globalThis` after bumping Firefox to 65+\n    // @see https://caniuse.com/?search=globalThis\n\n    if (globalObject === null || globalObject === void 0 ? void 0 : globalObject.InputEvent) {\n      this.element.dispatchEvent(new InputEvent('input', Object.assign(Object.assign({}, eventInit), {\n        bubbles: true,\n        cancelable: false\n      })));\n    }\n  }\n  handleKeydown(event) {\n    const pressedKey = event.key;\n    const isForward = pressedKey === 'Delete';\n    switch (pressedKey) {\n      case 'Backspace':\n      case 'Delete':\n        return this.handleDelete({\n          event,\n          isForward,\n          selection: getNotEmptySelection(this.elementState, isForward)\n        });\n      case 'Enter':\n        return this.handleEnter(event);\n    }\n    if (!isEventProducingCharacter(event)) {\n      return;\n    }\n    this.handleInsert(event, pressedKey);\n  }\n  handleDelete({\n    event,\n    selection,\n    isForward,\n    force = false\n  }) {\n    const initialState = {\n      value: this.elementState.value,\n      selection\n    };\n    const [initialFrom, initialTo] = initialState.selection;\n    const {\n      elementState\n    } = this.preprocessor({\n      elementState: initialState,\n      data: ''\n    }, isForward ? 'deleteForward' : 'deleteBackward');\n    const maskModel = new MaskModel(elementState, this.options);\n    const [from, to] = elementState.selection;\n    maskModel.deleteCharacters([from, to]);\n    const newElementState = this.postprocessor(maskModel, initialState);\n    const newPossibleValue = initialState.value.slice(0, initialFrom) + initialState.value.slice(initialTo);\n    if (newPossibleValue === newElementState.value && !force) {\n      return;\n    }\n    event.preventDefault();\n    if (areElementValuesEqual(initialState, elementState, maskModel, newElementState)) {\n      // User presses Backspace/Delete for the fixed value\n      return this.updateSelectionRange(isForward ? [to, to] : [from, from]);\n    } // TODO: drop it when `event: Event | TypedInputEvent` => `event: TypedInputEvent`\n\n    const inputTypeFallback = isForward ? 'deleteContentForward' : 'deleteContentBackward';\n    this.updateElementState(newElementState, {\n      inputType: 'inputType' in event ? event.inputType : inputTypeFallback,\n      data: null\n    });\n    this.updateHistory(newElementState);\n  }\n  handleInsert(event, data) {\n    const initialElementState = this.elementState;\n    const {\n      elementState,\n      data: insertedText = data\n    } = this.preprocessor({\n      data,\n      elementState: initialElementState\n    }, 'insert');\n    const maskModel = new MaskModel(elementState, this.options);\n    try {\n      maskModel.addCharacters(elementState.selection, insertedText);\n    } catch (_a) {\n      return event.preventDefault();\n    }\n    const [from, to] = elementState.selection;\n    const newPossibleValue = elementState.value.slice(0, from) + data + elementState.value.slice(to);\n    const newElementState = this.postprocessor(maskModel, initialElementState);\n    if (newElementState.value.length > this.maxLength) {\n      return event.preventDefault();\n    }\n    if (newPossibleValue !== newElementState.value) {\n      event.preventDefault();\n      this.updateElementState(newElementState, {\n        data,\n        inputType: 'inputType' in event ? event.inputType : 'insertText'\n      });\n      this.updateHistory(newElementState);\n    }\n  }\n  handleEnter(event) {\n    if (this.isTextArea) {\n      this.handleInsert(event, '\\n');\n    }\n  }\n}\nexport { MASKITO_DEFAULT_ELEMENT_PREDICATE, MASKITO_DEFAULT_OPTIONS, Maskito, maskitoPipe, maskitoTransform };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}