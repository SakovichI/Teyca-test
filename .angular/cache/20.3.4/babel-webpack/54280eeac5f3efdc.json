{"ast":null,"code":"import { effect, inject, output, viewChild } from '@angular/core';\nimport { Table } from '../table';\nimport { TableSelectionService } from '../../services';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"tableBarTemplate\"];\nexport let SelectableTable = /*#__PURE__*/(() => {\n  class SelectableTable extends Table {\n    #tableSelectionService = inject(TableSelectionService);\n    refresh = output();\n    $tableBarTemplate = viewChild('tableBarTemplate', ...(ngDevMode ? [{\n      debugName: \"$tableBarTemplate\"\n    }] : []));\n    $selectedCount = this.#tableSelectionService.$count;\n    $selectedItems = this.#tableSelectionService.$selectedItems;\n    $areAllSelected = this.#tableSelectionService.$areAllSelected;\n    $isIndeterminate = this.#tableSelectionService.$isIndeterminate;\n    $selectedItemsMap = this.#tableSelectionService.$selectedItemsMap;\n    constructor() {\n      super();\n      this.#handleDataChanges();\n    }\n    ngAfterViewInit() {\n      this.#setTableBarTemplate();\n    }\n    toggle(item) {\n      this.#tableSelectionService.toggle(item);\n    }\n    toggleAll() {\n      this.#tableSelectionService.toggleAll(this.$data());\n    }\n    refreshTableBar() {\n      this.clearSelectedItems();\n      this.refresh.emit();\n    }\n    ngOnDestroy() {\n      this.clearSelectedItems();\n    }\n    clearSelectedItems() {\n      this.#tableSelectionService.clearSelectedItems();\n    }\n    #handleDataChanges() {\n      effect(() => {\n        this.#tableSelectionService.setCurrentItemsIds(this.$data());\n      });\n    }\n    #setTableBarTemplate() {\n      const template = this.$tableBarTemplate();\n      if (!template) return;\n      this.#tableSelectionService.setTableBarTemplate(template);\n    }\n    static ɵfac = function SelectableTable_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SelectableTable)();\n    };\n    static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: SelectableTable,\n      viewQuery: function SelectableTable_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuerySignal(ctx.$tableBarTemplate, _c0, 5);\n        }\n        if (rf & 2) {\n          i0.ɵɵqueryAdvance();\n        }\n      },\n      outputs: {\n        refresh: \"refresh\"\n      },\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return SelectableTable;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}