{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Input, Output, HostBinding, HostListener, Injectable, ViewChild, Directive, NgModule } from '@angular/core';\nimport { MutationObserverService, MUTATION_OBSERVER_INIT } from '@ng-web-apis/mutation-observer';\nimport { TuiDestroyService, TuiResizeService, tuiArrayShallowEquals, tuiPx, tuiGetActualTarget, tuiIsElement } from '@taiga-ui/cdk';\nimport * as i2 from 'rxjs';\nimport { Subject, timer, BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { debounce, filter, map, distinctUntilChanged, startWith, debounceTime } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\nimport { shouldCall } from '@tinkoff/ng-event-plugins';\nconst _c0 = [\"*\"];\nconst _c1 = [\"wrapper\"];\nlet TuiTilesComponent = /*#__PURE__*/(() => {\n  class TuiTilesComponent {\n    constructor(el) {\n      this.el = el;\n      this.el$ = new Subject();\n      this.debounce = 0;\n      this.orderChange = this.el$.pipe(debounce(() => timer(this.debounce)), filter(this.filter.bind(this)), map(element => this.reorder(element)));\n      this.element = null;\n      this.order$ = new BehaviorSubject(new Map());\n    }\n    set order(map) {\n      this.order$.next(map);\n    }\n    get order() {\n      return this.order$.value;\n    }\n    rearrange(element) {\n      this.el$.next(element);\n    }\n    filter(element) {\n      return !!this.element && !!element && this.element !== element;\n    }\n    reorder(element) {\n      var _a, _b;\n      const elements = Array.from(this.el.nativeElement.children);\n      const currentIndex = elements.indexOf(this.element || element);\n      const newIndex = elements.indexOf(element);\n      const order = this.order.size ? new Map(this.order) : new Map(elements.map((_, index) => [index, index]));\n      const dragged = (_a = order.get(currentIndex)) !== null && _a !== void 0 ? _a : currentIndex;\n      const placement = (_b = order.get(newIndex)) !== null && _b !== void 0 ? _b : newIndex;\n      order.set(currentIndex, placement);\n      order.set(newIndex, dragged);\n      this.order$.next(order);\n      return order;\n    }\n  }\n  TuiTilesComponent.ɵfac = function TuiTilesComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTilesComponent)(i0.ɵɵdirectiveInject(ElementRef));\n  };\n  TuiTilesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiTilesComponent,\n    selectors: [[\"tui-tiles\"]],\n    hostVars: 2,\n    hostBindings: function TuiTilesComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"pointerleave.silent\", function TuiTilesComponent_pointerleave_silent_HostBindingHandler() {\n          return ctx.rearrange();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"_dragged\", ctx.element);\n      }\n    },\n    inputs: {\n      debounce: \"debounce\",\n      order: \"order\"\n    },\n    outputs: {\n      orderChange: \"orderChange\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService, TuiResizeService, MutationObserverService, {\n      provide: MUTATION_OBSERVER_INIT,\n      useValue: {\n        childList: true\n      }\n    }])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function TuiTilesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"tui-tiles{position:relative;z-index:0;display:grid;grid-auto-flow:dense;justify-items:stretch}tui-tiles._dragged tui-tile>.t-wrapper{pointer-events:none}tui-tiles._dragged tui-tile:not(._dragged)>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transition-delay:1ms}tui-tiles:not(._dragged) tui-tile._dragged>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transition-delay:1ms}tui-tile>.t-wrapper{position:absolute;z-index:0;border-radius:inherit}tui-tile._dragged>.t-wrapper{z-index:1;transition:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TuiTilesComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTileService = /*#__PURE__*/(() => {\n  class TuiTileService {\n    constructor(el, tiles, resize$, mutation$) {\n      this.el = el;\n      this.tiles = tiles;\n      this.resize$ = resize$;\n      this.mutation$ = mutation$;\n      this.sub = new Subscription();\n      this.offset$ = new BehaviorSubject([NaN, NaN]);\n      this.position$ = combineLatest([this.offset$.pipe(distinctUntilChanged(tuiArrayShallowEquals)), this.resize$.pipe(startWith(null)), this.mutation$.pipe(startWith(null)), this.tiles.order$.pipe(debounceTime(0))]).pipe(map(([offset]) => offset));\n    }\n    init(element) {\n      this.sub.add(this.position$.subscribe(offset => {\n        this.setPosition(element, offset);\n        this.setRect(element, offset);\n      }));\n    }\n    setOffset(offset) {\n      this.offset$.next(offset);\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n    }\n    getRect([left, top]) {\n      return {\n        top: Number.isNaN(top) ? this.el.nativeElement.offsetTop : top,\n        left: Number.isNaN(left) ? this.el.nativeElement.offsetLeft : left,\n        width: this.el.nativeElement.clientWidth,\n        height: this.el.nativeElement.clientHeight,\n        right: NaN,\n        bottom: NaN\n      };\n    }\n    setRect({\n      style\n    }, offset) {\n      const {\n        top,\n        left,\n        width,\n        height\n      } = this.getRect(offset);\n      style.top = tuiPx(top);\n      style.left = tuiPx(left);\n      style.width = tuiPx(width);\n      style.height = tuiPx(height);\n    }\n    setPosition(element, [left]) {\n      if (!Number.isNaN(left)) {\n        element.style.setProperty('position', 'fixed');\n        return;\n      }\n      const {\n        style\n      } = element;\n      const rect = element.getBoundingClientRect();\n      const host = this.el.nativeElement.getBoundingClientRect();\n      style.removeProperty('position');\n      style.top = tuiPx(rect.top - host.top + this.el.nativeElement.offsetTop);\n      style.left = tuiPx(rect.left - host.left + this.el.nativeElement.offsetLeft);\n    }\n  }\n  TuiTileService.ɵfac = function TuiTileService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTileService)(i0.ɵɵinject(ElementRef), i0.ɵɵinject(TuiTilesComponent), i0.ɵɵinject(TuiResizeService), i0.ɵɵinject(MutationObserverService));\n  };\n  TuiTileService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiTileService,\n    factory: TuiTileService.ɵfac\n  });\n  return TuiTileService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTileComponent = /*#__PURE__*/(() => {\n  class TuiTileComponent {\n    constructor(service, el, tiles) {\n      this.service = service;\n      this.el = el;\n      this.tiles = tiles;\n      this.width = 1;\n      this.height = 1;\n      this.dragged = false;\n    }\n    get column() {\n      return `span var(--tui-width, ${this.width})`;\n    }\n    get row() {\n      return `span var(--tui-height, ${this.height})`;\n    }\n    get element() {\n      return this.el.nativeElement;\n    }\n    onEnter() {\n      this.tiles.rearrange(this.element);\n    }\n    onDrag(offset) {\n      const dragged = !Number.isNaN(offset[0]);\n      this.dragged = this.dragged || dragged;\n      this.tiles.element = dragged ? this.element : null;\n      this.service.setOffset(offset);\n    }\n    onTransitionEnd() {\n      this.dragged = false;\n    }\n    ngAfterViewInit() {\n      if (this.wrapper) {\n        this.service.init(this.wrapper.nativeElement);\n      }\n    }\n    ngOnDestroy() {\n      if (this.tiles.element === this.element) {\n        this.tiles.element = null;\n      }\n    }\n  }\n  TuiTileComponent.ɵfac = function TuiTileComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTileComponent)(i0.ɵɵdirectiveInject(TuiTileService), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TuiTilesComponent));\n  };\n  TuiTileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiTileComponent,\n    selectors: [[\"tui-tile\"]],\n    viewQuery: function TuiTileComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function TuiTileComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"pointerenter\", function TuiTileComponent_pointerenter_HostBindingHandler() {\n          return ctx.onEnter();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"grid-column\", ctx.column)(\"grid-row\", ctx.row);\n        i0.ɵɵclassProp(\"_dragged\", ctx.dragged);\n      }\n    },\n    inputs: {\n      width: \"width\",\n      height: \"height\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiTileService])],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 0,\n    consts: [[\"wrapper\", \"\"], [1, \"t-wrapper\", 3, \"transitionend.self\"]],\n    template: function TuiTileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 1, 0);\n        i0.ɵɵlistener(\"transitionend.self\", function TuiTileComponent_Template_div_transitionend_self_0_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onTransitionEnd());\n        });\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TuiTileComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isInteracting(x = NaN) {\n  return !Number.isNaN(x) || !Number.isNaN(this['x']);\n}\nfunction isDragging() {\n  return !Number.isNaN(this['x']);\n}\nlet TuiTileHandleDirective = /*#__PURE__*/(() => {\n  class TuiTileHandleDirective {\n    constructor(tile) {\n      this.tile = tile;\n      this.x = NaN;\n      this.y = NaN;\n    }\n    onStart(event) {\n      const target = tuiGetActualTarget(event);\n      const {\n        x,\n        y,\n        pointerId\n      } = event;\n      if (tuiIsElement(target)) {\n        target.releasePointerCapture(pointerId);\n      }\n      this.onPointer(x, y);\n    }\n    onPointer(x = NaN, y = NaN) {\n      const {\n        left,\n        top\n      } = this.tile.element.getBoundingClientRect();\n      this.x = x - left;\n      this.y = y - top;\n      this.tile.onDrag([NaN, NaN]);\n    }\n    onMove(x, y) {\n      this.tile.onDrag([x - this.x, y - this.y]);\n    }\n  }\n  TuiTileHandleDirective.ɵfac = function TuiTileHandleDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTileHandleDirective)(i0.ɵɵdirectiveInject(TuiTileComponent));\n  };\n  TuiTileHandleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTileHandleDirective,\n    selectors: [[\"\", \"tuiTileHandle\", \"\"]],\n    hostVars: 4,\n    hostBindings: function TuiTileHandleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"pointerdown.silent.prevent\", function TuiTileHandleDirective_pointerdown_silent_prevent_HostBindingHandler($event) {\n          return ctx.onStart($event);\n        })(\"pointerup.silent\", function TuiTileHandleDirective_pointerup_silent_HostBindingHandler() {\n          return ctx.onPointer();\n        }, i0.ɵɵresolveDocument)(\"pointermove.silent\", function TuiTileHandleDirective_pointermove_silent_HostBindingHandler($event) {\n          return ctx.onMove($event.x, $event.y);\n        }, i0.ɵɵresolveDocument);\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"touch-action\", \"none\")(\"user-select\", \"none\");\n      }\n    },\n    standalone: false\n  });\n  __decorate([shouldCall(isInteracting)], TuiTileHandleDirective.prototype, \"onPointer\", null);\n  __decorate([shouldCall(isDragging)], TuiTileHandleDirective.prototype, \"onMove\", null);\n  return TuiTileHandleDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTilesModule = /*#__PURE__*/(() => {\n  class TuiTilesModule {}\n  TuiTilesModule.ɵfac = function TuiTilesModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTilesModule)();\n  };\n  TuiTilesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiTilesModule\n  });\n  TuiTilesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiTilesModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiTileComponent, TuiTileHandleDirective, TuiTileService, TuiTilesComponent, TuiTilesModule };\n//# sourceMappingURL=taiga-ui-kit-components-tiles.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}