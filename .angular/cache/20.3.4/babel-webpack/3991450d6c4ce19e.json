{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, Optional, Inject, Pipe, NgModule } from '@angular/core';\nimport { ALWAYS_TRUE_HANDLER } from '@taiga-ui/cdk';\nimport * as i3 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport * as i1 from '@taiga-ui/addon-table/components';\nimport { TuiHeadDirective } from '@taiga-ui/addon-table/components';\nimport { ReplaySubject, identity, merge, defer, EMPTY } from 'rxjs';\nimport { switchMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';\nclass AbstractTuiTableFilter {}\nlet TuiGenericFilterDirective = /*#__PURE__*/(() => {\n  class TuiGenericFilterDirective extends AbstractTuiTableFilter {\n    constructor() {\n      super(...arguments);\n      this.filter = ALWAYS_TRUE_HANDLER;\n    }\n  }\n  TuiGenericFilterDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiGenericFilterDirective_BaseFactory;\n    return function TuiGenericFilterDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiGenericFilterDirective_BaseFactory || (ɵTuiGenericFilterDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiGenericFilterDirective)))(__ngFactoryType__ || TuiGenericFilterDirective);\n    };\n  })();\n  TuiGenericFilterDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiGenericFilterDirective,\n    selectors: [[\"\", \"tuiGenericFilter\", \"\"]],\n    inputs: {\n      filter: [0, \"tuiGenericFilter\", \"filter\"]\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: AbstractTuiTableFilter,\n      useExisting: TuiGenericFilterDirective\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiGenericFilterDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTableFiltersDirective = /*#__PURE__*/(() => {\n  class TuiTableFiltersDirective {\n    constructor() {\n      this.refresh$ = new ReplaySubject(1);\n      this.filters = [];\n    }\n    register(filter) {\n      this.filters = this.filters.concat(filter);\n      this.update();\n    }\n    unregister(filter) {\n      this.filters = this.filters.filter(item => item !== filter);\n      this.update();\n    }\n    filter(items) {\n      return this.refresh$.pipe(switchMap(identity), startWith(null), map(() => items.filter(item => this.check(item))));\n    }\n    check(item) {\n      return this.filters.every(filter => filter.filter(item));\n    }\n    update() {\n      this.refresh$.next(merge(...this.filters.map(({\n        refresh$\n      }) => refresh$)));\n    }\n  }\n  TuiTableFiltersDirective.ɵfac = function TuiTableFiltersDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTableFiltersDirective)();\n  };\n  TuiTableFiltersDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTableFiltersDirective,\n    selectors: [[\"\", \"tuiTableFilters\", \"\"]],\n    standalone: false\n  });\n  return TuiTableFiltersDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTableFilterDirective = /*#__PURE__*/(() => {\n  class TuiTableFilterDirective {\n    constructor(head, delegate, control, filters) {\n      this.head = head;\n      this.delegate = delegate;\n      this.control = control;\n      this.filters = filters;\n      this.refresh$ = defer(() => {\n        var _a;\n        return merge(this.control.valueChanges || EMPTY, ((_a = this.control.statusChanges) === null || _a === void 0 ? void 0 : _a.pipe(distinctUntilChanged())) || EMPTY);\n      });\n    }\n    ngOnInit() {\n      this.filters.register(this);\n    }\n    ngOnDestroy() {\n      this.filters.unregister(this);\n    }\n    filter(item) {\n      const {\n        disabled,\n        value\n      } = this.control;\n      return !!disabled || !this.key || this.delegate.filter(item[this.key], value);\n    }\n    get key() {\n      var _a;\n      return this.tuiTableFilter || ((_a = this.head) === null || _a === void 0 ? void 0 : _a.tuiHead);\n    }\n  }\n  TuiTableFilterDirective.ɵfac = function TuiTableFilterDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTableFilterDirective)(i0.ɵɵdirectiveInject(TuiHeadDirective, 8), i0.ɵɵdirectiveInject(AbstractTuiTableFilter), i0.ɵɵdirectiveInject(NgControl), i0.ɵɵdirectiveInject(TuiTableFiltersDirective));\n  };\n  TuiTableFilterDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTableFilterDirective,\n    selectors: [[\"\", \"tuiTableFilter\", \"\"]],\n    inputs: {\n      tuiTableFilter: \"tuiTableFilter\"\n    },\n    standalone: false\n  });\n  return TuiTableFilterDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTableFiltersPipe = /*#__PURE__*/(() => {\n  class TuiTableFiltersPipe {\n    constructor(filters) {\n      this.filters = filters;\n    }\n    transform(items) {\n      return this.filters.filter(items);\n    }\n  }\n  TuiTableFiltersPipe.ɵfac = function TuiTableFiltersPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTableFiltersPipe)(i0.ɵɵdirectiveInject(TuiTableFiltersDirective, 16));\n  };\n  TuiTableFiltersPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"tuiTableFilters\",\n    type: TuiTableFiltersPipe,\n    pure: true,\n    standalone: false\n  });\n  return TuiTableFiltersPipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTableFiltersModule = /*#__PURE__*/(() => {\n  class TuiTableFiltersModule {}\n  TuiTableFiltersModule.ɵfac = function TuiTableFiltersModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTableFiltersModule)();\n  };\n  TuiTableFiltersModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiTableFiltersModule\n  });\n  TuiTableFiltersModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiTableFiltersModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTuiTableFilter, TuiGenericFilterDirective, TuiTableFilterDirective, TuiTableFiltersDirective, TuiTableFiltersModule, TuiTableFiltersPipe };\n//# sourceMappingURL=taiga-ui-addon-table-directives-table-filters.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}