{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Optional, SkipSelf, forwardRef, Directive, Inject, Input, ElementRef, INJECTOR, HostListener, Component, ChangeDetectionStrategy, Self, HostBinding, NgZone, TemplateRef, NgModule } from '@angular/core';\nimport * as i3 from '@taiga-ui/cdk';\nimport { tuiCreateTokenFromFactory, tuiCreateToken, AbstractTuiController, TuiActiveZoneDirective, TuiHoveredService, EMPTY_CLIENT_RECT, tuiPointToClientRect, tuiPure, tuiClamp, tuiPx, TuiDestroyService, tuiIfMap, tuiTypedFromEvent, tuiIsPresent, tuiZoneOptimized, tuiIsNativeFocused, TUI_PARENT_ANIMATION } from '@taiga-ui/cdk';\nimport * as i1$1 from '@taiga-ui/core/abstract';\nimport { tuiAsRectAccessor, tuiAsVehicle, TuiDriver, tuiAsDriver, TuiPositionAccessor, tuiFallbackRectAccessor, TuiRectAccessor, tuiPositionAccessorFor, tuiRectAccessorFor, AbstractTuiDriverDirective, TuiVehicle } from '@taiga-ui/core/abstract';\nimport { tuiFadeIn } from '@taiga-ui/core/animations';\nimport * as i5 from '@taiga-ui/core/directives/mode';\nimport { TuiModeDirective } from '@taiga-ui/core/directives/mode';\nimport * as i2 from '@taiga-ui/core/services';\nimport { TuiHintService, TuiPositionService, TuiVisualViewportService } from '@taiga-ui/core/services';\nimport { TUI_VIEWPORT, TUI_ANIMATION_OPTIONS } from '@taiga-ui/core/tokens';\nimport { tuiOverrideOptions, tuiIsObscured } from '@taiga-ui/core/utils';\nimport * as i1 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusComponent, POLYMORPHEUS_CONTEXT, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport { switchMap, delay, takeUntil, repeat, filter, map, tap, debounce, startWith, distinctUntilChanged, skip } from 'rxjs/operators';\nimport * as i2$1 from 'rxjs';\nimport { Subject, merge, of, ReplaySubject, timer, BehaviorSubject } from 'rxjs';\nimport { TUI_HINT_DIRECTIONS } from '@taiga-ui/core/constants';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\n/**\n * A component to display a hint\n */\nconst _c0 = [\"*\"];\nfunction TuiHintComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 1);\n  }\n  if (rf & 2) {\n    const text_r1 = ctx.polymorpheusOutlet;\n    i0.ɵɵproperty(\"innerHTML\", text_r1, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction TuiHintUnstyledComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst TUI_HINT_COMPONENT = tuiCreateTokenFromFactory(() => TuiHintComponent);\n\n/** Default values for hint options */\nconst TUI_HINT_DEFAULT_OPTIONS = {\n  direction: 'bottom-left',\n  showDelay: 500,\n  hideDelay: 200,\n  appearance: '',\n  icon: 'tuiIconHelpCircle'\n};\n/**\n * Default parameters for hint directive\n */\nconst TUI_HINT_OPTIONS = tuiCreateToken(TUI_HINT_DEFAULT_OPTIONS);\nconst tuiHintOptionsProvider = override => ({\n  provide: TUI_HINT_OPTIONS,\n  deps: [[new Optional(), TuiHintOptionsDirective], [new Optional(), new SkipSelf(), TUI_HINT_OPTIONS]],\n  useFactory: tuiOverrideOptions(override, TUI_HINT_DEFAULT_OPTIONS)\n});\nlet TuiHintOptionsDirective = /*#__PURE__*/(() => {\n  class TuiHintOptionsDirective extends AbstractTuiController {\n    constructor(options) {\n      super();\n      this.options = options;\n      this.direction = this.options.direction;\n      this.appearance = this.options.appearance;\n      this.showDelay = this.options.showDelay;\n      this.hideDelay = this.options.hideDelay;\n      this.icon = this.options.icon;\n    }\n  }\n  TuiHintOptionsDirective.ɵfac = function TuiHintOptionsDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintOptionsDirective)(i0.ɵɵdirectiveInject(TUI_HINT_OPTIONS, 4));\n  };\n  TuiHintOptionsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintOptionsDirective,\n    selectors: [[\"\", \"tuiHintContent\", \"\"]],\n    inputs: {\n      content: [0, \"tuiHintContent\", \"content\"],\n      direction: [0, \"tuiHintDirection\", \"direction\"],\n      appearance: [0, \"tuiHintAppearance\", \"appearance\"],\n      showDelay: [0, \"tuiHintShowDelay\", \"showDelay\"],\n      hideDelay: [0, \"tuiHintHideDelay\", \"hideDelay\"]\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_HINT_OPTIONS,\n      useExisting: forwardRef(() => TuiHintOptionsDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiHintOptionsDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintDirective = /*#__PURE__*/(() => {\n  class TuiHintDirective {\n    constructor(el, component, hintService, options, activeZone) {\n      this.el = el;\n      this.component = component;\n      this.hintService = hintService;\n      this.options = options;\n      this.activeZone = activeZone;\n      this.tuiHintAppearance = null;\n      this.type = 'hint';\n    }\n    set tuiHint(content) {\n      this.content = content;\n      if (!content) {\n        this.toggle(false);\n      }\n    }\n    get appearance() {\n      var _a;\n      return (_a = this.tuiHintAppearance) !== null && _a !== void 0 ? _a : this.options.appearance;\n    }\n    ngOnDestroy() {\n      this.toggle(false);\n    }\n    getClientRect() {\n      return this.el.nativeElement.getBoundingClientRect();\n    }\n    toggle(show) {\n      if (show && this.content) {\n        this.hintService.add(this);\n      } else {\n        this.hintService.remove(this);\n      }\n    }\n  }\n  TuiHintDirective.ɵfac = function TuiHintDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintDirective)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(PolymorpheusComponent), i0.ɵɵdirectiveInject(TuiHintService), i0.ɵɵdirectiveInject(TUI_HINT_OPTIONS), i0.ɵɵdirectiveInject(TuiActiveZoneDirective, 8));\n  };\n  TuiHintDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", 5, \"ng-container\", 5, \"ng-template\"]],\n    inputs: {\n      tuiHint: \"tuiHint\",\n      context: [0, \"tuiHintContext\", \"context\"],\n      tuiHintAppearance: \"tuiHintAppearance\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsRectAccessor(TuiHintDirective), tuiAsVehicle(TuiHintDirective), {\n      provide: PolymorpheusComponent,\n      deps: [TUI_HINT_COMPONENT, INJECTOR],\n      useClass: PolymorpheusComponent\n    }])]\n  });\n  return TuiHintDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/* eslint-disable rxjs/no-unsafe-takeuntil */\nlet TuiHintHoverDirective = /*#__PURE__*/(() => {\n  class TuiHintHoverDirective extends TuiDriver {\n    constructor(hovered$, options, el, parent) {\n      super(subscriber => this.stream$.subscribe(subscriber));\n      this.hovered$ = hovered$;\n      this.options = options;\n      this.el = el;\n      this.parent = parent;\n      this.visible = false;\n      this.toggle$ = new Subject();\n      this.stream$ = merge(this.toggle$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? 0 : this.hideDelay))), takeUntil(this.hovered$), repeat()), this.hovered$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? this.showDelay : this.hideDelay))), takeUntil(this.toggle$), repeat())).pipe(filter(() => this.enabled), map(value => value && (this.el.nativeElement.hasAttribute('tuiHintPointer') || !tuiIsObscured(this.el.nativeElement))), tap(visible => {\n        this.visible = visible;\n      }));\n      this.showDelay = this.options.showDelay;\n      this.hideDelay = this.options.hideDelay;\n      this.type = 'hint';\n      this.enabled = true;\n    }\n    toggle(visible = !this.visible) {\n      var _a;\n      this.toggle$.next(visible);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.toggle(visible);\n    }\n  }\n  TuiHintHoverDirective.ɵfac = function TuiHintHoverDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintHoverDirective)(i0.ɵɵdirectiveInject(TuiHoveredService), i0.ɵɵdirectiveInject(TUI_HINT_OPTIONS), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TuiHintHoverDirective, 12));\n  };\n  TuiHintHoverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintHoverDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", 5, \"ng-container\", 5, \"ng-template\"]],\n    inputs: {\n      showDelay: [0, \"tuiHintShowDelay\", \"showDelay\"],\n      hideDelay: [0, \"tuiHintHideDelay\", \"hideDelay\"]\n    },\n    exportAs: [\"tuiHintHover\"],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsDriver(TuiHintHoverDirective), TuiHoveredService]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiHintHoverDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintPointerDirective = /*#__PURE__*/(() => {\n  class TuiHintPointerDirective extends TuiHintHoverDirective {\n    constructor() {\n      super(...arguments);\n      this.currentRect = EMPTY_CLIENT_RECT;\n    }\n    onMove({\n      clientX,\n      clientY\n    }) {\n      this.currentRect = tuiPointToClientRect(clientX, clientY);\n    }\n    getClientRect() {\n      return this.currentRect;\n    }\n  }\n  TuiHintPointerDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiHintPointerDirective_BaseFactory;\n    return function TuiHintPointerDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiHintPointerDirective_BaseFactory || (ɵTuiHintPointerDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiHintPointerDirective)))(__ngFactoryType__ || TuiHintPointerDirective);\n    };\n  })();\n  TuiHintPointerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintPointerDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", \"tuiHintPointer\", \"\"]],\n    hostBindings: function TuiHintPointerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousemove.silent\", function TuiHintPointerDirective_mousemove_silent_HostBindingHandler($event) {\n          return ctx.onMove($event);\n        });\n      }\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsRectAccessor(TuiHintPointerDirective), tuiAsDriver(TuiHintPointerDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiHintPointerDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst OFFSET = 8;\nconst ARROW_OFFSET = 22;\nconst TOP = 0;\nconst LEFT = 1;\nlet TuiHintPositionDirective = /*#__PURE__*/(() => {\n  class TuiHintPositionDirective extends TuiPositionAccessor {\n    constructor(options, viewport, directive, accessors) {\n      super();\n      this.options = options;\n      this.viewport = viewport;\n      this.directive = directive;\n      this.accessors = accessors;\n      this.points = TUI_HINT_DIRECTIONS.reduce((acc, direction) => Object.assign(Object.assign({}, acc), {\n        [direction]: [0, 0]\n      }), {});\n      this.direction = this.options.direction;\n      this.type = 'hint';\n    }\n    getPosition({\n      width,\n      height\n    }) {\n      var _a, _b;\n      const hostRect = (_b = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : EMPTY_CLIENT_RECT;\n      const leftCenter = hostRect.left + hostRect.width / 2;\n      const topCenter = hostRect.top + hostRect.height / 2;\n      this.points['top-left'][TOP] = hostRect.top - height - OFFSET;\n      this.points['top-left'][LEFT] = leftCenter - width + ARROW_OFFSET;\n      this.points.top[TOP] = this.points['top-left'][TOP];\n      this.points.top[LEFT] = leftCenter - width / 2;\n      this.points['top-right'][TOP] = this.points['top-left'][TOP];\n      this.points['top-right'][LEFT] = leftCenter - ARROW_OFFSET;\n      this.points['bottom-left'][TOP] = hostRect.bottom + OFFSET;\n      this.points['bottom-left'][LEFT] = this.points['top-left'][LEFT];\n      this.points.bottom[TOP] = this.points['bottom-left'][TOP];\n      this.points.bottom[LEFT] = this.points.top[LEFT];\n      this.points['bottom-right'][TOP] = this.points['bottom-left'][TOP];\n      this.points['bottom-right'][LEFT] = this.points['top-right'][LEFT];\n      this.points['left-top'][TOP] = topCenter - height + ARROW_OFFSET;\n      this.points['left-top'][LEFT] = hostRect.left - width - OFFSET;\n      this.points.left[TOP] = topCenter - height / 2;\n      this.points.left[LEFT] = this.points['left-top'][LEFT];\n      this.points['left-bottom'][TOP] = topCenter - ARROW_OFFSET;\n      this.points['left-bottom'][LEFT] = this.points['left-top'][LEFT];\n      this.points['right-top'][TOP] = this.points['left-top'][TOP];\n      this.points['right-top'][LEFT] = hostRect.right + OFFSET;\n      this.points.right[TOP] = this.points.left[TOP];\n      this.points.right[LEFT] = this.points['right-top'][LEFT];\n      this.points['right-bottom'][TOP] = this.points['left-bottom'][TOP];\n      this.points['right-bottom'][LEFT] = this.points['right-top'][LEFT];\n      if (this.checkPosition(this.points[this.direction], width, height)) {\n        return this.points[this.direction];\n      }\n      const direction = TUI_HINT_DIRECTIONS.find(direction => this.checkPosition(this.points[direction], width, height));\n      return this.points[direction || this.fallback];\n    }\n    get accessor() {\n      return tuiFallbackRectAccessor('hint')(this.accessors, this.directive);\n    }\n    get fallback() {\n      return this.points.top[TOP] > this.viewport.getClientRect().bottom - this.points.bottom[TOP] ? 'top' : 'bottom';\n    }\n    checkPosition([top, left], width, height) {\n      const viewport = this.viewport.getClientRect();\n      return top > OFFSET / 4 && left > OFFSET / 4 && top + height < viewport.bottom - OFFSET / 4 && left + width < viewport.right - OFFSET / 4;\n    }\n  }\n  TuiHintPositionDirective.ɵfac = function TuiHintPositionDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintPositionDirective)(i0.ɵɵdirectiveInject(TUI_HINT_OPTIONS), i0.ɵɵdirectiveInject(TUI_VIEWPORT), i0.ɵɵdirectiveInject(TuiHintDirective), i0.ɵɵdirectiveInject(TuiRectAccessor));\n  };\n  TuiHintPositionDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintPositionDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", 5, \"ng-container\", 5, \"ng-template\"]],\n    inputs: {\n      direction: [0, \"tuiHintDirection\", \"direction\"]\n    },\n    standalone: false,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  __decorate([tuiPure], TuiHintPositionDirective.prototype, \"accessor\", null);\n  return TuiHintPositionDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst GAP = 4;\nlet TuiHintComponent = /*#__PURE__*/(() => {\n  class TuiHintComponent {\n    constructor(hovered$, position$, destroy$, animation, pointer, accessor, el, polymorpheus, hover, mode, vvs, viewport) {\n      var _a;\n      this.animation = animation;\n      this.pointer = pointer;\n      this.accessor = accessor;\n      this.el = el;\n      this.polymorpheus = polymorpheus;\n      this.hover = hover;\n      this.mode = mode;\n      this.vvs = vvs;\n      this.viewport = viewport;\n      this.appearance = this.polymorpheus.$implicit.appearance || ((_a = this.mode) === null || _a === void 0 ? void 0 : _a.mode);\n      position$.pipe(map(point => this.vvs.correct(point)), takeUntil(destroy$)).subscribe(([top, left]) => {\n        this.update(top, left);\n      });\n      hovered$.pipe(takeUntil(destroy$)).subscribe(hover => this.hover.toggle(hover));\n    }\n    get content() {\n      return this.polymorpheus.$implicit.content;\n    }\n    get context() {\n      return this.polymorpheus.$implicit.context;\n    }\n    onClick(target) {\n      if (!target.closest('tui-hint') && !this.hover.el.nativeElement.contains(target) || tuiIsObscured(this.hover.el.nativeElement)) {\n        this.hover.toggle(false);\n      }\n    }\n    update(top, left) {\n      if (!this.hover.el.nativeElement.isConnected) {\n        this.hover.toggle(false);\n        return;\n      }\n      const {\n        height,\n        width\n      } = this.el.nativeElement.getBoundingClientRect();\n      const {\n        style\n      } = this.el.nativeElement;\n      const rect = this.accessor.getClientRect();\n      const viewport = this.viewport.getClientRect();\n      if (rect === EMPTY_CLIENT_RECT) {\n        return;\n      }\n      const safeLeft = tuiClamp(left, GAP, viewport.width - width - GAP);\n      const [beakTop, beakLeft] = this.vvs.correct([rect.top + rect.height / 2 - top, rect.left + rect.width / 2 - safeLeft]);\n      style.top = tuiPx(top);\n      style.left = tuiPx(safeLeft);\n      style.setProperty('--top', tuiPx(tuiClamp(beakTop, 0.5, height - 1)));\n      style.setProperty('--left', tuiPx(tuiClamp(beakLeft, 0.5, width - 1)));\n    }\n  }\n  TuiHintComponent.ɵfac = function TuiHintComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintComponent)(i0.ɵɵdirectiveInject(TuiHoveredService), i0.ɵɵdirectiveInject(TuiPositionService), i0.ɵɵdirectiveInject(TuiDestroyService, 2), i0.ɵɵdirectiveInject(TUI_ANIMATION_OPTIONS), i0.ɵɵdirectiveInject(TuiHintPointerDirective, 8), i0.ɵɵdirectiveInject(TuiRectAccessor), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT), i0.ɵɵdirectiveInject(TuiHintHoverDirective), i0.ɵɵdirectiveInject(TuiModeDirective, 8), i0.ɵɵdirectiveInject(TuiVisualViewportService), i0.ɵɵdirectiveInject(TUI_VIEWPORT));\n  };\n  TuiHintComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiHintComponent,\n    selectors: [[\"tui-hint\"]],\n    hostVars: 4,\n    hostBindings: function TuiHintComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TuiHintComponent_click_HostBindingHandler($event) {\n          return ctx.onClick($event.target);\n        }, i0.ɵɵresolveDocument);\n      }\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@tuiFadeIn\", ctx.animation);\n        i0.ɵɵattribute(\"data-appearance\", ctx.appearance);\n        i0.ɵɵclassProp(\"_untouchable\", ctx.pointer);\n      }\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService, TuiPositionService, TuiHoveredService, tuiPositionAccessorFor('hint', TuiHintPositionDirective), tuiRectAccessorFor('hint', TuiHintDirective)])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"innerHTML\", 4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [3, \"innerHTML\"]],\n    template: function TuiHintComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, TuiHintComponent_span_1_Template, 1, 1, \"span\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"polymorpheusOutlet\", ctx.content)(\"polymorpheusOutletContext\", ctx.context);\n      }\n    },\n    dependencies: [i1.PolymorpheusOutletDirective],\n    styles: [\"[_nghost-%COMP%]{position:absolute;max-width:18rem;min-height:var(--tui-height-m);padding:.75rem 1rem;background:var(--tui-primary);border-radius:var(--tui-radius-l);color:var(--tui-primary-text);box-sizing:border-box;font:var(--tui-font-text-s);white-space:pre-line;word-wrap:break-word;line-height:1.25rem}[_nghost-%COMP%]:before{content:\\\"\\\";position:absolute;top:var(--top);left:var(--left);width:.5rem;height:.5rem;border-radius:.125rem;box-sizing:border-box;background:inherit;transform:translate(-50%,-50%) rotate(45deg)}[data-appearance=error][_nghost-%COMP%]{background:var(--tui-error-fill)}[data-appearance=onDark][_nghost-%COMP%]{background:var(--tui-elevation-02);color:var(--tui-text-01);filter:drop-shadow(0 0 .125rem rgba(0,0,0,.16)) drop-shadow(0 1.5rem 1rem rgba(0,0,0,.03)) drop-shadow(0 .75rem .75rem rgba(0,0,0,.04)) drop-shadow(0 .25rem .375rem rgba(0,0,0,.05))}[_nghost-%COMP%]:not([style*=\\\"top\\\"]){visibility:hidden}._untouchable[_nghost-%COMP%]{pointer-events:none}\"],\n    data: {\n      animation: [tuiFadeIn]\n    },\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiHintComponent.prototype, \"update\", null);\n  return TuiHintComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintDescribeDirective = /*#__PURE__*/(() => {\n  class TuiHintDescribeDirective extends TuiDriver {\n    constructor(zone, doc, el) {\n      super(subscriber => this.stream$.subscribe(subscriber));\n      this.zone = zone;\n      this.doc = doc;\n      this.el = el;\n      this.id$ = new ReplaySubject(1);\n      this.stream$ = this.id$.pipe(tuiIfMap(() => tuiTypedFromEvent(this.doc, 'keydown', {\n        capture: true\n      }), tuiIsPresent), switchMap(() => this.focused ? of(false) : merge(tuiTypedFromEvent(this.doc, 'keyup'), tuiTypedFromEvent(this.element, 'blur')).pipe(map(() => this.focused))), debounce(visible => visible ? timer(1000) : of(null)), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.zone));\n      this.tuiHintDescribe = '';\n      this.type = 'hint';\n    }\n    ngOnChanges() {\n      this.id$.next(this.tuiHintDescribe);\n    }\n    get focused() {\n      return tuiIsNativeFocused(this.element);\n    }\n    get element() {\n      return this.doc.getElementById(this.tuiHintDescribe || '') || this.el.nativeElement;\n    }\n  }\n  TuiHintDescribeDirective.ɵfac = function TuiHintDescribeDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintDescribeDirective)(i0.ɵɵdirectiveInject(NgZone), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ElementRef));\n  };\n  TuiHintDescribeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintDescribeDirective,\n    selectors: [[\"\", \"tuiHintDescribe\", \"\"]],\n    inputs: {\n      tuiHintDescribe: \"tuiHintDescribe\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsDriver(TuiHintDescribeDirective)]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  __decorate([tuiPure], TuiHintDescribeDirective.prototype, \"element\", null);\n  return TuiHintDescribeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintDriverDirective = /*#__PURE__*/(() => {\n  class TuiHintDriverDirective extends AbstractTuiDriverDirective {\n    // TODO: Figure out why this is necessary under nx test runner\n    constructor(destroy$, drivers, vehicles) {\n      super(destroy$, drivers, vehicles);\n      this.type = 'hint';\n    }\n  }\n  TuiHintDriverDirective.ɵfac = function TuiHintDriverDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintDriverDirective)(i0.ɵɵdirectiveInject(TuiDestroyService, 2), i0.ɵɵdirectiveInject(TuiDriver), i0.ɵɵdirectiveInject(TuiVehicle));\n  };\n  TuiHintDriverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintDriverDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", 5, \"ng-container\", 5, \"ng-template\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiHintDriverDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintHostDirective = /*#__PURE__*/(() => {\n  class TuiHintHostDirective extends TuiRectAccessor {\n    constructor() {\n      super(...arguments);\n      this.type = 'hint';\n    }\n    getClientRect() {\n      var _a;\n      return ((_a = this.tuiHintHost) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || EMPTY_CLIENT_RECT;\n    }\n  }\n  TuiHintHostDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiHintHostDirective_BaseFactory;\n    return function TuiHintHostDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiHintHostDirective_BaseFactory || (ɵTuiHintHostDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiHintHostDirective)))(__ngFactoryType__ || TuiHintHostDirective);\n    };\n  })();\n  TuiHintHostDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintHostDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", \"tuiHintHost\", \"\"]],\n    inputs: {\n      tuiHintHost: \"tuiHintHost\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsRectAccessor(TuiHintHostDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiHintHostDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintManualDirective = /*#__PURE__*/(() => {\n  class TuiHintManualDirective extends TuiDriver {\n    constructor(hover) {\n      super(subscriber => this.stream$.subscribe(subscriber));\n      this.stream$ = new BehaviorSubject(false);\n      this.tuiHintManual = false;\n      this.type = 'hint';\n      hover.enabled = false;\n    }\n    ngOnChanges() {\n      this.stream$.next(this.tuiHintManual);\n    }\n  }\n  TuiHintManualDirective.ɵfac = function TuiHintManualDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintManualDirective)(i0.ɵɵdirectiveInject(TuiHintHoverDirective));\n  };\n  TuiHintManualDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintManualDirective,\n    selectors: [[\"\", \"tuiHint\", \"\", \"tuiHintManual\", \"\"]],\n    inputs: {\n      tuiHintManual: \"tuiHintManual\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsDriver(TuiHintManualDirective)]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  return TuiHintManualDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintUnstyledComponent = /*#__PURE__*/(() => {\n  class TuiHintUnstyledComponent {\n    constructor(context) {\n      this.context = context;\n    }\n  }\n  TuiHintUnstyledComponent.ɵfac = function TuiHintUnstyledComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintUnstyledComponent)(i0.ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT));\n  };\n  TuiHintUnstyledComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiHintUnstyledComponent,\n    selectors: [[\"ng-component\"]],\n    hostVars: 1,\n    hostBindings: function TuiHintUnstyledComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@tuiParentAnimation\", undefined);\n      }\n    },\n    standalone: false,\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"]],\n    template: function TuiHintUnstyledComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TuiHintUnstyledComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"polymorpheusOutlet\", ctx.context.$implicit.content)(\"polymorpheusOutletContext\", ctx.context);\n      }\n    },\n    dependencies: [i1.PolymorpheusOutletDirective],\n    encapsulation: 2,\n    data: {\n      animation: [TUI_PARENT_ANIMATION]\n    },\n    changeDetection: 0\n  });\n  return TuiHintUnstyledComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintUnstyledDirective = /*#__PURE__*/(() => {\n  class TuiHintUnstyledDirective {\n    constructor(templateRef, hint) {\n      hint.component = new PolymorpheusComponent(TuiHintUnstyledComponent);\n      hint.content = templateRef;\n    }\n  }\n  TuiHintUnstyledDirective.ɵfac = function TuiHintUnstyledDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintUnstyledDirective)(i0.ɵɵdirectiveInject(TemplateRef), i0.ɵɵdirectiveInject(TuiHintDirective));\n  };\n  TuiHintUnstyledDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiHintUnstyledDirective,\n    selectors: [[\"ng-template\", \"tuiHint\", \"\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: POLYMORPHEUS_CONTEXT,\n      useValue: {\n        $implicit: {}\n      }\n    }])]\n  });\n  return TuiHintUnstyledDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiHintModule = /*#__PURE__*/(() => {\n  class TuiHintModule {}\n  TuiHintModule.ɵfac = function TuiHintModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintModule)();\n  };\n  TuiHintModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiHintModule\n  });\n  TuiHintModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, PolymorpheusModule]]\n  });\n  return TuiHintModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_HINT_COMPONENT, TUI_HINT_DEFAULT_OPTIONS, TUI_HINT_OPTIONS, TuiHintComponent, TuiHintDescribeDirective, TuiHintDirective, TuiHintDriverDirective, TuiHintHostDirective, TuiHintHoverDirective, TuiHintManualDirective, TuiHintModule, TuiHintOptionsDirective, TuiHintPointerDirective, TuiHintPositionDirective, TuiHintUnstyledComponent, TuiHintUnstyledDirective, tuiHintOptionsProvider };\n//# sourceMappingURL=taiga-ui-core-directives-hint.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}