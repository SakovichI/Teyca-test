{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgZone, Injectable, Inject, LOCALE_ID, ElementRef, Optional, Self, SecurityContext } from '@angular/core';\nimport * as i3 from '@taiga-ui/cdk';\nimport { tuiZoneOptimized, TUI_WINDOW_SIZE, tuiZonefree, EMPTY_CLIENT_RECT, TuiDestroyService, tuiAssert, TUI_IS_WEBKIT } from '@taiga-ui/cdk';\nimport { TUI_MEDIA, TUI_SANITIZER, TUI_ICONS } from '@taiga-ui/core/tokens';\nimport * as i1 from 'rxjs';\nimport { Observable, of, BehaviorSubject, fromEvent, merge, timer, EMPTY } from 'rxjs';\nimport { map, distinctUntilChanged, shareReplay, startWith, share, finalize, takeUntil } from 'rxjs/operators';\nimport { WINDOW, ANIMATION_FRAME } from '@ng-web-apis/common';\nimport * as i2 from '@taiga-ui/core/abstract';\nimport { TuiPositionAccessor } from '@taiga-ui/core/abstract';\nimport * as i1$1 from '@angular/router';\nimport { RouterLinkActive } from '@angular/router';\nimport * as i1$2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { tuiProcessIcon } from '@taiga-ui/core/utils/dom';\n\n/**\n * Service to provide the current breakpoint based on Taiga UI's media queries\n */\nlet TuiBreakpointService = /*#__PURE__*/(() => {\n  class TuiBreakpointService extends Observable {\n    constructor(media, ngZone, size$) {\n      super(subscriber => this.stream$.subscribe(subscriber));\n      this.media = media;\n      this.ngZone = ngZone;\n      this.size$ = size$;\n      this.sorted = Object.values(this.media).sort((a, b) => a - b);\n      this.invert = Object.keys(this.media).reduce((ret, key) => Object.assign(Object.assign({}, ret), {\n        [this.media[key]]: key\n      }), {});\n      this.stream$ = this.size$.pipe(map(({\n        width\n      }) => this.sorted.find(size => size > width)), map(key => this.invert[key || this.sorted[this.sorted.length - 1]]), distinctUntilChanged(), tuiZoneOptimized(this.ngZone), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n  }\n  TuiBreakpointService.ɵfac = function TuiBreakpointService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiBreakpointService)(i0.ɵɵinject(TUI_MEDIA), i0.ɵɵinject(NgZone), i0.ɵɵinject(TUI_WINDOW_SIZE));\n  };\n  TuiBreakpointService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiBreakpointService,\n    factory: TuiBreakpointService.ɵfac,\n    providedIn: 'root'\n  });\n  return TuiBreakpointService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiFormatDateService = /*#__PURE__*/(() => {\n  class TuiFormatDateService {\n    constructor(locale) {\n      this.locale = locale;\n    }\n    format(timestamp) {\n      return of(new Date(timestamp).toLocaleTimeString(this.locale, {\n        hour: 'numeric',\n        minute: '2-digit'\n      }));\n    }\n  }\n  TuiFormatDateService.ɵfac = function TuiFormatDateService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiFormatDateService)(i0.ɵɵinject(LOCALE_ID));\n  };\n  TuiFormatDateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiFormatDateService,\n    factory: TuiFormatDateService.ɵfac,\n    providedIn: 'root'\n  });\n  return TuiFormatDateService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Service for displaying hints/tooltips\n */\nlet TuiHintService = /*#__PURE__*/(() => {\n  class TuiHintService extends BehaviorSubject {\n    constructor() {\n      super([]);\n    }\n    add(directive) {\n      this.next(this.value.concat(directive));\n    }\n    remove(directive) {\n      if (this.value.includes(directive)) {\n        this.next(this.value.filter(hint => hint !== directive));\n      }\n    }\n  }\n  TuiHintService.ɵfac = function TuiHintService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiHintService)();\n  };\n  TuiHintService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiHintService,\n    factory: TuiHintService.ɵfac,\n    providedIn: 'root'\n  });\n  return TuiHintService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiNightThemeService = /*#__PURE__*/(() => {\n  class TuiNightThemeService extends Observable {\n    constructor(win) {\n      const media = win.matchMedia('(prefers-color-scheme: dark)');\n      const media$ = fromEvent(media, 'change').pipe(startWith(null), map(() => media.matches), share());\n      super(subscriber => media$.subscribe(subscriber));\n    }\n  }\n  TuiNightThemeService.ɵfac = function TuiNightThemeService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiNightThemeService)(i0.ɵɵinject(WINDOW));\n  };\n  TuiNightThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiNightThemeService,\n    factory: TuiNightThemeService.ɵfac,\n    providedIn: 'root'\n  });\n  return TuiNightThemeService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiPositionService = /*#__PURE__*/(() => {\n  class TuiPositionService extends Observable {\n    constructor(\n    // Destructuring here causes memory leak\n    el, animationFrame, zone, accessor) {\n      super(subscriber => animationFrame.pipe(map(() => el.nativeElement.getBoundingClientRect()), map(rect => accessor.getPosition(rect)), tuiZonefree(zone), finalize(() => accessor.getPosition(EMPTY_CLIENT_RECT))).subscribe(subscriber));\n    }\n  }\n  TuiPositionService.ɵfac = function TuiPositionService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiPositionService)(i0.ɵɵinject(ElementRef), i0.ɵɵinject(ANIMATION_FRAME), i0.ɵɵinject(NgZone), i0.ɵɵinject(TuiPositionAccessor));\n  };\n  TuiPositionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiPositionService,\n    factory: TuiPositionService.ɵfac\n  });\n  return TuiPositionService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO: Remove when Angular is update and `RouterLinkActive` has output\nlet TuiRouterLinkActiveService = /*#__PURE__*/(() => {\n  class TuiRouterLinkActiveService extends Observable {\n    constructor(routerLinkActive, zone, animationFrame$, destroy$) {\n      const stream$ = routerLinkActive ? merge(timer(0),\n      // SSR (animationFrame$ never emits value during SSR)\n      animationFrame$).pipe(map(() => routerLinkActive.isActive), distinctUntilChanged(), tuiZoneOptimized(zone), takeUntil(destroy$)) : EMPTY;\n      super(subscriber => stream$.subscribe(subscriber));\n    }\n  }\n  TuiRouterLinkActiveService.ɵfac = function TuiRouterLinkActiveService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiRouterLinkActiveService)(i0.ɵɵinject(RouterLinkActive, 8), i0.ɵɵinject(NgZone), i0.ɵɵinject(ANIMATION_FRAME), i0.ɵɵinject(TuiDestroyService, 2));\n  };\n  TuiRouterLinkActiveService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiRouterLinkActiveService,\n    factory: TuiRouterLinkActiveService.ɵfac\n  });\n  return TuiRouterLinkActiveService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Service for reusing SVGs without inlining each instance\n */\nlet TuiSvgService = /*#__PURE__*/(() => {\n  class TuiSvgService {\n    constructor(tuiSanitizer, sanitizer, icons) {\n      this.tuiSanitizer = tuiSanitizer;\n      this.sanitizer = sanitizer;\n      this.originals = {};\n      this.items$ = new BehaviorSubject(new Map());\n      this.define(icons);\n    }\n    define(icons) {\n      const {\n        value\n      } = this.items$;\n      Object.keys(icons).forEach(key => {\n        this.defineIcon(key, icons[key], value);\n      });\n      this.items$.next(value);\n    }\n    getOriginal(name) {\n      return this.originals[name] || null;\n    }\n    defineIcon(name, src, map) {\n      if (map.has(name)) {\n        return;\n      }\n      const parsed = this.parseSrc(name, src);\n      if (!parsed) {\n        ngDevMode && tuiAssert.assert(false, 'Unable to parse given SVG src');\n        return;\n      }\n      map.set(name, parsed);\n      this.originals = Object.assign(Object.assign({}, this.originals), {\n        [name]: src\n      });\n    }\n    parseSrc(name, src) {\n      return this.sanitize(tuiProcessIcon(src, name));\n    }\n    sanitize(src) {\n      return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src) : this.sanitizer.sanitize(SecurityContext.HTML, src)) || '');\n    }\n  }\n  TuiSvgService.ɵfac = function TuiSvgService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiSvgService)(i0.ɵɵinject(TUI_SANITIZER, 8), i0.ɵɵinject(DomSanitizer), i0.ɵɵinject(TUI_ICONS));\n  };\n  TuiSvgService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiSvgService,\n    factory: TuiSvgService.ɵfac,\n    providedIn: 'root'\n  });\n  return TuiSvgService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiVisualViewportService = /*#__PURE__*/(() => {\n  class TuiVisualViewportService {\n    constructor(win, isWebkit) {\n      this.win = win;\n      this.isWebkit = isWebkit;\n    }\n    // https://bugs.webkit.org/show_bug.cgi?id=207089\n    correct([y, x]) {\n      return [this.correctY(y), this.correctX(x)];\n    }\n    correctX(x) {\n      var _a, _b;\n      return this.isWebkit ? x + ((_b = (_a = this.win.visualViewport) === null || _a === void 0 ? void 0 : _a.offsetLeft) !== null && _b !== void 0 ? _b : 0) : x;\n    }\n    correctY(y) {\n      var _a, _b;\n      return this.isWebkit ? y + ((_b = (_a = this.win.visualViewport) === null || _a === void 0 ? void 0 : _a.offsetTop) !== null && _b !== void 0 ? _b : 0) : y;\n    }\n  }\n  TuiVisualViewportService.ɵfac = function TuiVisualViewportService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiVisualViewportService)(i0.ɵɵinject(WINDOW), i0.ɵɵinject(TUI_IS_WEBKIT));\n  };\n  TuiVisualViewportService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiVisualViewportService,\n    factory: TuiVisualViewportService.ɵfac,\n    providedIn: 'root'\n  });\n  return TuiVisualViewportService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiBreakpointService, TuiFormatDateService, TuiHintService, TuiNightThemeService, TuiPositionService, TuiRouterLinkActiveService, TuiSvgService, TuiVisualViewportService };\n//# sourceMappingURL=taiga-ui-core-services.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}