{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, ElementRef, Directive, Inject, Input, HostBinding, Output, HostListener, NgModule } from '@angular/core';\nlet TuiMediaDirective = /*#__PURE__*/(() => {\n  class TuiMediaDirective {\n    constructor(el) {\n      this.el = el;\n      this.playbackRate = 1;\n      this.volume = 1;\n      this.currentTimeChange = new EventEmitter();\n      this.pausedChange = new EventEmitter();\n      this.volumeChange = new EventEmitter();\n    }\n    set playbackRateSetter(playbackRate) {\n      this.updatePlaybackRate(playbackRate);\n    }\n    set currentTime(currentTime) {\n      if (Math.abs(currentTime - this.currentTime) > 0.05) {\n        this.el.nativeElement.currentTime = currentTime;\n      }\n    }\n    get currentTime() {\n      return this.el.nativeElement.currentTime;\n    }\n    set paused(paused) {\n      if (paused) {\n        this.el.nativeElement.pause();\n      } else {\n        void this.el.nativeElement.play();\n        this.updatePlaybackRate(this.playbackRate);\n      }\n    }\n    get paused() {\n      return this.el.nativeElement.paused;\n    }\n    // @bad TODO: Make sure no other events can affect this like network issues etc.\n    onPausedChange(paused) {\n      this.pausedChange.emit(paused);\n      this.updatePlaybackRate(this.playbackRate);\n    }\n    onVolumeChange() {\n      this.volume = this.el.nativeElement.volume;\n      this.volumeChange.emit(this.volume);\n    }\n    onCurrentTimeChange() {\n      this.currentTimeChange.emit(this.currentTime);\n    }\n    changeDetectionTrigger() {\n      // @bad TODO: consider if other events need to trigger CD\n    }\n    updatePlaybackRate(playbackRate) {\n      this.playbackRate = playbackRate;\n      this.el.nativeElement.playbackRate = this.playbackRate;\n    }\n  }\n  TuiMediaDirective.ɵfac = function TuiMediaDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiMediaDirective)(i0.ɵɵdirectiveInject(ElementRef));\n  };\n  TuiMediaDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiMediaDirective,\n    selectors: [[\"video\", \"tuiMedia\", \"\"], [\"audio\", \"tuiMedia\", \"\"]],\n    hostVars: 1,\n    hostBindings: function TuiMediaDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"ended\", function TuiMediaDirective_ended_HostBindingHandler() {\n          return ctx.onPausedChange(true);\n        })(\"pause\", function TuiMediaDirective_pause_HostBindingHandler() {\n          return ctx.onPausedChange(true);\n        })(\"play\", function TuiMediaDirective_play_HostBindingHandler() {\n          return ctx.onPausedChange(false);\n        })(\"volumechange\", function TuiMediaDirective_volumechange_HostBindingHandler() {\n          return ctx.onVolumeChange();\n        })(\"timeupdate\", function TuiMediaDirective_timeupdate_HostBindingHandler() {\n          return ctx.onCurrentTimeChange();\n        })(\"seeking\", function TuiMediaDirective_seeking_HostBindingHandler() {\n          return ctx.onCurrentTimeChange();\n        })(\"seeked\", function TuiMediaDirective_seeked_HostBindingHandler() {\n          return ctx.onCurrentTimeChange();\n        })(\"durationchange\", function TuiMediaDirective_durationchange_HostBindingHandler() {\n          return ctx.changeDetectionTrigger();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"volume\", ctx.volume);\n      }\n    },\n    inputs: {\n      volume: \"volume\",\n      playbackRateSetter: [0, \"playbackRate\", \"playbackRateSetter\"],\n      currentTime: \"currentTime\",\n      paused: \"paused\"\n    },\n    outputs: {\n      currentTimeChange: \"currentTimeChange\",\n      pausedChange: \"pausedChange\",\n      volumeChange: \"volumeChange\"\n    },\n    exportAs: [\"tuiMedia\"],\n    standalone: false\n  });\n  return TuiMediaDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiMediaModule = /*#__PURE__*/(() => {\n  class TuiMediaModule {}\n  TuiMediaModule.ɵfac = function TuiMediaModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiMediaModule)();\n  };\n  TuiMediaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiMediaModule\n  });\n  TuiMediaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiMediaModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiMediaDirective, TuiMediaModule };\n//# sourceMappingURL=taiga-ui-cdk-directives-media.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}