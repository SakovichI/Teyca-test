{"ast":null,"code":"import { InjectionToken, Optional, SkipSelf } from '@angular/core';\nimport { tuiAssert } from '@taiga-ui/cdk/classes';\nimport { FormArray, FormGroup } from '@angular/forms';\nfunction tuiArrayRemove(array, index) {\n  return array.slice(0, Math.max(index, 0)).concat(array.slice(Math.max(index + 1, 0)));\n}\nfunction tuiArrayShallowEquals(a, b) {\n  return a.length === b.length && a.every((item, index) => item === b[index]);\n}\nfunction tuiArrayToggle(array, item) {\n  const index = array.indexOf(item);\n  return index === -1 ? [...array, item] : tuiArrayRemove(array, index);\n}\nfunction tuiIsString(value) {\n  return typeof value === 'string';\n}\nfunction checkValueIsEmpty(value) {\n  const nextValue = tuiIsString(value) ? value.trim() : value;\n  return [undefined, null, NaN, ''].includes(nextValue);\n}\nfunction tuiCleanObject(object) {\n  return JSON.parse(JSON.stringify(object, (_key, value) => checkValueIsEmpty(value) ? undefined : value));\n}\nfunction tuiCreateToken(defaults) {\n  return tuiCreateTokenFromFactory(() => defaults);\n}\nfunction tuiCreateTokenFromFactory(factory) {\n  return new InjectionToken('', {\n    factory\n  });\n}\n\n/** @deprecated use {@link tuiCreateToken} instead */\nfunction tuiCreateOptions(defaults) {\n  return tuiCreateTokenFromFactory(() => defaults);\n}\nfunction tuiDefaultSort(x, y) {\n  if (x === y) {\n    return 0;\n  }\n  if (tuiIsString(x) && tuiIsString(y)) {\n    return x.localeCompare(y);\n  }\n  return x > y ? 1 : -1;\n}\nfunction tuiDistanceBetweenTouches({\n  touches\n}) {\n  return Math.hypot(touches[0].clientX - touches[1].clientX, touches[0].clientY - touches[1].clientY);\n}\nfunction tuiEaseInOutQuad(t) {\n  ngDevMode && tuiAssert.assert(t >= 0 && t <= 1, 'Input must be between 0 and 1 inclusive but received ', t);\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\n\n/**\n * Flattens two-dimensional array and calculates resulting length\n *\n * @param array twi dimensional array\n */\nfunction tuiFlatLength(array) {\n  return array.reduce((count, section) => count + section.length, 0);\n}\n\n/**\n * Extracts original array from {@link QueryList} rather than\n * creating a copy like {@link QueryList.toArray} does.\n * @param queryList\n * @returns original array from {@link QueryList}.\n */\nfunction tuiGetOriginalArrayFromQueryList(queryList) {\n  let array = [];\n  queryList.find((_item, _index, originalArray) => {\n    array = originalArray;\n    return true;\n  });\n  return array;\n}\nfunction tuiGetSwipeDirection(deltaX, deltaY) {\n  if (Math.abs(deltaY) > Math.abs(deltaX)) {\n    return deltaY > 0 ? 'top' : 'bottom';\n  }\n  return deltaX > 0 ? 'left' : 'right';\n}\nfunction tuiIsFalsy(value) {\n  return !value;\n}\nfunction tuiIsNumber(value) {\n  return typeof value === 'number';\n}\nfunction tuiIsObject(value) {\n  return typeof value === 'object' && !!value;\n}\nfunction tuiIsPresent(value) {\n  return value !== null && value !== undefined;\n}\nfunction tuiIsValidUrl(url) {\n  const pattern = new RegExp('^([a-zA-Z]+:\\\\/\\\\/)?' +\n  // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|localhost|' +\n  // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' +\n  // OR IP (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' +\n  // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' +\n  // query string\n  '(\\\\#[-a-z\\\\d_]*)?$',\n  // fragment locator\n  'i');\n  return pattern.test(url);\n}\nfunction tuiMarkControlAsTouchedAndValidate(control) {\n  if (control instanceof FormArray) {\n    control.controls.forEach(nestedControl => {\n      tuiMarkControlAsTouchedAndValidate(nestedControl);\n    });\n  }\n  if (control instanceof FormGroup) {\n    Object.values(control.controls).forEach(nestedControl => {\n      tuiMarkControlAsTouchedAndValidate(nestedControl);\n    });\n  }\n  control.markAsTouched();\n  control.updateValueAndValidity();\n}\n\n/**\n * Checks identity for nullable elements.\n *\n * @param a element a\n * @param b element b\n * @param handler called if both elements are not null\n * @return true if either both are null or they pass identity handler\n */\nfunction tuiNullableSame(a, b, handler) {\n  if (a === null) {\n    return b === null;\n  }\n  if (b === null) {\n    return false;\n  }\n  return handler(a, b);\n}\n\n/**\n * @deprecated use `Object.fromEntries` instead\n * (check browser support first https://caniuse.com/mdn-javascript_builtins_object_fromentries)\n * ___\n * TODO: after we bump Firefox to 63+ replace this function with `Object.fromEntries`.\n * TODO: Add `es2019.object` to `tsconfig.json` => `compilerOptions.lib`.\n *\n */\nfunction tuiObjectFromEntries(keyValuePairs) {\n  return keyValuePairs.reduce((obj, [key, val]) => Object.assign(Object.assign({}, obj), {\n    [key]: val\n  }), {});\n}\nfunction tuiProvideOptions(provide, options, fallback) {\n  return {\n    provide,\n    deps: [[new Optional(), new SkipSelf(), provide]],\n    useFactory: parent => Object.assign(Object.assign({}, parent || fallback), options)\n  };\n}\nfunction tuiUniqBy(array, key) {\n  return Array.from(array.reduce((map, item) => map.has(item[key]) ? map : map.set(item[key], item), new Map()).values());\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiArrayRemove, tuiArrayShallowEquals, tuiArrayToggle, tuiCleanObject, tuiCreateOptions, tuiCreateToken, tuiCreateTokenFromFactory, tuiDefaultSort, tuiDistanceBetweenTouches, tuiEaseInOutQuad, tuiFlatLength, tuiGetOriginalArrayFromQueryList, tuiGetSwipeDirection, tuiIsFalsy, tuiIsNumber, tuiIsObject, tuiIsPresent, tuiIsString, tuiIsValidUrl, tuiMarkControlAsTouchedAndValidate, tuiNullableSame, tuiObjectFromEntries, tuiProvideOptions, tuiUniqBy };\n//# sourceMappingURL=taiga-ui-cdk-utils-miscellaneous.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}