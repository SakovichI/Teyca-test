{"ast":null,"code":"import * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Inject, Input, HostBinding, ElementRef, Directive, ViewChild, NgModule } from '@angular/core';\nimport * as i1$2 from '@taiga-ui/cdk';\nimport { tuiCreateToken, tuiProvideOptions, tuiIsEdgeOlderThan, CHROMIUM_EDGE_START_VERSION, TuiResizeService, TuiDestroyService, tuiPure, tuiIsString, TuiRepeatTimesModule } from '@taiga-ui/cdk';\nimport { TUI_MODE, MODE_PROVIDER } from '@taiga-ui/core';\nimport * as i1 from 'rxjs';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { __decorate } from 'tslib';\nimport { USER_AGENT, WINDOW } from '@ng-web-apis/common';\nimport { map, distinctUntilChanged, delay } from 'rxjs/operators';\nconst _c0 = [\"tuiProgressBar\", \"\"];\nconst _c1 = [\"progressCircle\"];\nconst _c2 = [\"tuiProgressLabel\", \"\"];\nconst _c3 = [[[\"progress\"]], [[\"tui-progress-circle\"]], \"*\"];\nconst _c4 = [\"progress\", \"tui-progress-circle\", \"*\"];\nfunction TuiProgressSegmentedComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n  if (rf & 2) {\n    const index_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background\", index_r1 < ctx_r1.value ? ctx_r1.getActiveColor(index_r1) : null);\n  }\n}\nconst TUI_PROGRESS_DEFAULT_OPTIONS = {\n  color: null,\n  size: 'm'\n};\nconst TUI_PROGRESS_OPTIONS = tuiCreateToken(TUI_PROGRESS_DEFAULT_OPTIONS);\nfunction tuiProgressOptionsProvider(options) {\n  return tuiProvideOptions(TUI_PROGRESS_OPTIONS, options, TUI_PROGRESS_DEFAULT_OPTIONS);\n}\nlet TuiProgressBarComponent = /*#__PURE__*/(() => {\n  class TuiProgressBarComponent {\n    constructor(mode$, options) {\n      this.mode$ = mode$;\n      this.options = options;\n      this.color = this.options.color;\n      this.size = this.options.size;\n    }\n  }\n  TuiProgressBarComponent.ɵfac = function TuiProgressBarComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiProgressBarComponent)(i0.ɵɵdirectiveInject(TUI_MODE), i0.ɵɵdirectiveInject(TUI_PROGRESS_OPTIONS));\n  };\n  TuiProgressBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiProgressBarComponent,\n    selectors: [[\"progress\", \"tuiProgressBar\", \"\"]],\n    hostVars: 3,\n    hostBindings: function TuiProgressBarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"$.data-mode.attr\", function TuiProgressBarComponent___data_mode_attr_HostBindingHandler() {\n          return ctx.mode$;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n        i0.ɵɵstyleProp(\"--tui-progress-color\", ctx.color);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      size: \"size\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([MODE_PROVIDER])],\n    attrs: _c0,\n    decls: 0,\n    vars: 0,\n    template: function TuiProgressBarComponent_Template(rf, ctx) {},\n    styles: [\"@keyframes _ngcontent-%COMP%_tuiIndeterminateAnimation{50%{background-position:left}}[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;display:block;width:100%;height:var(--t-height);color:var(--tui-primary);background:var(--tui-clear);-webkit-clip-path:inset(0 round var(--tui-radius-xs));clip-path:inset(0 round var(--tui-radius-xs));overflow:hidden;flex-shrink:0}[_nghost-%COMP%]::-webkit-progress-value{-webkit-transition:width var(--tui-duration) linear;transition:width var(--tui-duration) linear}[_nghost-%COMP%]::-webkit-progress-value{background:var(--tui-progress-color, currentColor)}[_nghost-%COMP%]::-moz-progress-bar{background:var(--tui-progress-color, currentColor)}[data-mode=onDark][_nghost-%COMP%]{--tui-clear: var(--tui-clear-inverse)}[data-size=xxs][_nghost-%COMP%]{--t-height: .125rem}[data-size=m][_nghost-%COMP%]{--t-height: 1.5rem}[data-size=s][_nghost-%COMP%]{--t-height: .5rem}[data-size=s][_nghost-%COMP%]::-webkit-progress-value{border-radius:var(--tui-radius-xs)}[data-size=s][_nghost-%COMP%]::-moz-progress-bar{border-radius:var(--tui-radius-xs)}[new][_nghost-%COMP%]{-webkit-clip-path:inset(0 .5px round var(--tui-radius-m));clip-path:inset(0 .5px round var(--tui-radius-m));border-radius:1rem}[new][_nghost-%COMP%]::-webkit-progress-value{border-radius:inherit}[new][_nghost-%COMP%]::-moz-progress-bar{border-radius:inherit}[new][data-size=xs][_nghost-%COMP%]{--t-height: .25rem}[new][data-size=s][_nghost-%COMP%]{--t-height: .5rem}[new][data-size=m][_nghost-%COMP%]{--t-height: .75rem}[new][data-size=l][_nghost-%COMP%]{--t-height: 1rem}[new][data-size=xl][_nghost-%COMP%]{--t-height: 1.25rem}[new][data-size=xxl][_nghost-%COMP%]{--t-height: 1.5rem}[_nghost-%COMP%]:indeterminate{background:linear-gradient(to right,var(--tui-clear) 0 45%,var(--tui-progress-color, currentColor) 45% 55%,var(--tui-clear) 55% 100%) right;background-size:225%;animation:_ngcontent-%COMP%_tuiIndeterminateAnimation 3s infinite ease-in-out}[_nghost-%COMP%]:indeterminate::-webkit-progress-value{background:transparent}[_nghost-%COMP%]:indeterminate::-moz-progress-bar{background:transparent}[_nghost-%COMP%]::-webkit-progress-inner-element{border-radius:inherit}[_nghost-%COMP%]::-webkit-progress-bar{background:transparent;border-radius:inherit}label[tuiProgressLabel][_nghost-%COMP%]:not(:first-child), label[tuiProgressLabel]   [_nghost-%COMP%]:not(:first-child){position:absolute;top:0;left:0;width:100%;height:100%;background:transparent}\"],\n    changeDetection: 0\n  });\n  return TuiProgressBarComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction calculateColorSegments(colors, progressWidth) {\n  const segmentWidth = Math.ceil(progressWidth / colors.length);\n  const colorsString = colors.reduce((acc, color, i) => `${acc}, ${color} ${i * segmentWidth}px ${(i + 1) * segmentWidth}px`, '');\n  return `linear-gradient(to right ${colorsString})`;\n}\nlet TuiProgressColorSegmentsDirective = /*#__PURE__*/(() => {\n  class TuiProgressColorSegmentsDirective {\n    constructor(el, resize$, userAgent) {\n      this.el = el;\n      this.resize$ = resize$;\n      this.userAgent = userAgent;\n      // TODO: drop support of legacy Edge (EdgeHTML) in v4.x\n      this.isOldBrowsers = tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent);\n      this.colors$ = new BehaviorSubject([]);\n    }\n    set colors(colors) {\n      this.colors$.next(colors);\n    }\n    get calcSegments$() {\n      return combineLatest([this.colors$, this.resize$.pipe(map(() => this.el.nativeElement.offsetWidth), distinctUntilChanged())]).pipe(map(([colors, width]) => this.isOldBrowsers ? colors[0] : calculateColorSegments(colors, width)));\n    }\n  }\n  TuiProgressColorSegmentsDirective.ɵfac = function TuiProgressColorSegmentsDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiProgressColorSegmentsDirective)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TuiResizeService), i0.ɵɵdirectiveInject(USER_AGENT));\n  };\n  TuiProgressColorSegmentsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiProgressColorSegmentsDirective,\n    selectors: [[\"progress\", \"tuiProgressBar\", \"\", \"tuiProgressColorSegments\", \"\"]],\n    hostVars: 1,\n    hostBindings: function TuiProgressColorSegmentsDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"$.style.--tui-progress-color\", function TuiProgressColorSegmentsDirective___style___tui_progress_color_HostBindingHandler() {\n          return 0;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"$.style.--tui-progress-color\", ctx.calcSegments$);\n      }\n    },\n    inputs: {\n      colors: [0, \"tuiProgressColorSegments\", \"colors\"]\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([TuiDestroyService, TuiResizeService])]\n  });\n  __decorate([tuiPure], TuiProgressColorSegmentsDirective.prototype, \"calcSegments$\", null);\n  return TuiProgressColorSegmentsDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiProgressCircleComponent = /*#__PURE__*/(() => {\n  class TuiProgressCircleComponent {\n    constructor(userAgent, win, el, mode$, options) {\n      this.userAgent = userAgent;\n      this.win = win;\n      this.el = el;\n      this.mode$ = mode$;\n      this.options = options;\n      this.value = 0;\n      this.max = 1;\n      this.color = this.options.color;\n      this.size = this.options.size;\n      this.animationDelay$ = of(true).pipe(delay(0));\n    }\n    get progressRatio() {\n      const ratio = this.value / this.max;\n      return Number.isFinite(ratio) ? ratio : 0;\n    }\n    // TODO: drop support of legacy Edge (EdgeHTML) in v4.x\n    get oldEdgeRadiusFallback() {\n      if (!tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent)) {\n        return null;\n      }\n      const strokeWidth = parseInt(this.win.getComputedStyle(this.progressCircle.nativeElement).strokeWidth, 10);\n      return (this.el.nativeElement.offsetWidth - strokeWidth) / 2;\n    }\n  }\n  TuiProgressCircleComponent.ɵfac = function TuiProgressCircleComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiProgressCircleComponent)(i0.ɵɵdirectiveInject(USER_AGENT), i0.ɵɵdirectiveInject(WINDOW), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TUI_MODE), i0.ɵɵdirectiveInject(TUI_PROGRESS_OPTIONS));\n  };\n  TuiProgressCircleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiProgressCircleComponent,\n    selectors: [[\"tui-progress-circle\"]],\n    viewQuery: function TuiProgressCircleComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.progressCircle = _t.first);\n      }\n    },\n    hostVars: 5,\n    hostBindings: function TuiProgressCircleComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"$.data-mode.attr\", function TuiProgressCircleComponent___data_mode_attr_HostBindingHandler() {\n          return ctx.mode$;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n        i0.ɵɵstyleProp(\"--tui-progress-color\", ctx.color)(\"--progress-ratio\", ctx.progressRatio);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      max: \"max\",\n      color: \"color\",\n      size: \"size\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([MODE_PROVIDER])],\n    decls: 6,\n    vars: 8,\n    consts: [[\"progressCircle\", \"\"], [1, \"t-hidden-progress\", 3, \"max\", \"value\"], [\"aria-hidden\", \"true\", \"height\", \"100%\", \"width\", \"100%\", 1, \"t-svg\"], [\"cx\", \"50%\", \"cy\", \"50%\", 1, \"t-track\"], [\"cx\", \"50%\", \"cy\", \"50%\", 1, \"t-progress\"]],\n    template: function TuiProgressCircleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"progress\", 1);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\", 2);\n        i0.ɵɵelement(2, \"circle\", 3)(3, \"circle\", 4, 0);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"max\", ctx.max)(\"value\", ctx.value);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"r\", ctx.oldEdgeRadiusFallback);\n        i0.ɵɵadvance();\n        i0.ɵɵclassProp(\"t-progress_filled\", i0.ɵɵpipeBind1(5, 6, ctx.animationDelay$));\n        i0.ɵɵattribute(\"r\", ctx.oldEdgeRadiusFallback);\n      }\n    },\n    dependencies: [i1$1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:block;color:var(--tui-primary);transform:rotate(-90deg);transform-origin:center;font-size:1rem;width:var(--t-diameter);height:var(--t-diameter)}[data-mode=onDark][_nghost-%COMP%]{--tui-clear: var(--tui-clear-inverse)}[data-size=s][_nghost-%COMP%]{--t-diameter: 2em;--t-track-stroke: .5em;--t-progress-stroke: .5em}[data-size=m][_nghost-%COMP%]{--t-diameter: 3em;--t-track-stroke: .375em;--t-progress-stroke: .375em}[data-size=l][_nghost-%COMP%]{--t-diameter: 4em;--t-track-stroke: .375em;--t-progress-stroke: .375em}[data-size=xl][_nghost-%COMP%]{--t-diameter: 7em;--t-track-stroke: .375em;--t-progress-stroke: .375em}[new][_nghost-%COMP%]{--t-track-stroke: var(--tui-thickness, .375em);--t-progress-stroke: var(--tui-thickness, .375em)}[new][data-size=xxs][_nghost-%COMP%]{--t-diameter: 2rem}[new][data-size=xs][_nghost-%COMP%]{--t-diameter: 2.5rem}[new][data-size=s][_nghost-%COMP%]{--t-diameter: 3.5rem}[new][data-size=m][_nghost-%COMP%]{--t-diameter: 4rem}[new][data-size=l][_nghost-%COMP%]{--t-diameter: 5rem}[new][data-size=xl][_nghost-%COMP%]{--t-diameter: 6rem}[new][data-size=xxl][_nghost-%COMP%]{--t-diameter: 8rem}.t-track[_ngcontent-%COMP%]{fill:transparent;stroke:var(--tui-clear);stroke-width:var(--t-track-stroke);r:calc((var(--t-diameter) - var(--t-track-stroke)) / 2)}.t-progress[_ngcontent-%COMP%]{fill:transparent;stroke:var(--tui-progress-color, currentColor);stroke-linecap:round;stroke-width:var(--t-progress-stroke);stroke-dasharray:calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2));stroke-dashoffset:calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2));r:calc((var(--t-diameter) - var(--t-progress-stroke)) / 2)}.t-progress_filled[_ngcontent-%COMP%]{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2)) - var(--progress-ratio) * calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2)))}.t-hidden-progress[_ngcontent-%COMP%]{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}.t-svg[_ngcontent-%COMP%]{overflow:unset}\"],\n    changeDetection: 0\n  });\n  return TuiProgressCircleComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiProgressLabelComponent = /*#__PURE__*/(() => {\n  class TuiProgressLabelComponent {}\n  TuiProgressLabelComponent.ɵfac = function TuiProgressLabelComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiProgressLabelComponent)();\n  };\n  TuiProgressLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiProgressLabelComponent,\n    selectors: [[\"label\", \"tuiProgressLabel\", \"\"]],\n    standalone: false,\n    attrs: _c2,\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"t-label\"]],\n    template: function TuiProgressLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c3);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n        i0.ɵɵelementStart(2, \"span\", 0);\n        i0.ɵɵprojection(3, 2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{position:relative;display:inline-block;color:var(--tui-text-01)}.t-label[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;font:var(--tui-font-text-s);flex-direction:column;justify-content:center;align-items:center}\"],\n    changeDetection: 0\n  });\n  return TuiProgressLabelComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @deprecated Use {@link http://taiga-ui.dev/experimental/progress-segmented TuiProgressSegmentedModule} (from `@taiga-ui/experimental`)\n * TODO: delete in v4.0\n */\nlet TuiProgressSegmentedComponent = /*#__PURE__*/(() => {\n  class TuiProgressSegmentedComponent {\n    constructor(mode$) {\n      this.mode$ = mode$;\n      this.value = 0;\n      this.max = 1;\n      this.size = 'm';\n      this.colors = 'currentColor';\n    }\n    getActiveColor(index = 0) {\n      return tuiIsString(this.colors) ? this.colors : this.colors[index] || this.colors[this.colors.length - 1];\n    }\n  }\n  TuiProgressSegmentedComponent.ɵfac = function TuiProgressSegmentedComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiProgressSegmentedComponent)(i0.ɵɵdirectiveInject(TUI_MODE));\n  };\n  TuiProgressSegmentedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiProgressSegmentedComponent,\n    selectors: [[\"tui-progress-segmented\"]],\n    hostVars: 1,\n    hostBindings: function TuiProgressSegmentedComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"$.data-mode.attr\", function TuiProgressSegmentedComponent___data_mode_attr_HostBindingHandler() {\n          return ctx.mode$;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      max: \"max\",\n      size: \"size\",\n      colors: \"colors\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([MODE_PROVIDER])],\n    decls: 2,\n    vars: 3,\n    consts: [[1, \"t-hidden-progress\", 3, \"max\", \"value\"], [\"aria-hidden\", \"true\", \"class\", \"t-segment\", 3, \"background\", 4, \"tuiRepeatTimes\", \"tuiRepeatTimesOf\"], [\"aria-hidden\", \"true\", 1, \"t-segment\"]],\n    template: function TuiProgressSegmentedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"progress\", 0);\n        i0.ɵɵtemplate(1, TuiProgressSegmentedComponent_span_1_Template, 1, 2, \"span\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"max\", ctx.max)(\"value\", ctx.value);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"tuiRepeatTimesOf\", ctx.max);\n      }\n    },\n    dependencies: [i1$2.TuiRepeatTimesDirective],\n    styles: [\"[_nghost-%COMP%]{display:flex;color:var(--tui-primary)}[data-mode=onDark][_nghost-%COMP%]{--tui-clear: var(--tui-clear-inverse)}.t-segment[_ngcontent-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background:var(--tui-clear)}.t-segment[_ngcontent-%COMP%]:not(:last-child){margin-right:.25rem}[data-size=s][_nghost-%COMP%]   .t-segment[_ngcontent-%COMP%]{height:.25rem}[data-size=m][_nghost-%COMP%]   .t-segment[_ngcontent-%COMP%]{height:.5rem}.t-hidden-progress[_ngcontent-%COMP%]{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}\"],\n    changeDetection: 0\n  });\n  return TuiProgressSegmentedComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiProgressModule = /*#__PURE__*/(() => {\n  class TuiProgressModule {}\n  TuiProgressModule.ɵfac = function TuiProgressModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiProgressModule)();\n  };\n  TuiProgressModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiProgressModule\n  });\n  TuiProgressModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, TuiRepeatTimesModule]]\n  });\n  return TuiProgressModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_PROGRESS_DEFAULT_OPTIONS, TUI_PROGRESS_OPTIONS, TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsDirective, TuiProgressLabelComponent, TuiProgressModule, TuiProgressSegmentedComponent, tuiProgressOptionsProvider };\n//# sourceMappingURL=taiga-ui-kit-components-progress.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}