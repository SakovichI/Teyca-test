{"ast":null,"code":"import { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, NgModule, Inject } from '@angular/core';\nimport { EMPTY, concat, defer } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nfunction dasharize(camel) {\n  return camel.replace(/[a-z][A-Z]/g, letterLetter => {\n    return `${letterLetter[0]}-${letterLetter[1].toLowerCase()}`;\n  });\n}\nclass AbstractEventPlugin {\n  supports(event) {\n    return event.includes(this.modifier);\n  }\n  /** This is not used in Ivy anymore */\n  addGlobalEventListener() {\n    return () => {};\n  }\n  unwrap(event) {\n    return event.split('.').filter(v => !this.modifier.includes(v)).join('.');\n  }\n}\nlet BindEventPlugin = /*#__PURE__*/(() => {\n  class BindEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '$';\n    }\n    addEventListener(element, event) {\n      element[event] = element[event] || EMPTY;\n      const method = this.getMethod(element, event);\n      const zone$ = this.manager.getZone().onStable;\n      const sub = concat(zone$.pipe(takeWhile(() => element[event] === EMPTY)), defer(() => element[event])).subscribe(method);\n      return () => sub.unsubscribe();\n    }\n    getMethod(element, event) {\n      const [, key, value, unit = ''] = event.split('.');\n      if (event.endsWith('.attr')) {\n        return v => v === null ? element.removeAttribute(key) : element.setAttribute(key, String(v));\n      }\n      if (key === 'class') {\n        return v => element.classList.toggle(value, !!v);\n      }\n      if (key === 'style') {\n        return v => element.style.setProperty(dasharize(value), `${v}${unit}`);\n      }\n      return v => element[key] = v;\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */BindEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵBindEventPlugin_BaseFactory;\n    return function BindEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵBindEventPlugin_BaseFactory || (ɵBindEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(BindEventPlugin)))(__ngFactoryType__ || BindEventPlugin);\n    };\n  })();\n  BindEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BindEventPlugin,\n    factory: BindEventPlugin.ɵfac\n  });\n  return BindEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst GLOBAL_HANDLER = /*#__PURE__*/new InjectionToken('[GLOBAL_HANDLER]: Global event target handler', {\n  factory: () => {\n    const document = inject(DOCUMENT);\n    return name => name === 'body' ? document.body : document.defaultView[name] || document.createElement('div');\n  }\n});\nlet GlobalEventPlugin = /*#__PURE__*/(() => {\n  class GlobalEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.handler = inject(GLOBAL_HANDLER);\n      this.modifier = '>';\n    }\n    addEventListener(_, event, handler) {\n      return this.manager.addEventListener(this.handler(event.split('>')[0]), event.split('>')[1], handler);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */GlobalEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵGlobalEventPlugin_BaseFactory;\n    return function GlobalEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵGlobalEventPlugin_BaseFactory || (ɵGlobalEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(GlobalEventPlugin)))(__ngFactoryType__ || GlobalEventPlugin);\n    };\n  })();\n  GlobalEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: GlobalEventPlugin,\n    factory: GlobalEventPlugin.ɵfac\n  });\n  return GlobalEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OptionsEventPlugin = /*#__PURE__*/(() => {\n  class OptionsEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = 'capture.once.passive';\n    }\n    supports(event) {\n      return event.includes('.') && !this.unwrap(event).includes('.');\n    }\n    addEventListener(element, event, handler) {\n      element.addEventListener(this.unwrap(event), handler, {\n        once: event.includes('.once'),\n        passive: event.includes('.passive'),\n        capture: event.includes('.capture')\n      });\n      return () => element.removeEventListener(this.unwrap(event), handler, event.includes('.capture'));\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */OptionsEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵOptionsEventPlugin_BaseFactory;\n    return function OptionsEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵOptionsEventPlugin_BaseFactory || (ɵOptionsEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(OptionsEventPlugin)))(__ngFactoryType__ || OptionsEventPlugin);\n    };\n  })();\n  OptionsEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OptionsEventPlugin,\n    factory: OptionsEventPlugin.ɵfac\n  });\n  return OptionsEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PreventEventPlugin = /*#__PURE__*/(() => {\n  class PreventEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.prevent';\n    }\n    addEventListener(element, event, handler) {\n      const wrapped = event => {\n        event.preventDefault();\n        handler(event);\n      };\n      return this.manager.addEventListener(element, this.unwrap(event), wrapped);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */PreventEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵPreventEventPlugin_BaseFactory;\n    return function PreventEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵPreventEventPlugin_BaseFactory || (ɵPreventEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(PreventEventPlugin)))(__ngFactoryType__ || PreventEventPlugin);\n    };\n  })();\n  PreventEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PreventEventPlugin,\n    factory: PreventEventPlugin.ɵfac\n  });\n  return PreventEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SelfEventPlugin = /*#__PURE__*/(() => {\n  class SelfEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.self';\n    }\n    addEventListener(element, event, handler) {\n      const wrapped = event => {\n        if (event.target === event.currentTarget) {\n          handler(event);\n        }\n      };\n      return this.manager.addEventListener(element, this.unwrap(event), wrapped);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */SelfEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵSelfEventPlugin_BaseFactory;\n    return function SelfEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵSelfEventPlugin_BaseFactory || (ɵSelfEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(SelfEventPlugin)))(__ngFactoryType__ || SelfEventPlugin);\n    };\n  })();\n  SelfEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SelfEventPlugin,\n    factory: SelfEventPlugin.ɵfac\n  });\n  return SelfEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SilentEventPlugin = /*#__PURE__*/(() => {\n  class SilentEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.silent';\n    }\n    addEventListener(element, event, handler) {\n      SilentEventPlugin.ngZone = this.manager.getZone();\n      return SilentEventPlugin.ngZone.runOutsideAngular(() => this.manager.addEventListener(element, this.unwrap(event), handler));\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */SilentEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵSilentEventPlugin_BaseFactory;\n    return function SilentEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵSilentEventPlugin_BaseFactory || (ɵSilentEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(SilentEventPlugin)))(__ngFactoryType__ || SilentEventPlugin);\n    };\n  })();\n  SilentEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SilentEventPlugin,\n    factory: SilentEventPlugin.ɵfac\n  });\n  return SilentEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StopEventPlugin = /*#__PURE__*/(() => {\n  class StopEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.stop';\n    }\n    addEventListener(element, event, handler) {\n      const wrapped = event => {\n        event.stopPropagation();\n        handler(event);\n      };\n      return this.manager.addEventListener(element, this.unwrap(event), wrapped);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */StopEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵStopEventPlugin_BaseFactory;\n    return function StopEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵStopEventPlugin_BaseFactory || (ɵStopEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(StopEventPlugin)))(__ngFactoryType__ || StopEventPlugin);\n    };\n  })();\n  StopEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StopEventPlugin,\n    factory: StopEventPlugin.ɵfac\n  });\n  return StopEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * TODO: Remove in v4.0.0\r\n * @deprecated\r\n */\nlet ZoneEventPlugin = /*#__PURE__*/(() => {\n  class ZoneEventPlugin extends AbstractEventPlugin {\n    constructor() {\n      super(...arguments);\n      this.modifier = '.init';\n    }\n    addEventListener() {\n      console.warn('.init plugin is no longer necessary as of v3.1.0');\n      return () => {};\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */ZoneEventPlugin.ɵfac = /* @__PURE__ */(() => {\n    let ɵZoneEventPlugin_BaseFactory;\n    return function ZoneEventPlugin_Factory(__ngFactoryType__) {\n      return (ɵZoneEventPlugin_BaseFactory || (ɵZoneEventPlugin_BaseFactory = i0.ɵɵgetInheritedFactory(ZoneEventPlugin)))(__ngFactoryType__ || ZoneEventPlugin);\n    };\n  })();\n  ZoneEventPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ZoneEventPlugin,\n    factory: ZoneEventPlugin.ɵfac\n  });\n  return ZoneEventPlugin;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst PLUGINS = [SilentEventPlugin, BindEventPlugin, GlobalEventPlugin, OptionsEventPlugin, PreventEventPlugin, SelfEventPlugin, StopEventPlugin, ZoneEventPlugin];\nconst NG_EVENT_PLUGINS = PLUGINS.map(useClass => ({\n  provide: EVENT_MANAGER_PLUGINS,\n  multi: true,\n  useClass\n}));\nfunction shouldCall(predicate) {\n  return (_target, _key, desc) => {\n    const {\n      value\n    } = desc;\n    desc.value = function (...args) {\n      if (!predicate.apply(this, args)) {\n        return;\n      }\n      if (SilentEventPlugin.ngZone) {\n        SilentEventPlugin.ngZone.run(() => value.apply(this, args));\n      } else {\n        value.apply(this, args);\n      }\n    };\n  };\n}\nfunction asCallable(a) {\n  return a;\n}\nlet EventPluginsModule = /*#__PURE__*/(() => {\n  class EventPluginsModule {\n    constructor([plugin]) {\n      console.assert(!(plugin instanceof SilentEventPlugin) || EventPluginsModule.initialized, 'EventPluginsModule must come after BrowserModule in imports');\n      EventPluginsModule.initialized = true;\n    }\n  }\n  EventPluginsModule.initialized = false;\n  /** @nocollapse */\n  /** @nocollapse */\n  /** @nocollapse */\n  EventPluginsModule.ɵfac = function EventPluginsModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || EventPluginsModule)(i0.ɵɵinject(EVENT_MANAGER_PLUGINS));\n  };\n  EventPluginsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: EventPluginsModule\n  });\n  EventPluginsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: NG_EVENT_PLUGINS\n  });\n  return EventPluginsModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * Public API Surface of @tinkoff/ng-event-plugins\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BindEventPlugin, EventPluginsModule, GLOBAL_HANDLER, GlobalEventPlugin, NG_EVENT_PLUGINS, OptionsEventPlugin, PreventEventPlugin, SilentEventPlugin, StopEventPlugin, ZoneEventPlugin, asCallable, shouldCall };\n//# sourceMappingURL=tinkoff-ng-event-plugins.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}