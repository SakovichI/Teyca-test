{"ast":null,"code":"import { tuiAssert } from '@taiga-ui/cdk/classes';\n\n/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nfunction tuiClamp(value, min, max) {\n  ngDevMode && tuiAssert.assert(!Number.isNaN(value));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(min));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(max));\n  ngDevMode && tuiAssert.assert(max >= min);\n  return Math.min(max, Math.max(min, value));\n}\nfunction tuiInRange(value, fromInclude, toExclude) {\n  ngDevMode && tuiAssert.assert(!Number.isNaN(value));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(fromInclude));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(toExclude));\n  ngDevMode && tuiAssert.assert(fromInclude < toExclude);\n  return value >= fromInclude && value < toExclude;\n}\n\n/**\n * Normalizes any number to an integer within inclusive range\n *\n * @param value\n * @param min lower inclusive integer\n * @param max upper inclusive integer\n * @return an integer between min and max inclusive\n */\nfunction tuiNormalizeToIntNumber(value, min, max) {\n  ngDevMode && tuiAssert.assert(Number.isInteger(min));\n  ngDevMode && tuiAssert.assert(Number.isInteger(max));\n  ngDevMode && tuiAssert.assert(min <= max);\n  if (Number.isNaN(value) || value <= min) {\n    return min;\n  }\n  if (value >= max) {\n    return max;\n  }\n  return Math.round(value);\n}\n\n/**\n * Rounds a number to the closest value in a fixed discrete series\n *\n * @param value\n * @param quantum series step\n */\nfunction tuiQuantize(value, quantum) {\n  ngDevMode && tuiAssert.assert(Number.isFinite(value));\n  ngDevMode && tuiAssert.assert(Number.isFinite(quantum));\n  ngDevMode && tuiAssert.assert(quantum > 0);\n  const remainder = value % quantum;\n  return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;\n}\nconst MAX_PRECISION = 292;\n/**\n * Rounding number to the set precision\n *\n * @param value\n * @param precision number of digits in a float part\n * @param func rounding function (round, floor, ceil)\n */\nfunction calculate(value, precision, func) {\n  if (value === Infinity) {\n    return value;\n  }\n  ngDevMode && tuiAssert.assert(!Number.isNaN(value), 'Value must be number');\n  ngDevMode && tuiAssert.assert(Number.isInteger(precision), 'Precision must be integer');\n  precision = Math.min(precision, MAX_PRECISION);\n  const pair = `${value}e`.split('e');\n  const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n  const processedPair = `${tempValue}e`.split('e');\n  return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);\n}\nfunction tuiRound(value, precision = 0) {\n  return calculate(value, precision, Math.round);\n}\nfunction tuiCeil(value, precision = 0) {\n  return calculate(value, precision, Math.ceil);\n}\nfunction tuiFloor(value, precision = 0) {\n  return calculate(value, precision, Math.floor);\n}\nfunction tuiTrunc(value, precision = 0) {\n  return calculate(value, precision, Math.trunc);\n}\nfunction tuiRoundWith({\n  value,\n  precision,\n  method\n}) {\n  switch (method) {\n    case 'round':\n      return tuiRound(value, precision);\n    case 'ceil':\n      return tuiCeil(value, precision);\n    case 'floor':\n      return tuiFloor(value, precision);\n    default:\n      return tuiTrunc(value, precision);\n  }\n}\n\n/**\n * Calculates sum of any number of passed arguments\n */\nfunction tuiSum(...args) {\n  return args.reduce((a, b) => a + b, 0);\n}\nfunction tuiToInt(bool) {\n  return bool ? 1 : 0;\n}\nfunction tuiToInteger(value) {\n  return parseInt(value, 10);\n}\n\n/**\n * Converts angle in degrees to radians\n */\nfunction tuiToRadians(deg) {\n  return deg * Math.PI / 180;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCeil, tuiClamp, tuiFloor, tuiInRange, tuiNormalizeToIntNumber, tuiQuantize, tuiRound, tuiRoundWith, tuiSum, tuiToInt, tuiToInteger, tuiToRadians, tuiTrunc };\n//# sourceMappingURL=taiga-ui-cdk-utils-math.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}