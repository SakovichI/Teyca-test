{"ast":null,"code":"import { DestroyRef, inject } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { FormControl } from '@angular/forms';\nimport { distinctUntilChanged, filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CustomControl = /*#__PURE__*/(() => {\n  class CustomControl {\n    #destroyRef = inject(DestroyRef);\n    #isDisabled = false;\n    onTouched;\n    control = new FormControl(null);\n    onChange = () => {};\n    get isDisabled() {\n      return this.#isDisabled;\n    }\n    ngOnInit() {\n      this.handleControlValueChanges();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n      this.#isDisabled = isDisabled;\n      if (isDisabled) {\n        this.control.disable();\n      } else {\n        this.control.enable();\n      }\n    }\n    validate(control) {\n      if (control === this.control) return null;\n      const validators = control.validator ? [control.validator] : [];\n      this.control.setValidators(validators);\n      this.#subscribeToParentValidation(control);\n      return null;\n    }\n    writeValue(value) {\n      this.control.setValue(value);\n    }\n    handleControlValueChanges() {\n      this.control.valueChanges.pipe(distinctUntilChanged(), takeUntilDestroyed(this.#destroyRef)).subscribe(value => this.onChange(value));\n    }\n    #subscribeToParentValidation(control) {\n      if (!control) return;\n      const isInvalid = status => status === 'INVALID';\n      control.statusChanges.pipe(distinctUntilChanged(), filter(isInvalid), takeUntilDestroyed(this.#destroyRef)).subscribe(() => {\n        this.control.markAsTouched();\n        this.control.updateValueAndValidity();\n      });\n    }\n    static ɵfac = function CustomControl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CustomControl)();\n    };\n    static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: CustomControl\n    });\n  }\n  return CustomControl;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}