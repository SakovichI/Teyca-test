{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { COMPOSITION_BUFFER_MODE, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ɵgetDOM } from '@angular/platform-browser';\nimport { TUI_LEGACY_MASK } from '@taiga-ui/core';\nimport { createTextMaskInputElement } from 'text-mask-core';\n\n/* eslint-disable */\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n  const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @internal\n * @deprecated Use {@link https://github.com/taiga-family/maskito Maskito}\n * Don't use it!\n * TODO: delete in v4.0\n */\nlet MaskedInputDirective = /*#__PURE__*/(() => {\n  class MaskedInputDirective {\n    constructor(_renderer, _elementRef, _compositionMode) {\n      this._renderer = _renderer;\n      this._elementRef = _elementRef;\n      this._compositionMode = _compositionMode;\n      this.textMaskConfig = {\n        mask: [],\n        guide: true,\n        placeholderChar: '_',\n        pipe: undefined,\n        keepCharPositions: false\n      };\n      this.onChange = _ => {};\n      this.onTouched = () => {};\n      /** Whether the user is creating a composition string (IME events). */\n      this._composing = false;\n      if (this._compositionMode == null) {\n        this._compositionMode = !_isAndroid();\n      }\n    }\n    ngOnChanges() {\n      this._setupMask(true);\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(this.inputElement.value);\n      }\n    }\n    writeValue(value) {\n      this._setupMask();\n      // set the initial value for cases where the mask is disabled\n      const normalizedValue = value == null ? '' : value;\n      this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value);\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n      this._renderer.setProperty(this.inputElement, 'disabled', isDisabled);\n    }\n    _handleInput(value) {\n      if (!this._compositionMode || this._compositionMode && !this._composing) {\n        this._setupMask();\n        if (this.textMaskInputElement !== undefined) {\n          this.textMaskInputElement.update(value);\n          // get the updated value\n          value = this.inputElement.value;\n          this.onChange(value);\n        }\n      }\n    }\n    _setupMask(create = false) {\n      if (!this.inputElement) {\n        if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n          // `textMask` directive is used directly on an input element\n          this.inputElement = this._elementRef.nativeElement;\n        } else {\n          // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n          this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n        }\n      }\n      if (this.inputElement && create) {\n        this.textMaskInputElement = createTextMaskInputElement(Object.assign({\n          inputElement: this.inputElement\n        }, this.textMaskConfig));\n      }\n    }\n    _compositionStart() {\n      this._composing = true;\n    }\n    _compositionEnd(value) {\n      this._composing = false;\n      this._compositionMode && this._handleInput(value);\n    }\n  }\n  MaskedInputDirective.ɵfac = function MaskedInputDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MaskedInputDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));\n  };\n  MaskedInputDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MaskedInputDirective,\n    selectors: [[\"\", \"textMask\", \"\"]],\n    hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function MaskedInputDirective_input_HostBindingHandler($event) {\n          return ctx._handleInput($event.target.value);\n        })(\"blur\", function MaskedInputDirective_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"compositionstart\", function MaskedInputDirective_compositionstart_HostBindingHandler() {\n          return ctx._compositionStart();\n        })(\"compositionend\", function MaskedInputDirective_compositionend_HostBindingHandler($event) {\n          return ctx._compositionEnd($event.target.value);\n        });\n      }\n    },\n    inputs: {\n      textMaskConfig: [0, \"textMask\", \"textMaskConfig\"]\n    },\n    exportAs: [\"textMask\"],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskedInputDirective),\n      multi: true\n    }, {\n      provide: TUI_LEGACY_MASK,\n      useExisting: forwardRef(() => MaskedInputDirective)\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n  return MaskedInputDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @internal\n * @deprecated Use {@link https://github.com/taiga-family/maskito Maskito}\n * Don't use it!\n * TODO: delete in v4.0\n */\nlet TextMaskModule = /*#__PURE__*/(() => {\n  class TextMaskModule {}\n  TextMaskModule.ɵfac = function TextMaskModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TextMaskModule)();\n  };\n  TextMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TextMaskModule\n  });\n  TextMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TextMaskModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MaskedInputDirective, TextMaskModule };\n//# sourceMappingURL=taiga-ui-kit-directives-mask.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}