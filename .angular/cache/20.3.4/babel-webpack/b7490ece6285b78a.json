{"ast":null,"code":"import { inject, signal } from '@angular/core';\nimport { toId } from '../../../../../../../core/helpers';\nimport { ClientsPushUpsertFormService } from '../clients-push-upsert-form';\nimport { catchError, finalize, of, take, tap } from 'rxjs';\nimport { PushMessageApiService } from '../../../../../../api/push-message';\nimport { NotificationsService } from '../../../../../../../core/services';\nimport * as i0 from \"@angular/core\";\nexport let ClientsPushUpsertDialogService = /*#__PURE__*/(() => {\n  class ClientsPushUpsertDialogService {\n    #pushMessageApiService = inject(PushMessageApiService);\n    #clientsPushUpsertFormService = inject(ClientsPushUpsertFormService);\n    #notificationsService = inject(NotificationsService);\n    #isSavingSignal = signal(false, ...(ngDevMode ? [{\n      debugName: \"#isSavingSignal\"\n    }] : []));\n    $isSaving = this.#isSavingSignal.asReadonly();\n    $form = this.#clientsPushUpsertFormService.$form;\n    initData(clients) {\n      const clientsIds = clients.map(toId).join();\n      this.#clientsPushUpsertFormService.initForm(clientsIds);\n    }\n    sendPush(data) {\n      this.setIsSaving(true);\n      const showSuccess = resp => this.#handleSuccess(resp);\n      const handleError = error => this.#handleError(error);\n      return this.#pushMessageApiService.sendPushMessage(data).pipe(tap(showSuccess), catchError(handleError), finalize(this.setIsSaving.bind(this)));\n    }\n    setIsSaving = (isSaving = false) => this.#isSavingSignal.set(isSaving);\n    #handleSuccess(response) {\n      const label = response.usersCount > 1 ? ` Клиентам` : `Клиенту`;\n      this.#notificationsService.showSuccess(`${response.usersCount} ${label} будет отправлено PUSH уведомление`).pipe(take(1)).subscribe();\n    }\n    #handleError(error) {\n      this.#notificationsService.showError(`Не удалось отправить Push уведомления: ${error.error}`).pipe(take(1)).subscribe();\n      return of(null);\n    }\n    static ɵfac = function ClientsPushUpsertDialogService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ClientsPushUpsertDialogService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClientsPushUpsertDialogService,\n      factory: ClientsPushUpsertDialogService.ɵfac\n    });\n  }\n  return ClientsPushUpsertDialogService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}