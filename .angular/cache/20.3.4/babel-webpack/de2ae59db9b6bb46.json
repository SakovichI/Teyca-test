{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { ChangeDetectorRef, inject, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, forwardRef, Input, HostListener, HostBinding, Directive, NgModule } from '@angular/core';\nimport * as i8 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';\nimport { maskitoDateRangeOptionsGenerator } from '@maskito/kit';\nimport * as i3 from '@taiga-ui/cdk';\nimport { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, TUI_FIRST_DAY, TUI_LAST_DAY, tuiIsPresent, DATE_RANGE_FILLER_LENGTH, TuiDayRange, DATE_FILLER_LENGTH, RANGE_SEPARATOR_CHAR, tuiNullableSame, TUI_IS_MOBILE, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, tuiAsFocusableItemAccessor, tuiAsControl, InjectFlags, tuiPure, TuiActiveZoneModule, TuiLetModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_DEFAULT_MARKER_HANDLER, TUI_TEXTFIELD_SIZE, TUI_DROPDOWN_COMPONENT, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiWrapperModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport * as i2 from '@taiga-ui/kit/components/calendar-range';\nimport { TuiCalendarRangeComponent, TuiCalendarRangeModule } from '@taiga-ui/kit/components/calendar-range';\nimport { MAX_DAY_RANGE_LENGTH_MAPPER, TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/kit/constants';\nimport { TUI_MOBILE_CALENDAR, TUI_DATE_TEXTS, TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, tuiDateStreamWithTransformer } from '@taiga-ui/kit/tokens';\nimport { map } from 'rxjs/operators';\nimport * as i4 from '@taiga-ui/kit/directives';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i5 from '@maskito/angular';\nimport { MaskitoModule } from '@maskito/angular';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i7 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i9 from 'rxjs';\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nfunction TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r4 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r4, \" \");\n  }\n}\nfunction TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_ng_container_1_Template, 2, 1, \"ng-container\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.computedContent)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r2.value));\n  }\n}\nfunction TuiInputDateRangeComponent_tui_primitive_textfield_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-primitive-textfield\", 4);\n    i0.ɵɵlistener(\"valueChange\", function TuiInputDateRangeComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onValueChange($event));\n    });\n    i0.ɵɵprojection(1);\n    i0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n    i0.ɵɵtemplate(3, TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_Template, 2, 4, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dateFiller_r5 = ctx.tuiLet;\n    const ctx_r2 = i0.ɵɵnextContext();\n    const iconContent_r6 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.computedDisabled)(\"invalid\", ctx_r2.computedInvalid)(\"maskito\", ctx_r2.computedMask)(\"nativeId\", ctx_r2.nativeId)(\"pseudoActive\", ctx_r2.pseudoActive)(\"pseudoFocus\", ctx_r2.innerPseudoFocused)(\"pseudoHover\", ctx_r2.pseudoHover)(\"readOnly\", ctx_r2.readOnly)(\"tuiTextfieldFiller\", ctx_r2.getComputedRangeFiller(dateFiller_r5 || \"\"))(\"tuiTextfieldIcon\", ctx_r2.calendarIcon && iconContent_r6)(\"value\", ctx_r2.computedValue);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showValueTemplate);\n  }\n}\nfunction TuiInputDateRangeComponent_ng_template_3_tui_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-svg\", 9);\n    i0.ɵɵlistener(\"click\", function TuiInputDateRangeComponent_ng_template_3_tui_svg_0_Template_tui_svg_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onIconClick());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const src_r8 = ctx.polymorpheusOutlet;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"t-icon\", !ctx_r2.computedDisabled);\n    i0.ɵɵproperty(\"readOnly\", ctx_r2.readOnly)(\"src\", src_r8);\n  }\n}\nfunction TuiInputDateRangeComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TuiInputDateRangeComponent_ng_template_3_tui_svg_0_Template, 1, 4, \"tui-svg\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.calendarIcon)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r2.size));\n  }\n}\nfunction TuiInputDateRangeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-calendar-range\", 10);\n    i0.ɵɵlistener(\"valueChange\", function TuiInputDateRangeComponent_ng_template_5_Template_tui_calendar_range_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onRangeChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"defaultViewedMonth\", ctx_r2.defaultViewedMonth)(\"disabledItemHandler\", ctx_r2.disabledItemHandler)(\"items\", ctx_r2.items)(\"markerHandler\", ctx_r2.markerHandler)(\"max\", ctx_r2.max)(\"maxLength\", ctx_r2.maxLength)(\"min\", ctx_r2.min)(\"minLength\", ctx_r2.minLength)(\"value\", ctx_r2.value);\n  }\n}\nlet TuiInputDateRangeComponent = /*#__PURE__*/(() => {\n  class TuiInputDateRangeComponent extends AbstractTuiNullableControl {\n    constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize) {\n      super(control, cdr, valueTransformer);\n      this.isMobile = isMobile;\n      this.mobileCalendar = mobileCalendar;\n      this.dateFormat = dateFormat;\n      this.dateSeparator = dateSeparator;\n      this.dateTexts$ = dateTexts$;\n      this.valueTransformer = valueTransformer;\n      this.options = options;\n      this.textfieldSize = textfieldSize;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;\n      this.defaultViewedMonth = TuiMonth.currentLocal();\n      this.items = [];\n      this.min = this.options.min;\n      this.max = this.options.max;\n      this.minLength = null;\n      this.maxLength = null;\n      this.open = false;\n      this.selectedActivePeriod = null;\n      this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;\n      this.dateFiller$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));\n    }\n    onClick() {\n      if (!this.isMobile && this.interactive) {\n        this.toggle();\n      }\n    }\n    // TODO: remove this after refactor controls to hold whole TuiDayRangePeriod\n    ngAfterViewChecked() {\n      if (this.calendarRange) {\n        this.calendarRange.selectedActivePeriod = this.selectedActivePeriod;\n        this.calendarRange.cdr.markForCheck();\n      }\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get computedMin() {\n      var _a, _b;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {\n        return TUI_FIRST_DAY;\n      }\n      return (_b = this.min) !== null && _b !== void 0 ? _b : this.options.min;\n    }\n    get computedMax() {\n      var _a, _b;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {\n        return TUI_LAST_DAY;\n      }\n      return (_b = this.max) !== null && _b !== void 0 ? _b : this.options.max;\n    }\n    get nativeFocusableElement() {\n      var _a, _b;\n      return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;\n    }\n    get focused() {\n      var _a;\n      return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);\n    }\n    get computedMobile() {\n      return this.isMobile && !!this.mobileCalendar;\n    }\n    get calendarIcon() {\n      return this.options.icon;\n    }\n    get computedExampleText() {\n      var _a, _b;\n      return this.items.length ? ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.placeholder) || '' : '';\n    }\n    get computedMask() {\n      var _a, _b;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      const nativeValueIsNotSynced = ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.value) !== this.computedValue;\n      return this.activePeriod || nativeValueIsNotSynced ? MASKITO_DEFAULT_OPTIONS : this.calculateMask(this.dateFormat, this.dateSeparator, this.computedMin, this.computedMax, this.minLength, this.maxLength);\n    }\n    get activePeriod() {\n      var _a;\n      return (_a = this.selectedActivePeriod) !== null && _a !== void 0 ? _a : this.findActivePeriodBy(this.value);\n    }\n    get computedValue() {\n      const {\n        value,\n        nativeValue,\n        activePeriod\n      } = this;\n      if (activePeriod) {\n        return String(activePeriod);\n      }\n      return value ? value.getFormattedDayRange(this.dateFormat, this.dateSeparator) : nativeValue;\n    }\n    get showValueTemplate() {\n      return tuiIsPresent(this.value) && !this.focused;\n    }\n    get computedContent() {\n      var _a;\n      return ((_a = this.activePeriod) === null || _a === void 0 ? void 0 : _a.content) || this.computedValue;\n    }\n    get innerPseudoFocused() {\n      if (this.pseudoFocus === false) {\n        return false;\n      }\n      if (this.open || this.computedFocused) {\n        return true;\n      }\n      return null;\n    }\n    get nativeValue() {\n      var _a;\n      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';\n    }\n    set nativeValue(value) {\n      if (this.nativeFocusableElement) {\n        this.nativeFocusableElement.value = value;\n      }\n    }\n    getComputedRangeFiller(dateFiller) {\n      return this.activePeriod ? '' : this.getDateRangeFiller(dateFiller);\n    }\n    onIconClick() {\n      if (this.isMobile && this.interactive) {\n        this.onOpenChange(true);\n      }\n    }\n    onOpenChange(open) {\n      this.open = open;\n    }\n    onValueChange(value) {\n      if (this.control) {\n        this.control.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      if (!value && !this.mobileCalendar) {\n        this.onOpenChange(true);\n      }\n      this.value = value.length === DATE_RANGE_FILLER_LENGTH ? TuiDayRange.normalizeParse(value, this.dateFormat) : null;\n      if (!this.value) {\n        this.selectedActivePeriod = null;\n      }\n    }\n    onRangeChange(range) {\n      var _a, _b;\n      this.toggle();\n      this.focusInput();\n      if (!range) {\n        this.nativeValue = '';\n      }\n      this.value = range;\n      this.selectedActivePeriod = (_b = (_a = this.calendarRange) === null || _a === void 0 ? void 0 : _a.selectedActivePeriod) !== null && _b !== void 0 ? _b : null;\n    }\n    // TODO: investigate if it is used anywhere and (if not) delete it in v4.0\n    onItemSelect(item) {\n      this.toggle();\n      this.focusInput();\n      if (typeof item !== 'string') {\n        this.value = item.range.dayLimit(this.min, this.max);\n        return;\n      }\n      if (this.activePeriod === null) {\n        return;\n      }\n      this.value = null;\n      this.nativeValue = '';\n    }\n    onActiveZone(focused) {\n      this.updateFocused(focused);\n      if (!focused && !this.itemSelected && (this.nativeValue.length === DATE_FILLER_LENGTH || this.nativeValue.length === DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {\n        this.value = TuiDayRange.normalizeParse(this.nativeValue, this.dateFormat);\n      }\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = value ? this.computedValue : '';\n      this.selectedActivePeriod = this.findActivePeriodBy(this.value);\n    }\n    valueIdenticalComparator(oldValue, newValue) {\n      return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));\n    }\n    calculateMask(dateFormat, separator, min, max, minLength, maxLength) {\n      return maskitoDateRangeOptionsGenerator({\n        separator,\n        mode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],\n        min: min.toLocalNativeDate(),\n        max: max.toLocalNativeDate(),\n        minLength: minLength || {},\n        maxLength: maxLength || {}\n      });\n    }\n    get itemSelected() {\n      return this.items.findIndex(item => String(item) === this.nativeValue) !== -1;\n    }\n    toggle() {\n      this.open = !this.open;\n    }\n    focusInput(preventScroll = false) {\n      if (this.nativeFocusableElement) {\n        this.nativeFocusableElement.focus({\n          preventScroll\n        });\n      }\n    }\n    getDateRangeFiller(dateFiller) {\n      return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;\n    }\n    findActivePeriodBy(value) {\n      var _a;\n      return (_a = this.items.find(item => tuiNullableSame(value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) && a.to.daySame(b.to.dayLimit(this.min, this.max))))) !== null && _a !== void 0 ? _a : null;\n    }\n  }\n  TuiInputDateRangeComponent.ɵfac = function TuiInputDateRangeComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputDateRangeComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), i0.ɵɵdirectiveInject(TUI_DATE_FORMAT), i0.ɵɵdirectiveInject(TUI_DATE_SEPARATOR), i0.ɵɵdirectiveInject(TUI_DATE_TEXTS), i0.ɵɵdirectiveInject(TUI_DATE_RANGE_VALUE_TRANSFORMER, 8), i0.ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));\n  };\n  TuiInputDateRangeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputDateRangeComponent,\n    selectors: [[\"tui-input-date-range\"]],\n    viewQuery: function TuiInputDateRangeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n        i0.ɵɵviewQuery(TuiCalendarRangeComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendarRange = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputDateRangeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TuiInputDateRangeComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      disabledItemHandler: \"disabledItemHandler\",\n      markerHandler: \"markerHandler\",\n      defaultViewedMonth: \"defaultViewedMonth\",\n      items: \"items\",\n      min: \"min\",\n      max: \"max\",\n      minLength: \"minLength\",\n      maxLength: \"maxLength\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateRangeComponent), tuiAsControl(TuiInputDateRangeComponent), tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER), {\n      provide: TUI_DROPDOWN_COMPONENT,\n      useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 7,\n    vars: 6,\n    consts: [[\"iconContent\", \"\"], [\"dropdown\", \"\"], [1, \"t-hosted\", 3, \"openChange\", \"tuiActiveZoneChange\", \"canOpen\", \"content\", \"open\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", \"class\", \"t-textfield\", 3, \"disabled\", \"invalid\", \"maskito\", \"nativeId\", \"pseudoActive\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldFiller\", \"tuiTextfieldIcon\", \"value\", \"valueChange\", 4, \"tuiLet\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"valueChange\", \"disabled\", \"invalid\", \"maskito\", \"nativeId\", \"pseudoActive\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldFiller\", \"tuiTextfieldIcon\", \"value\"], [\"ngProjectAs\", \"tuiContent\", \"class\", \"t-value\", 5, [\"tuiContent\"], 4, \"ngIf\"], [\"ngProjectAs\", \"tuiContent\", 5, [\"tuiContent\"], 1, \"t-value\"], [4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"appearance\", \"icon\", \"automation-id\", \"tui-input-date-range__icon\", \"tuiWrapper\", \"\", 3, \"t-icon\", \"readOnly\", \"src\", \"click\", 4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"appearance\", \"icon\", \"automation-id\", \"tui-input-date-range__icon\", \"tuiWrapper\", \"\", 3, \"click\", \"readOnly\", \"src\"], [3, \"valueChange\", \"defaultViewedMonth\", \"disabledItemHandler\", \"items\", \"markerHandler\", \"max\", \"maxLength\", \"min\", \"minLength\", \"value\"]],\n    template: function TuiInputDateRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 2);\n        i0.ɵɵlistener(\"openChange\", function TuiInputDateRangeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onOpenChange($event));\n        })(\"tuiActiveZoneChange\", function TuiInputDateRangeComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onActiveZone($event));\n        });\n        i0.ɵɵtemplate(1, TuiInputDateRangeComponent_tui_primitive_textfield_1_Template, 4, 12, \"tui-primitive-textfield\", 3);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵtemplate(3, TuiInputDateRangeComponent_ng_template_3_Template, 1, 4, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(5, TuiInputDateRangeComponent_ng_template_5_Template, 1, 9, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const dropdown_r10 = i0.ɵɵreference(6);\n        i0.ɵɵproperty(\"canOpen\", ctx.interactive)(\"content\", dropdown_r10)(\"open\", ctx.open && ctx.interactive);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"tuiLet\", i0.ɵɵpipeBind1(2, 4, ctx.dateFiller$));\n      }\n    },\n    dependencies: [i1.TuiHostedDropdownComponent, i1.TuiPrimitiveTextfieldComponent, i1.TuiSvgComponent, i2.TuiCalendarRangeComponent, i3.TuiActiveZoneDirective, i3.TuiLetDirective, i1.TuiPrimitiveTextfieldDirective, i4.TuiValueAccessorDirective, i5.MaskitoDirective, i1.TuiTextfieldFillerDirective, i1.TuiTextfieldIconDirective, i6.NgIf, i7.PolymorpheusOutletDirective, i1.TuiWrapperDirective, i6.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-value[_ngcontent-%COMP%]{display:flex;width:100%;align-items:center}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputDateRangeComponent.prototype, \"calculateMask\", null);\n  return TuiInputDateRangeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateRangeDirective = /*#__PURE__*/(() => {\n  class TuiInputDateRangeDirective extends AbstractTuiTextfieldHost {\n    get value() {\n      return this.host.computedValue;\n    }\n    onValueChange(value) {\n      this.host.onValueChange(value);\n    }\n    process(input) {\n      input.inputMode = 'numeric';\n    }\n    ngDoCheck() {\n      if (this.host.nativeFocusableElement) {\n        this.host.nativeFocusableElement.placeholder = this.host.computedExampleText;\n      }\n    }\n  }\n  TuiInputDateRangeDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputDateRangeDirective_BaseFactory;\n    return function TuiInputDateRangeDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputDateRangeDirective_BaseFactory || (ɵTuiInputDateRangeDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputDateRangeDirective)))(__ngFactoryType__ || TuiInputDateRangeDirective);\n    };\n  })();\n  TuiInputDateRangeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputDateRangeDirective,\n    selectors: [[\"tui-input-date-range\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDateRangeDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputDateRangeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateRangeModule = /*#__PURE__*/(() => {\n  class TuiInputDateRangeModule {}\n  TuiInputDateRangeModule.ɵfac = function TuiInputDateRangeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputDateRangeModule)();\n  };\n  TuiInputDateRangeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputDateRangeModule\n  });\n  TuiInputDateRangeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MaskitoModule, TuiActiveZoneModule, TuiLetModule, PolymorpheusModule, TuiWrapperModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiCalendarRangeModule, TuiValueAccessorModule]]\n  });\n  return TuiInputDateRangeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiInputDateRangeComponent, TuiInputDateRangeDirective, TuiInputDateRangeModule };\n//# sourceMappingURL=taiga-ui-kit-components-input-date-range.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}