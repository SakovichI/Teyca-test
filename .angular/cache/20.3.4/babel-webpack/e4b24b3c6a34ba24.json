{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, forwardRef, Component, ChangeDetectionStrategy, Inject, HostBinding, InjectionToken, SkipSelf, ElementRef, ContentChildren, Optional, ViewChild, EventEmitter, Output, Injectable, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { startWith, map, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport * as i2$2 from '@taiga-ui/cdk';\nimport { EMPTY_ARRAY, ALWAYS_TRUE_HANDLER, EMPTY_FUNCTION, tuiCreateToken, EMPTY_QUERY, tuiIsPresent, TuiLetModule } from '@taiga-ui/cdk';\nimport * as i2$1 from '@tinkoff/ng-polymorpheus';\nimport { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_COMMON_ICONS, TuiExpandModule, TuiButtonModule } from '@taiga-ui/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction TuiTreeItemContentComponent_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵlistener(\"click\", function TuiTreeItemContentComponent_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onClick());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"t-button_expanded\", i0.ɵɵpipeBind1(1, 3, ctx_r1.expanded$));\n    i0.ɵɵproperty(\"icon\", ctx_r1.icons.more);\n  }\n}\nconst _c0 = [\"*\", [[\"tui-tree-item\"]], [[\"tui-tree\"]]];\nconst _c1 = [\"*\", \"tui-tree-item\", \"tui-tree\"];\nconst _c2 = (a0, a1) => ({\n  $implicit: a0,\n  template: a1\n});\nfunction TuiTreeItemComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nfunction TuiTreeItemComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r1 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r1, \"\\n\");\n  }\n}\nfunction TuiTreeItemComponent_tui_expand_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tui-expand\", 4);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵprojection(3, 1);\n    i0.ɵɵprojection(4, 2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"expanded\", i0.ɵɵpipeBind1(1, 1, ctx_r1.expanded$));\n  }\n}\nfunction TuiTreeItemComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c3 = [\"value\", \"\"];\nconst _c4 = (a0, a1) => ({\n  $implicit: a0,\n  node: a1\n});\nfunction TuiTreeComponent_tui_tree_item_0_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r1 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r1, \" \");\n  }\n}\nfunction TuiTreeComponent_tui_tree_item_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TuiTreeComponent_tui_tree_item_0_ng_container_2_ng_container_1_Template, 2, 1, \"ng-container\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const view_r2 = i0.ɵɵreference(1);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.content)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction2(2, _c4, ctx_r2.value, view_r2));\n  }\n}\nfunction TuiTreeComponent_tui_tree_item_0_tui_tree_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tui-tree\", 6);\n  }\n  if (rf & 2) {\n    const child_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"content\", ctx_r2.content)(\"trackBy\", ctx_r2.trackBy)(\"value\", child_r4);\n  }\n}\nfunction TuiTreeComponent_tui_tree_item_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tui-tree-item\", 2, 0);\n    i0.ɵɵtemplate(2, TuiTreeComponent_tui_tree_item_0_ng_container_2_Template, 2, 5, \"ng-container\", 3)(3, TuiTreeComponent_tui_tree_item_0_tui_tree_3_Template, 1, 3, \"tui-tree\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const children_r5 = ctx.tuiLet;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"tuiTreeNode\", ctx_r2.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.value !== children_r5);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", children_r5)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\nlet TuiTreeChildrenDirective = /*#__PURE__*/(() => {\n  class TuiTreeChildrenDirective {\n    constructor() {\n      this.childrenHandler = TuiTreeChildrenDirective.defaultHandler;\n    }\n    static defaultHandler(item) {\n      return Array.isArray(item) ? item : EMPTY_ARRAY;\n    }\n  }\n  TuiTreeChildrenDirective.ɵfac = function TuiTreeChildrenDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeChildrenDirective)();\n  };\n  TuiTreeChildrenDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTreeChildrenDirective,\n    selectors: [[\"tui-tree\", \"childrenHandler\", \"\"]],\n    inputs: {\n      childrenHandler: \"childrenHandler\"\n    },\n    standalone: false\n  });\n  return TuiTreeChildrenDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeItemContentComponent = /*#__PURE__*/(() => {\n  class TuiTreeItemContentComponent {\n    constructor(icons, context, controller) {\n      this.icons = icons;\n      this.context = context;\n      this.controller = controller;\n      this.change$ = new Subject();\n      this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded), distinctUntilChanged());\n    }\n    get isExpanded() {\n      return this.context.$implicit.isExpanded;\n    }\n    get isExpandable() {\n      return this.context.$implicit.isExpandable && this.controller !== TUI_DEFAULT_TREE_CONTROLLER;\n    }\n    onClick() {\n      this.controller.toggle(this.context.$implicit);\n    }\n    ngDoCheck() {\n      this.change$.next();\n    }\n  }\n  TuiTreeItemContentComponent.ɵfac = function TuiTreeItemContentComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeItemContentComponent)(i0.ɵɵdirectiveInject(TUI_COMMON_ICONS), i0.ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT), i0.ɵɵdirectiveInject(forwardRef(() => TUI_TREE_CONTROLLER)));\n  };\n  TuiTreeItemContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiTreeItemContentComponent,\n    selectors: [[\"tui-tree-item-content\"]],\n    hostVars: 2,\n    hostBindings: function TuiTreeItemContentComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"_expandable\", ctx.isExpandable);\n      }\n    },\n    standalone: false,\n    decls: 2,\n    vars: 2,\n    consts: [[\"appearance\", \"flat\", \"shape\", \"rounded\", \"size\", \"xs\", \"tuiIconButton\", \"\", \"type\", \"button\", \"class\", \"t-button\", 3, \"t-button_expanded\", \"icon\", \"click\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [\"appearance\", \"flat\", \"shape\", \"rounded\", \"size\", \"xs\", \"tuiIconButton\", \"\", \"type\", \"button\", 1, \"t-button\", 3, \"click\", \"icon\"]],\n    template: function TuiTreeItemContentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TuiTreeItemContentComponent_button_0_Template, 2, 5, \"button\", 0);\n        i0.ɵɵelementContainer(1, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isExpandable);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.context.template);\n      }\n    },\n    dependencies: [i1.TuiButtonComponent, i2.NgIf, i2.NgTemplateOutlet, i2.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:flex;align-items:center}[_nghost-%COMP%]   tui-tree-item._expandable[_nghost-%COMP%]:not(._expandable), tui-tree-item._expandable   [_nghost-%COMP%]:not(._expandable){padding-left:2rem}.t-button[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded[_ngcontent-%COMP%]{transform:rotate(90deg)}\"],\n    changeDetection: 0\n  });\n  return TuiTreeItemContentComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst TUI_TREE_ITEM_CONTENT = new PolymorpheusComponent(TuiTreeItemContentComponent);\nconst TUI_DEFAULT_TREE_CONTROLLER = {\n  isExpanded: ALWAYS_TRUE_HANDLER,\n  toggle: EMPTY_FUNCTION\n};\n\n/**\n * Controller for tracking value - TuiTreeItemComponent pairs\n */\nconst TUI_TREE_ACCESSOR = /*#__PURE__*/new InjectionToken('[TUI_TREE_ACCESSOR]');\n/**\n * Controller for expanding the tree\n */\nconst TUI_TREE_CONTROLLER = tuiCreateToken(TUI_DEFAULT_TREE_CONTROLLER);\n/**\n * A node of a tree view\n */\nconst TUI_TREE_NODE = /*#__PURE__*/new InjectionToken('[TUI_TREE_NODE]');\n/**\n * A tree node placeholder for loading\n */\nconst TUI_TREE_LOADING = tuiCreateToken({});\n/**\n * A tree node starting point\n */\nconst TUI_TREE_START = /*#__PURE__*/new InjectionToken('[TUI_TREE_START]');\n/**\n * A service to load tree progressively\n */\nconst TUI_TREE_LOADER = /*#__PURE__*/new InjectionToken('[TUI_TREE_LOADER]');\n/**\n * Content for a tree item\n */\nconst TUI_TREE_CONTENT = tuiCreateToken(TUI_TREE_ITEM_CONTENT);\n/**\n * Nesting level of current TreeView node\n */\nconst TUI_TREE_LEVEL = tuiCreateToken(-1);\nconst TUI_TREE_ITEM_PROVIDERS = [{\n  provide: TUI_TREE_LEVEL,\n  deps: [[new SkipSelf(), TUI_TREE_LEVEL]],\n  useFactory: level => ++level\n}, {\n  provide: TUI_TREE_NODE,\n  useExisting: forwardRef(() => TuiTreeItemComponent)\n}];\nlet TuiTreeItemComponent = /*#__PURE__*/(() => {\n  class TuiTreeItemComponent {\n    constructor(el, controller, level, content) {\n      this.el = el;\n      this.controller = controller;\n      this.level = level;\n      this.content = content;\n      this.nested = EMPTY_QUERY;\n      this.change$ = new Subject();\n      this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded));\n      this.attached$ = this.change$.pipe(map(() => this.el.nativeElement.isConnected), distinctUntilChanged());\n    }\n    get isExpandable() {\n      return !!this.nested.length;\n    }\n    get isExpanded() {\n      return this.controller.isExpanded(this);\n    }\n    ngDoCheck() {\n      this.checkChanges();\n    }\n    checkChanges() {\n      this.change$.next();\n    }\n  }\n  TuiTreeItemComponent.ɵfac = function TuiTreeItemComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeItemComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(forwardRef(() => TUI_TREE_CONTROLLER)), i0.ɵɵdirectiveInject(forwardRef(() => TUI_TREE_LEVEL)), i0.ɵɵdirectiveInject(forwardRef(() => TUI_TREE_CONTENT)));\n  };\n  TuiTreeItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiTreeItemComponent,\n    selectors: [[\"tui-tree-item\"]],\n    contentQueries: function TuiTreeItemComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TUI_TREE_NODE, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nested = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"treeitem\"],\n    hostVars: 2,\n    hostBindings: function TuiTreeItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"_expandable\", ctx.isExpandable);\n      }\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature(TUI_TREE_ITEM_PROVIDERS)],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 9,\n    consts: [[\"template\", \"\"], [4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"role\", \"group\", \"class\", \"t-children\", 3, \"expanded\", 4, \"ngIf\"], [4, \"ngIf\"], [\"role\", \"group\", 1, \"t-children\", 3, \"expanded\"]],\n    template: function TuiTreeItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵtemplate(0, TuiTreeItemComponent_ng_template_0_Template, 1, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(2, TuiTreeItemComponent_ng_container_2_Template, 2, 1, \"ng-container\", 1)(3, TuiTreeItemComponent_tui_expand_3_Template, 5, 3, \"tui-expand\", 2)(4, TuiTreeItemComponent_ng_container_4_Template, 1, 0, \"ng-container\", 3);\n        i0.ɵɵpipe(5, \"async\");\n      }\n      if (rf & 2) {\n        const template_r3 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"polymorpheusOutlet\", ctx.content)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction2(6, _c2, ctx, template_r3));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.isExpandable);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(5, 4, ctx.attached$));\n      }\n    },\n    dependencies: [i1.TuiExpandComponent, i2$1.PolymorpheusOutletDirective, i2.NgIf, i2.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block}.t-children[_ngcontent-%COMP%]{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\"],\n    changeDetection: 0\n  });\n  return TuiTreeItemComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeNodeDirective = /*#__PURE__*/(() => {\n  class TuiTreeNodeDirective {\n    constructor(directive, component) {\n      this.directive = directive;\n      this.component = component;\n    }\n    set value(value) {\n      var _a;\n      (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);\n    }\n    ngOnDestroy() {\n      var _a;\n      (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);\n    }\n  }\n  TuiTreeNodeDirective.ɵfac = function TuiTreeNodeDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeNodeDirective)(i0.ɵɵdirectiveInject(TUI_TREE_ACCESSOR, 8), i0.ɵɵdirectiveInject(TuiTreeItemComponent));\n  };\n  TuiTreeNodeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTreeNodeDirective,\n    selectors: [[\"tui-tree-item\", \"tuiTreeNode\", \"\"]],\n    inputs: {\n      value: [0, \"tuiTreeNode\", \"value\"]\n    },\n    standalone: false\n  });\n  return TuiTreeNodeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeComponent = /*#__PURE__*/(() => {\n  class TuiTreeComponent {\n    constructor(directive) {\n      this.directive = directive;\n      this.check$ = new Subject();\n      this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());\n      this.trackBy = (_, item) => item;\n      this.content = ({\n        $implicit\n      }) => String($implicit);\n    }\n    ngDoCheck() {\n      this.checkChanges();\n    }\n    checkChanges() {\n      var _a, _b;\n      this.check$.next();\n      (_a = this.item) === null || _a === void 0 ? void 0 : _a.checkChanges();\n      (_b = this.child) === null || _b === void 0 ? void 0 : _b.checkChanges();\n    }\n    get handler() {\n      var _a;\n      return ((_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) || TuiTreeChildrenDirective.defaultHandler;\n    }\n  }\n  TuiTreeComponent.ɵfac = function TuiTreeComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeComponent)(i0.ɵɵdirectiveInject(TuiTreeChildrenDirective, 8));\n  };\n  TuiTreeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiTreeComponent,\n    selectors: [[\"tui-tree\", \"value\", \"\"]],\n    viewQuery: function TuiTreeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiTreeItemComponent, 5);\n        i0.ɵɵviewQuery(TuiTreeComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.item = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.child = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\"],\n    inputs: {\n      value: \"value\",\n      trackBy: \"trackBy\",\n      content: \"content\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_TREE_NODE,\n      useExisting: TuiTreeComponent\n    }])],\n    attrs: _c3,\n    decls: 2,\n    vars: 3,\n    consts: [[\"view\", \"\"], [3, \"tuiTreeNode\", 4, \"tuiLet\"], [3, \"tuiTreeNode\"], [4, \"ngIf\"], [3, \"content\", \"trackBy\", \"value\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [3, \"content\", \"trackBy\", \"value\"]],\n    template: function TuiTreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TuiTreeComponent_tui_tree_item_0_Template, 4, 4, \"tui-tree-item\", 1);\n        i0.ɵɵpipe(1, \"async\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"tuiLet\", i0.ɵɵpipeBind1(1, 1, ctx.children$));\n      }\n    },\n    dependencies: [TuiTreeItemComponent, TuiTreeComponent, i2$2.TuiLetDirective, TuiTreeNodeDirective, i2.NgIf, i2$1.PolymorpheusOutletDirective, i2.NgForOf, i2.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:block}\"],\n    changeDetection: 0\n  });\n  return TuiTreeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeControllerDirective = /*#__PURE__*/(() => {\n  class TuiTreeControllerDirective {\n    constructor() {\n      this.fallback = true;\n      this.map = new Map();\n      this.toggled = new EventEmitter();\n      this.items = new Map();\n    }\n    register(item, value) {\n      this.items.set(item, value);\n    }\n    unregister(item) {\n      this.items.delete(item);\n    }\n    isExpanded(item) {\n      var _a;\n      const value = this.items.get(item);\n      return (_a = value && this.map.get(value)) !== null && _a !== void 0 ? _a : this.fallback;\n    }\n    toggle(item) {\n      const value = this.items.get(item);\n      const expanded = this.isExpanded(item);\n      if (!tuiIsPresent(value)) {\n        return;\n      }\n      this.toggled.emit(value);\n      this.map.set(value, !expanded);\n    }\n  }\n  TuiTreeControllerDirective.ɵfac = function TuiTreeControllerDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeControllerDirective)();\n  };\n  TuiTreeControllerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTreeControllerDirective,\n    selectors: [[\"\", \"tuiTreeController\", \"\", \"map\", \"\"]],\n    inputs: {\n      fallback: [0, \"tuiTreeController\", \"fallback\"],\n      map: \"map\"\n    },\n    outputs: {\n      toggled: \"toggled\"\n    },\n    exportAs: [\"tuiTreeController\"],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_TREE_ACCESSOR,\n      useExisting: TuiTreeControllerDirective\n    }, {\n      provide: TUI_TREE_CONTROLLER,\n      useExisting: TuiTreeControllerDirective\n    }])]\n  });\n  return TuiTreeControllerDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeItemControllerDirective = /*#__PURE__*/(() => {\n  class TuiTreeItemControllerDirective {\n    constructor() {\n      this.map = new WeakMap();\n      this.fallback = true;\n    }\n    isExpanded(item) {\n      var _a;\n      return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;\n    }\n    toggle(item) {\n      this.map.set(item, !this.isExpanded(item));\n    }\n  }\n  TuiTreeItemControllerDirective.ɵfac = function TuiTreeItemControllerDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeItemControllerDirective)();\n  };\n  TuiTreeItemControllerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiTreeItemControllerDirective,\n    selectors: [[\"\", \"tuiTreeController\", \"\", 3, \"map\", \"\"]],\n    inputs: {\n      fallback: [0, \"tuiTreeController\", \"fallback\"]\n    },\n    exportAs: [\"tuiTreeController\"],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TUI_TREE_CONTROLLER,\n      useExisting: TuiTreeItemControllerDirective\n    }])]\n  });\n  return TuiTreeItemControllerDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeService = /*#__PURE__*/(() => {\n  class TuiTreeService {\n    constructor(loading, start, loader) {\n      this.loading = loading;\n      this.start = start;\n      this.loader = loader;\n      this.map = new Map([[this.loading, []]]);\n      this.load$ = new Subject();\n      this.data$ = this.load$.pipe(switchMap(item => this.loader.loadChildren(item).pipe(tap(children => this.map.set(item, children)), map(children => children.filter(item => !this.loader.hasChildren(item))), tap(children => children.forEach(child => this.map.set(child, []))))), startWith(null), map(() => this.start));\n    }\n    getChildren(item) {\n      return this.map.get(item) || [this.loading];\n    }\n    loadChildren(item) {\n      if (this.map.get(item)) {\n        return;\n      }\n      this.map.set(item, [this.loading]);\n      this.load$.next(item);\n    }\n  }\n  TuiTreeService.ɵfac = function TuiTreeService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeService)(i0.ɵɵinject(TUI_TREE_LOADING), i0.ɵɵinject(TUI_TREE_START), i0.ɵɵinject(TUI_TREE_LOADER));\n  };\n  TuiTreeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TuiTreeService,\n    factory: TuiTreeService.ɵfac\n  });\n  return TuiTreeService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiTreeModule = /*#__PURE__*/(() => {\n  class TuiTreeModule {}\n  TuiTreeModule.ɵfac = function TuiTreeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiTreeModule)();\n  };\n  TuiTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiTreeModule\n  });\n  TuiTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, PolymorpheusModule, TuiExpandModule, TuiLetModule, TuiButtonModule]]\n  });\n  return TuiTreeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_DEFAULT_TREE_CONTROLLER, TUI_TREE_ACCESSOR, TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_ITEM_CONTENT, TUI_TREE_ITEM_PROVIDERS, TUI_TREE_LEVEL, TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_NODE, TUI_TREE_START, TuiTreeChildrenDirective, TuiTreeComponent, TuiTreeControllerDirective, TuiTreeItemComponent, TuiTreeItemContentComponent, TuiTreeItemControllerDirective, TuiTreeModule, TuiTreeNodeDirective, TuiTreeService };\n//# sourceMappingURL=taiga-ui-kit-components-tree.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}