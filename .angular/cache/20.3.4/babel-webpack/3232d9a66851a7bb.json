{"ast":null,"code":"import { DestroyRef, ElementRef, inject, signal, Renderer2 } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TuiDialogCloseService, TuiDialogService } from '@taiga-ui/core';\nimport { TUI_PROMPT } from '@taiga-ui/kit';\nimport { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';\nimport { filter, of, switchMap, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CloseConfirmationDialogHandler = /*#__PURE__*/(() => {\n  class CloseConfirmationDialogHandler {\n    #renderer = inject(Renderer2);\n    #el = inject(ElementRef);\n    #dialogService = inject(TuiDialogService);\n    #close$ = inject(TuiDialogCloseService);\n    #router = inject(Router);\n    #isDirtySignal = signal(false, ...(ngDevMode ? [{\n      debugName: \"#isDirtySignal\"\n    }] : []));\n    #snapshot;\n    #form;\n    fb = inject(FormBuilder);\n    destroyRef = inject(DestroyRef);\n    context = inject(POLYMORPHEUS_CONTEXT);\n    $isDirty = this.#isDirtySignal.asReadonly();\n    constructor() {\n      this.#handleCloseChanges();\n    }\n    get form() {\n      return this.#form;\n    }\n    ngAfterViewInit() {\n      this.#addWrapper();\n    }\n    handleBeforeUnload(event) {\n      if (this.$isDirty()) {\n        event.preventDefault();\n        event.returnValue = ''; // для некоторых старых браузеров требуется установить returnValue\n      }\n    }\n    setForm(form) {\n      this.#form = form;\n      this.#takeFormSnapshot(form.getRawValue());\n      this.#handleIsDirtyFormChanges();\n    }\n    resetForm(data) {\n      if (this.form instanceof FormGroup) this.form.patchValue(data, {\n        emitEvent: false\n      });\n      this.#takeFormSnapshot(data);\n    }\n    close(data) {\n      if (data) this.context.completeWith(data);\n      this.context.$implicit.complete();\n    }\n    goBack(url) {\n      const goBack = () => this.#navigateTo(url);\n      return this.#attemptClose().pipe(filter(Boolean), tap(goBack));\n    }\n    goToDialog(url) {\n      const toAccountDialog = () => {\n        setTimeout(() => this.#navigateTo(url));\n      };\n      return this.#attemptClose().pipe(filter(Boolean), tap(() => this.close()), tap(toAccountDialog));\n    }\n    #navigateTo(url) {\n      void this.#router.navigate([url], {\n        queryParamsHandling: 'preserve'\n      });\n    }\n    #attemptClose() {\n      if (!this.$isDirty()) return of(true);\n      const data = {\n        content: 'Внесенные изменения не сохранятся',\n        yes: 'Закрыть',\n        no: 'Отменить'\n      };\n      const label = 'Вы уверены, что хотите закрыть окно?';\n      const options = {\n        appearance: 'delete',\n        label,\n        size: 's',\n        data,\n        closeable: false\n      };\n      return this.#dialogService.open(TUI_PROMPT, options);\n    }\n    #takeFormSnapshot(data) {\n      this.#snapshot = data;\n      this.#isDirtySignal.set(false);\n    }\n    #addWrapper() {\n      const wrapper = this.#renderer.createElement('div');\n      this.#renderer.addClass(wrapper, 'wrapper');\n      while (this.#el.nativeElement.childNodes.length) {\n        this.#renderer.appendChild(wrapper, this.#el.nativeElement.childNodes[0]);\n      }\n      this.#el.nativeElement.appendChild(wrapper);\n    }\n    #isDirtyCheck(value) {\n      if (!value) return false;\n      return JSON.stringify(this.#snapshot) !== JSON.stringify(value);\n    }\n    #handleIsDirtyFormChanges() {\n      const isDirty = () => this.#isDirtySignal.set(this.#isDirtyCheck(this.form.getRawValue()));\n      this.form.valueChanges.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(isDirty);\n    }\n    #handleCloseChanges() {\n      this.#close$.pipe(switchMap(this.#attemptClose.bind(this)), filter(Boolean), takeUntilDestroyed(this.destroyRef)).subscribe(() => this.close());\n    }\n    static ɵfac = function CloseConfirmationDialogHandler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CloseConfirmationDialogHandler)();\n    };\n    static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: CloseConfirmationDialogHandler,\n      hostBindings: function CloseConfirmationDialogHandler_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"beforeunload\", function CloseConfirmationDialogHandler_beforeunload_HostBindingHandler($event) {\n            return ctx.handleBeforeUnload($event);\n          }, i0.ɵɵresolveWindow);\n        }\n      }\n    });\n  }\n  return CloseConfirmationDialogHandler;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}