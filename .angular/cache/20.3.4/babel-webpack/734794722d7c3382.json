{"ast":null,"code":"import { inject, signal } from '@angular/core';\nimport { LoginFormService } from '../login-form';\nimport { AuthService } from '../../../../../auth/services';\nimport { Router } from '@angular/router';\nimport { finalize, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    #loginFormService = inject(LoginFormService);\n    #authService = inject(AuthService);\n    #router = inject(Router);\n    #isLoading = signal(false, ...(ngDevMode ? [{\n      debugName: \"#isLoading\"\n    }] : []));\n    $form = this.#loginFormService.$form;\n    $isLoading = this.#isLoading.asReadonly();\n    constructor() {\n      this.#initData();\n    }\n    login() {\n      this.#setLoading(true);\n      const navigateToClients = () => {\n        this.#router.navigate(['/clients']);\n      };\n      return this.#authService.loginWithCredentials(this.$form().getRawValue()).pipe(tap(navigateToClients), finalize(this.#setLoading.bind(this)));\n    }\n    #initData() {\n      return this.#loginFormService.initForm();\n    }\n    #setLoading(value = false) {\n      this.#isLoading.set(value);\n    }\n    static ɵfac = function LoginService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LoginService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac\n    });\n  }\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}