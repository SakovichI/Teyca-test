{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { createOperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nexport function fromFetch(input, initWithSelector = {}) {\n  const {\n      selector\n    } = initWithSelector,\n    init = __rest(initWithSelector, [\"selector\"]);\n  return new Observable(subscriber => {\n    const controller = new AbortController();\n    const {\n      signal\n    } = controller;\n    let abortable = true;\n    const {\n      signal: outerSignal\n    } = init;\n    if (outerSignal) {\n      if (outerSignal.aborted) {\n        controller.abort();\n      } else {\n        const outerSignalHandler = () => {\n          if (!signal.aborted) {\n            controller.abort();\n          }\n        };\n        outerSignal.addEventListener('abort', outerSignalHandler);\n        subscriber.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));\n      }\n    }\n    const perSubscriberInit = Object.assign(Object.assign({}, init), {\n      signal\n    });\n    const handleError = err => {\n      abortable = false;\n      subscriber.error(err);\n    };\n    fetch(input, perSubscriberInit).then(response => {\n      if (selector) {\n        innerFrom(selector(response)).subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n          abortable = false;\n          subscriber.complete();\n        }, handleError));\n      } else {\n        abortable = false;\n        subscriber.next(response);\n        subscriber.complete();\n      }\n    }).catch(handleError);\n    return () => {\n      if (abortable) {\n        controller.abort();\n      }\n    };\n  });\n}\n//# sourceMappingURL=fetch.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}