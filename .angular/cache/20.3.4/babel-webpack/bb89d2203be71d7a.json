{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Inject, Input, inject, ElementRef, Pipe, NgModule } from '@angular/core';\nimport { TUI_ICON_RESOLVER } from '@taiga-ui/experimental/tokens';\nimport { TUI_ICON_COLORED } from '@taiga-ui/experimental/constants';\nlet TuiIconComponent = /*#__PURE__*/(() => {\n  class TuiIconComponent {\n    constructor(resolver) {\n      this.resolver = resolver;\n      this.icon = '';\n      this.background = '';\n    }\n  }\n  TuiIconComponent.ɵfac = function TuiIconComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiIconComponent)(i0.ɵɵdirectiveInject(TUI_ICON_RESOLVER));\n  };\n  TuiIconComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiIconComponent,\n    selectors: [[\"tui-icon\"]],\n    hostVars: 6,\n    hostBindings: function TuiIconComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"--t-mask\", \"url(\" + ctx.resolver(ctx.icon) + \")\")(\"--t-mask-bg\", ctx.background ? \"url(\" + ctx.resolver(ctx.background).replace(\"Outline\", \"\") + \")\" : null);\n        i0.ɵɵclassProp(\"_duo\", ctx.background);\n      }\n    },\n    inputs: {\n      icon: \"icon\",\n      background: \"background\"\n    },\n    standalone: false,\n    decls: 0,\n    vars: 0,\n    template: function TuiIconComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%]{position:relative;display:inline-block;width:1em;height:1em;font-size:1.5rem;flex-shrink:0;vertical-align:middle}._duo[_nghost-%COMP%]{-webkit-mask:var(--t-mask-bg) no-repeat center / contain;mask:var(--t-mask-bg) no-repeat center / contain}[_nghost-%COMP%]:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\\\"\\\";-webkit-mask:var(--t-mask) no-repeat center / contain;mask:var(--t-mask) no-repeat center / contain;background:currentColor}\"],\n    changeDetection: 0\n  });\n  return TuiIconComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiIconPipe = /*#__PURE__*/(() => {\n  class TuiIconPipe {\n    constructor() {\n      this.transform = inject(TUI_ICON_RESOLVER);\n      this.el = inject(ElementRef).nativeElement;\n      // TODO: Consider another way in v4.0\n      /**\n       * This would cause dispatch after parent component change detection run\n       * and handlers (such HostListener) will be attached\n       */\n      void Promise.resolve().then(() => this.el.dispatchEvent(new CustomEvent(TUI_ICON_COLORED, {\n        bubbles: true\n      })));\n    }\n  }\n  TuiIconPipe.ɵfac = function TuiIconPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiIconPipe)();\n  };\n  TuiIconPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"tuiIcon\",\n    type: TuiIconPipe,\n    pure: true,\n    standalone: false\n  });\n  return TuiIconPipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiIconModule = /*#__PURE__*/(() => {\n  class TuiIconModule {}\n  TuiIconModule.ɵfac = function TuiIconModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiIconModule)();\n  };\n  TuiIconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiIconModule\n  });\n  TuiIconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TuiIconModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiIconComponent, TuiIconModule, TuiIconPipe };\n//# sourceMappingURL=taiga-ui-experimental-components-icon.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}