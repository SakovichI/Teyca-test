{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Inject, Attribute, ElementRef, Injectable, NgModule } from '@angular/core';\nimport * as i1 from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nconst SafeObserver = typeof IntersectionObserver !== `undefined` ? IntersectionObserver : class {\n  constructor() {\n    this.root = null;\n    this.rootMargin = ``;\n    this.thresholds = [];\n  }\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n  takeRecords() {\n    return [];\n  }\n};\nconst INTERSECTION_ROOT = /*#__PURE__*/new InjectionToken('Root element for IntersectionObserver');\nconst INTERSECTION_ROOT_MARGIN_DEFAULT = '0px 0px 0px 0px';\nconst INTERSECTION_ROOT_MARGIN = /*#__PURE__*/new InjectionToken('rootMargin for IntersectionObserver', {\n  providedIn: 'root',\n  factory: () => INTERSECTION_ROOT_MARGIN_DEFAULT\n});\nfunction rootMarginFactory(rootMargin) {\n  return rootMargin || INTERSECTION_ROOT_MARGIN_DEFAULT;\n}\nconst INTERSECTION_THRESHOLD_DEFAULT = 0;\nconst INTERSECTION_THRESHOLD = /*#__PURE__*/new InjectionToken('threshold for IntersectionObserver', {\n  providedIn: 'root',\n  factory: () => INTERSECTION_THRESHOLD_DEFAULT\n});\nfunction thresholdFactory(threshold) {\n  return (threshold === null || threshold === void 0 ? void 0 : threshold.split(',').map(parseFloat)) || INTERSECTION_THRESHOLD_DEFAULT;\n}\nlet IntersectionObserverDirective = /*#__PURE__*/(() => {\n  class IntersectionObserverDirective extends SafeObserver {\n    constructor(root, rootMargin, threshold) {\n      super(entries => {\n        this.callbacks.forEach((callback, element) => {\n          const filtered = entries.filter(({\n            target\n          }) => target === element);\n          return filtered.length && callback(filtered, this);\n        });\n      }, {\n        root: root && root.nativeElement,\n        rootMargin: rootMarginFactory(rootMargin),\n        threshold: thresholdFactory(threshold)\n      });\n      this.callbacks = new Map();\n    }\n    observe(target, callback = () => {}) {\n      super.observe(target);\n      this.callbacks.set(target, callback);\n    }\n    unobserve(target) {\n      super.unobserve(target);\n      this.callbacks.delete(target);\n    }\n    ngOnDestroy() {\n      this.disconnect();\n    }\n  }\n  IntersectionObserverDirective.ɵfac = function IntersectionObserverDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || IntersectionObserverDirective)(i0.ɵɵdirectiveInject(INTERSECTION_ROOT, 8), i0.ɵɵinjectAttribute('waIntersectionRootMargin'), i0.ɵɵinjectAttribute('waIntersectionThreshold'));\n  };\n  IntersectionObserverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: IntersectionObserverDirective,\n    selectors: [[\"\", \"waIntersectionObserver\", \"\"]],\n    exportAs: [\"IntersectionObserver\"],\n    standalone: false,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return IntersectionObserverDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IntersectionObserveeService = /*#__PURE__*/(() => {\n  class IntersectionObserveeService extends Observable {\n    constructor({\n      nativeElement\n    }, observer) {\n      super(subscriber => {\n        observer.observe(nativeElement, entries => {\n          subscriber.next(entries);\n        });\n        return () => {\n          observer.unobserve(nativeElement);\n        };\n      });\n      return this.pipe(share());\n    }\n  }\n  IntersectionObserveeService.ɵfac = function IntersectionObserveeService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || IntersectionObserveeService)(i0.ɵɵinject(ElementRef), i0.ɵɵinject(IntersectionObserverDirective));\n  };\n  IntersectionObserveeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IntersectionObserveeService,\n    factory: IntersectionObserveeService.ɵfac\n  });\n  return IntersectionObserveeService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IntersectionObserveeDirective = /*#__PURE__*/(() => {\n  class IntersectionObserveeDirective {\n    constructor(waIntersectionObservee) {\n      this.waIntersectionObservee = waIntersectionObservee;\n    }\n  }\n  IntersectionObserveeDirective.ɵfac = function IntersectionObserveeDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || IntersectionObserveeDirective)(i0.ɵɵdirectiveInject(IntersectionObserveeService));\n  };\n  IntersectionObserveeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: IntersectionObserveeDirective,\n    selectors: [[\"\", \"waIntersectionObservee\", \"\"]],\n    outputs: {\n      waIntersectionObservee: \"waIntersectionObservee\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([IntersectionObserveeService])]\n  });\n  return IntersectionObserveeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IntersectionRootDirective = /*#__PURE__*/(() => {\n  class IntersectionRootDirective {}\n  IntersectionRootDirective.ɵfac = function IntersectionRootDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || IntersectionRootDirective)();\n  };\n  IntersectionRootDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: IntersectionRootDirective,\n    selectors: [[\"\", \"waIntersectionRoot\", \"\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: INTERSECTION_ROOT,\n      useExisting: ElementRef\n    }])]\n  });\n  return IntersectionRootDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IntersectionObserverModule = /*#__PURE__*/(() => {\n  class IntersectionObserverModule {}\n  IntersectionObserverModule.ɵfac = function IntersectionObserverModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || IntersectionObserverModule)();\n  };\n  IntersectionObserverModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IntersectionObserverModule\n  });\n  IntersectionObserverModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return IntersectionObserverModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @deprecated Always true. Kept for backward compatibility.\n */\nconst INTERSECTION_OBSERVER_SUPPORT = /*#__PURE__*/new InjectionToken('Intersection Observer API support', {\n  providedIn: 'root',\n  factory: () => true\n});\nlet IntersectionObserverService = /*#__PURE__*/(() => {\n  class IntersectionObserverService extends Observable {\n    constructor({\n      nativeElement\n    }, _support, rootMargin, threshold, root) {\n      super(subscriber => {\n        const observer = new SafeObserver(entries => {\n          subscriber.next(entries);\n        }, {\n          root: root === null || root === void 0 ? void 0 : root.nativeElement,\n          rootMargin,\n          threshold\n        });\n        observer.observe(nativeElement);\n        return () => {\n          observer.disconnect();\n        };\n      });\n    }\n  }\n  IntersectionObserverService.ɵfac = function IntersectionObserverService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || IntersectionObserverService)(i0.ɵɵinject(ElementRef), i0.ɵɵinject(INTERSECTION_OBSERVER_SUPPORT), i0.ɵɵinject(INTERSECTION_ROOT_MARGIN), i0.ɵɵinject(INTERSECTION_THRESHOLD), i0.ɵɵinject(INTERSECTION_ROOT, 8));\n  };\n  IntersectionObserverService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IntersectionObserverService,\n    factory: IntersectionObserverService.ɵfac\n  });\n  return IntersectionObserverService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Public API Surface of @ng-web-apis/intersection-observer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INTERSECTION_OBSERVER_SUPPORT, INTERSECTION_ROOT, INTERSECTION_ROOT_MARGIN, INTERSECTION_ROOT_MARGIN_DEFAULT, INTERSECTION_THRESHOLD, INTERSECTION_THRESHOLD_DEFAULT, IntersectionObserveeDirective, IntersectionObserveeService, IntersectionObserverDirective, IntersectionObserverModule, IntersectionObserverService, IntersectionRootDirective };\n//# sourceMappingURL=ng-web-apis-intersection-observer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}