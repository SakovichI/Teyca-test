{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Directive, Inject, ChangeDetectorRef, inject, Component, ChangeDetectionStrategy, Optional, Self, ViewChild, Input, HostBinding, HostListener, NgModule } from '@angular/core';\nimport * as i8 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';\nimport { maskitoDateOptionsGenerator } from '@maskito/kit';\nimport * as i2 from '@taiga-ui/cdk';\nimport { DATE_FILLER_LENGTH, TuiDay, TUI_DATE_FORMAT, AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TuiMonth, changeDateSeparator, TUI_FIRST_DAY, TUI_LAST_DAY, tuiDateClamp, TUI_LAST_DISPLAYED_DAY, tuiNullableSame, TUI_IS_MOBILE, TUI_DATE_SEPARATOR, tuiAsFocusableItemAccessor, tuiAsControl, InjectFlags, tuiPure, TuiPreventDefaultModule, TuiLetModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { TUI_TEXTFIELD_HOST, TUI_DEFAULT_MARKER_HANDLER, TUI_TEXTFIELD_SIZE, TUI_DROPDOWN_COMPONENT, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/kit/constants';\nimport { TUI_MOBILE_CALENDAR, TUI_DATE_TEXTS, TUI_DATE_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, tuiDateStreamWithTransformer } from '@taiga-ui/kit/tokens';\nimport { map } from 'rxjs/operators';\nimport * as i3 from '@taiga-ui/kit/directives';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i4 from '@maskito/angular';\nimport { MaskitoModule } from '@maskito/angular';\nimport * as i5 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i9 from 'rxjs';\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nfunction TuiInputDateComponent_tui_primitive_textfield_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-primitive-textfield\", 5);\n    i0.ɵɵlistener(\"focusedChange\", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onFocused($event));\n    })(\"valueChange\", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onValueChange($event));\n    });\n    i0.ɵɵprojection(1);\n    i0.ɵɵprojection(2, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const filler_r4 = ctx.tuiLet;\n    const ctx_r2 = i0.ɵɵnextContext();\n    const iconContent_r5 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.computedDisabled)(\"focusable\", ctx_r2.computedFocusable)(\"invalid\", ctx_r2.computedInvalid)(\"maskito\", ctx_r2.computedMask)(\"nativeId\", ctx_r2.nativeId)(\"pseudoFocus\", ctx_r2.pseudoFocus)(\"pseudoHover\", ctx_r2.pseudoHover)(\"readOnly\", ctx_r2.readOnly)(\"tuiTextfieldFiller\", ctx_r2.getComputedFiller(filler_r4 || \"\"))(\"tuiTextfieldIcon\", ctx_r2.calendarIcon && iconContent_r5)(\"value\", ctx_r2.computedValue);\n  }\n}\nfunction TuiInputDateComponent_ng_template_3_tui_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-svg\", 8);\n    i0.ɵɵlistener(\"click\", function TuiInputDateComponent_ng_template_3_tui_svg_0_Template_tui_svg_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onIconClick());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const src_r7 = ctx.polymorpheusOutlet;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"t-icon\", !ctx_r2.computedDisabled);\n    i0.ɵɵproperty(\"readOnly\", ctx_r2.readOnly)(\"src\", src_r7);\n  }\n}\nfunction TuiInputDateComponent_ng_template_3_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 9);\n  }\n}\nfunction TuiInputDateComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TuiInputDateComponent_ng_template_3_tui_svg_0_Template, 1, 4, \"tui-svg\", 6)(1, TuiInputDateComponent_ng_template_3_input_1_Template, 1, 0, \"input\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", ctx_r2.calendarIcon)(\"polymorpheusOutletContext\", i0.ɵɵpureFunction1(3, _c2, ctx_r2.size));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.nativePicker);\n  }\n}\nfunction TuiInputDateComponent_ng_template_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function TuiInputDateComponent_ng_template_5_div_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onDayClick(ctx_r2.items[0].day));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.items[0], \" \");\n  }\n}\nfunction TuiInputDateComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tui-calendar\", 10);\n    i0.ɵɵlistener(\"dayClick\", function TuiInputDateComponent_ng_template_5_Template_tui_calendar_dayClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDayClick($event));\n    })(\"monthChange\", function TuiInputDateComponent_ng_template_5_Template_tui_calendar_monthChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onMonthChange($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(1, TuiInputDateComponent_ng_template_5_div_1_Template, 3, 1, \"div\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabledItemHandler\", ctx_r2.disabledItemHandler)(\"markerHandler\", ctx_r2.markerHandler)(\"max\", ctx_r2.max)(\"min\", ctx_r2.min)(\"month\", ctx_r2.computedActiveYearMonth)(\"value\", ctx_r2.value);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.items.length === 1);\n  }\n}\nlet TuiNativeDateDirective = /*#__PURE__*/(() => {\n  class TuiNativeDateDirective {\n    constructor(host, dateFormat) {\n      this.host = host;\n      this.dateFormat = dateFormat;\n    }\n    get value() {\n      return this.host.value.length === DATE_FILLER_LENGTH ? TuiDay.normalizeParse(this.host.value, this.dateFormat).toString('YMD', '-') : '';\n    }\n    get max() {\n      return this.host.max.toJSON();\n    }\n    get min() {\n      return this.host.min.toJSON();\n    }\n    onChange(value) {\n      this.host.onValueChange(value ? TuiDay.normalizeParse(value, 'YMD').toString(this.dateFormat) : '');\n    }\n  }\n  TuiNativeDateDirective.ɵfac = function TuiNativeDateDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiNativeDateDirective)(i0.ɵɵdirectiveInject(TUI_TEXTFIELD_HOST), i0.ɵɵdirectiveInject(TUI_DATE_FORMAT));\n  };\n  TuiNativeDateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiNativeDateDirective,\n    selectors: [[\"input\", \"tuiDate\", \"\"]],\n    hostAttrs: [\"type\", \"date\"],\n    hostVars: 4,\n    hostBindings: function TuiNativeDateDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function TuiNativeDateDirective_change_HostBindingHandler($event) {\n          return ctx.onChange($event.target.value);\n        })(\"click.stop.silent\", function TuiNativeDateDirective_click_stop_silent_HostBindingHandler() {\n          return 0;\n        })(\"input.stop.silent\", function TuiNativeDateDirective_input_stop_silent_HostBindingHandler() {\n          return 0;\n        })(\"mousedown.stop.silent\", function TuiNativeDateDirective_mousedown_stop_silent_HostBindingHandler() {\n          return 0;\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵdomProperty(\"tabIndex\", -1)(\"value\", ctx.value)(\"max\", ctx.max)(\"min\", ctx.min);\n      }\n    },\n    standalone: false\n  });\n  return TuiNativeDateDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateComponent = /*#__PURE__*/(() => {\n  class TuiInputDateComponent extends AbstractTuiNullableControl {\n    constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize) {\n      super(control, cdr, valueTransformer);\n      this.isMobile = isMobile;\n      this.mobileCalendar = mobileCalendar;\n      this.dateFormat = dateFormat;\n      this.dateSeparator = dateSeparator;\n      this.dateTexts$ = dateTexts$;\n      this.valueTransformer = valueTransformer;\n      this.options = options;\n      this.textfieldSize = textfieldSize;\n      this.month = null;\n      this.min = this.options.min;\n      this.max = this.options.max;\n      this.disabledItemHandler = ALWAYS_FALSE_HANDLER;\n      this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;\n      this.items = [];\n      this.defaultActiveYearMonth = TuiMonth.currentLocal();\n      this.open = false;\n      this.filler$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get computedMin() {\n      var _a, _b;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {\n        return TUI_FIRST_DAY;\n      }\n      return (_b = this.min) !== null && _b !== void 0 ? _b : this.options.min;\n    }\n    get computedMax() {\n      var _a, _b;\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      if (this.value && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.pristine)) {\n        return TUI_LAST_DAY;\n      }\n      return (_b = this.max) !== null && _b !== void 0 ? _b : this.options.max;\n    }\n    get nativeFocusableElement() {\n      var _a, _b;\n      return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;\n    }\n    get focused() {\n      var _a;\n      return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);\n    }\n    /**\n     * @deprecated\n     */\n    get computedMobile() {\n      return this.isMobile && (!!this.mobileCalendar || this.nativePicker);\n    }\n    get nativePicker() {\n      return this.options.nativePicker && this.isMobile;\n    }\n    get calendarIcon() {\n      return this.options.icon;\n    }\n    get computedValue() {\n      const {\n        value,\n        nativeValue,\n        activeItem\n      } = this;\n      if (activeItem) {\n        return String(activeItem);\n      }\n      return value ? value.toString(this.dateFormat, this.dateSeparator) : nativeValue;\n    }\n    get computedActiveYearMonth() {\n      var _a, _b;\n      const clampedDate = tuiDateClamp(this.defaultActiveYearMonth, this.computedMin, this.computedMax);\n      if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.dayAfter(TUI_LAST_DISPLAYED_DAY)) {\n        return this.month || clampedDate;\n      }\n      if (this.items[0] && ((_b = this.value) === null || _b === void 0 ? void 0 : _b.daySame(this.items[0].day))) {\n        return this.items[0].displayDay;\n      }\n      return this.month || this.value || clampedDate;\n    }\n    get nativeValue() {\n      var _a;\n      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';\n    }\n    set nativeValue(value) {\n      if (this.nativeFocusableElement) {\n        this.nativeFocusableElement.value = value;\n      }\n    }\n    get computedMask() {\n      /**\n       * TODO: we can delete this workaround in v4.0\n       * after solving this issue:\n       * https://github.com/taiga-family/maskito/issues/604\n       */\n      const nativeValueIsNotSynced = this.nativeValue !== this.computedValue;\n      return this.activeItem || nativeValueIsNotSynced ? MASKITO_DEFAULT_OPTIONS : this.computeMaskOptions(this.dateFormat, this.dateSeparator, this.computedMin, this.computedMax);\n    }\n    get activeItem() {\n      const {\n        value\n      } = this;\n      return value && this.items.find(item => item.day.daySame(value)) || null;\n    }\n    onClick() {\n      if (!this.isMobile && this.interactive) {\n        this.open = !this.open;\n      }\n    }\n    getComputedFiller(filler) {\n      return this.activeItem ? '' : filler;\n    }\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * TODO: Remove in 4.0\n     * @deprecated: use {@link onIconClick} instead\n     */\n    onMobileClick() {\n      this.onIconClick();\n    }\n    onIconClick() {\n      if (this.isMobile && this.interactive) {\n        this.open = true;\n      }\n    }\n    onValueChange(value) {\n      if (this.control) {\n        this.control.updateValueAndValidity({\n          emitEvent: false\n        });\n      }\n      if (!value && !this.mobileCalendar) {\n        this.onOpenChange(true);\n      }\n      if (this.activeItem) {\n        this.nativeValue = '';\n      }\n      this.value = value.length !== DATE_FILLER_LENGTH || this.activeItem ? null : TuiDay.normalizeParse(value, this.dateFormat);\n    }\n    onDayClick(value) {\n      this.value = value;\n      this.open = false;\n    }\n    onMonthChange(month) {\n      this.month = month;\n    }\n    onOpenChange(open) {\n      this.open = open;\n    }\n    onFocused(focused) {\n      this.updateFocused(focused);\n    }\n    setDisabledState() {\n      super.setDisabledState();\n      this.open = false;\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = value ? this.computedValue : '';\n    }\n    valueIdenticalComparator(oldValue, newValue) {\n      return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));\n    }\n    computeMaskOptions(mode, separator, min, max) {\n      return maskitoDateOptionsGenerator({\n        separator,\n        mode: TUI_DATE_MODE_MASKITO_ADAPTER[mode],\n        min: min.toLocalNativeDate(),\n        max: max.toLocalNativeDate()\n      });\n    }\n  }\n  TuiInputDateComponent.ɵfac = function TuiInputDateComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputDateComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), i0.ɵɵdirectiveInject(TUI_DATE_FORMAT), i0.ɵɵdirectiveInject(TUI_DATE_SEPARATOR), i0.ɵɵdirectiveInject(TUI_DATE_TEXTS), i0.ɵɵdirectiveInject(TUI_DATE_VALUE_TRANSFORMER, 8), i0.ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));\n  };\n  TuiInputDateComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputDateComponent,\n    selectors: [[\"tui-input-date\", 3, \"multiple\", \"\"]],\n    viewQuery: function TuiInputDateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputDateComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TuiInputDateComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      disabledItemHandler: \"disabledItemHandler\",\n      markerHandler: \"markerHandler\",\n      items: \"items\",\n      defaultActiveYearMonth: \"defaultActiveYearMonth\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateComponent), tuiAsControl(TuiInputDateComponent), tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER), {\n      provide: TUI_DROPDOWN_COMPONENT,\n      useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 7,\n    vars: 7,\n    consts: [[\"iconContent\", \"\"], [\"dropdown\", \"polymorpheus\"], [1, \"t-hosted\", 3, \"openChange\", \"canOpen\", \"content\", \"open\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", \"class\", \"t-textfield\", 3, \"disabled\", \"focusable\", \"invalid\", \"maskito\", \"nativeId\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldFiller\", \"tuiTextfieldIcon\", \"value\", \"focusedChange\", \"valueChange\", 4, \"tuiLet\"], [3, \"polymorpheus\"], [\"automation-id\", \"tui-input-date-range__textfield\", \"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"focusedChange\", \"valueChange\", \"disabled\", \"focusable\", \"invalid\", \"maskito\", \"nativeId\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"tuiTextfieldFiller\", \"tuiTextfieldIcon\", \"value\"], [\"appearance\", \"icon\", \"automation-id\", \"tui-input-date-range__icon\", \"tuiWrapper\", \"\", 3, \"t-icon\", \"readOnly\", \"src\", \"click\", 4, \"polymorpheusOutlet\", \"polymorpheusOutletContext\"], [\"tuiDate\", \"\", \"class\", \"t-native-input\", 4, \"ngIf\"], [\"appearance\", \"icon\", \"automation-id\", \"tui-input-date-range__icon\", \"tuiWrapper\", \"\", 3, \"click\", \"readOnly\", \"src\"], [\"tuiDate\", \"\", 1, \"t-native-input\"], [\"automation-id\", \"tui-input-date__calendar\", \"tuiPreventDefault\", \"mousedown\", 3, \"dayClick\", \"monthChange\", \"disabledItemHandler\", \"markerHandler\", \"max\", \"min\", \"month\", \"value\"], [\"tuiPreventDefault\", \"mousedown\", \"class\", \"t-button\", 4, \"ngIf\"], [\"tuiPreventDefault\", \"mousedown\", 1, \"t-button\"], [\"tuiLink\", \"\", \"type\", \"button\", 3, \"click\"]],\n    template: function TuiInputDateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 2);\n        i0.ɵɵlistener(\"openChange\", function TuiInputDateComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onOpenChange($event));\n        });\n        i0.ɵɵtemplate(1, TuiInputDateComponent_tui_primitive_textfield_1_Template, 3, 11, \"tui-primitive-textfield\", 3);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵtemplate(3, TuiInputDateComponent_ng_template_3_Template, 2, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(5, TuiInputDateComponent_ng_template_5_Template, 2, 7, \"ng-template\", 4, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const dropdown_r10 = i0.ɵɵreference(6);\n        i0.ɵɵproperty(\"canOpen\", ctx.interactive && !ctx.nativePicker)(\"content\", dropdown_r10)(\"open\", ctx.open);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"tuiLet\", i0.ɵɵpipeBind1(2, 5, ctx.filler$));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"polymorpheus\", ctx.type);\n      }\n    },\n    dependencies: [i1.TuiHostedDropdownComponent, i1.TuiPrimitiveTextfieldComponent, i1.TuiSvgComponent, i1.TuiCalendarComponent, i1.TuiLinkComponent, i2.TuiLetDirective, i1.TuiPrimitiveTextfieldDirective, i3.TuiValueAccessorDirective, i4.MaskitoDirective, i1.TuiTextfieldFillerDirective, i1.TuiTextfieldIconDirective, i5.PolymorpheusOutletDirective, i1.TuiWrapperDirective, i6.NgIf, TuiNativeDateDirective, i5.PolymorpheusTemplate, i2.TuiPreventDefaultDirective, i6.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{flex:1;text-align:center}.t-native-input[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputDateComponent.prototype, \"computeMaskOptions\", null);\n  return TuiInputDateComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateDirective = /*#__PURE__*/(() => {\n  class TuiInputDateDirective extends AbstractTuiTextfieldHost {\n    get value() {\n      return this.host.computedValue;\n    }\n    get max() {\n      return this.host.computedMax;\n    }\n    get min() {\n      return this.host.computedMin;\n    }\n    onValueChange(value) {\n      if (!value) {\n        this.host.nativeValue = '';\n      }\n      this.host.onValueChange(value);\n    }\n    process(input) {\n      input.inputMode = 'numeric';\n    }\n  }\n  TuiInputDateDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputDateDirective_BaseFactory;\n    return function TuiInputDateDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputDateDirective_BaseFactory || (ɵTuiInputDateDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputDateDirective)))(__ngFactoryType__ || TuiInputDateDirective);\n    };\n  })();\n  TuiInputDateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputDateDirective,\n    selectors: [[\"tui-input-date\", 3, \"multiple\", \"\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDateDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputDateDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputDateModule = /*#__PURE__*/(() => {\n  class TuiInputDateModule {}\n  TuiInputDateModule.ɵfac = function TuiInputDateModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputDateModule)();\n  };\n  TuiInputDateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputDateModule\n  });\n  TuiInputDateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiLetModule, TuiTextfieldControllerModule]]\n  });\n  return TuiInputDateModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiInputDateComponent, TuiInputDateDirective, TuiInputDateModule };\n//# sourceMappingURL=taiga-ui-kit-components-input-date.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}