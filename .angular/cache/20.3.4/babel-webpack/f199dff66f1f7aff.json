{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injector, Directive, Self, TemplateRef, ChangeDetectorRef, ComponentFactoryResolver, NgModule } from '@angular/core';\n\n/**\n * Use this token to access context within your components when\n * instantiating them through {@link PolymorpheusOutletDirective}\n */\nconst POLYMORPHEUS_CONTEXT = /*#__PURE__*/new InjectionToken('POLYMORPHEUS_CONTEXT');\n\n/**\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletDirective}\n *\n * @param component — an Angular component to be dynamically created\n * @param injector — optional {@link Injector} for lazy loaded module case\n *\n * TODO: Remove second generic as it is irrelevant, remove `null` from injector type\n */\nclass PolymorpheusComponent {\n  constructor(component, i) {\n    this.component = component;\n    this.i = i;\n  }\n  createInjector(injector, useValue) {\n    return Injector.create({\n      parent: this.i || injector,\n      providers: [{\n        provide: POLYMORPHEUS_CONTEXT,\n        useValue\n      }]\n    });\n  }\n}\n\n/**\n * ng-template wrapper directive also stores {@link ChangeDetectorRef} to properly handle change detection.\n */\nlet PolymorpheusTemplate = /*#__PURE__*/(() => {\n  class PolymorpheusTemplate {\n    constructor(template, cdr) {\n      this.template = template;\n      this.cdr = cdr;\n      this.polymorpheus = '';\n    }\n    check() {\n      this.cdr.markForCheck();\n    }\n    static ngTemplateContextGuard(_dir, _ctx) {\n      return true;\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */PolymorpheusTemplate.ɵfac = function PolymorpheusTemplate_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PolymorpheusTemplate)(i0.ɵɵdirectiveInject(i0.TemplateRef, 2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  PolymorpheusTemplate.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PolymorpheusTemplate,\n    selectors: [[\"ng-template\", \"polymorpheus\", \"\"]],\n    inputs: {\n      polymorpheus: \"polymorpheus\"\n    },\n    exportAs: [\"polymorpheus\"],\n    standalone: false\n  });\n  return PolymorpheusTemplate;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass PolymorpheusContext {\n  constructor($implicit) {\n    this.$implicit = $implicit;\n  }\n  get polymorpheusOutlet() {\n    return this.$implicit;\n  }\n}\n/**\n * @deprecated: use {@link PolymorpheusContext} instead\n * Primitive types used as content by {@link PolymorpheusOutletDirective}\n */\nclass PrimitiveContext extends PolymorpheusContext {}\nlet PolymorpheusOutletDirective = /*#__PURE__*/(() => {\n  class PolymorpheusOutletDirective {\n    constructor(vcr, i, t) {\n      this.vcr = vcr;\n      this.i = i;\n      this.t = t;\n      this.content = '';\n    }\n    get template() {\n      if (isDirective(this.content)) {\n        return this.content.template;\n      }\n      return this.content instanceof TemplateRef ? this.content : this.t;\n    }\n    ngOnChanges({\n      content\n    }) {\n      var _a;\n      const context = this.getContext();\n      (_a = this.c) === null || _a === void 0 ? void 0 : _a.injector.get(ChangeDetectorRef).markForCheck();\n      if (!content) {\n        return;\n      }\n      this.vcr.clear();\n      const proxy = context && new Proxy(context, {\n        get: (_, key) => {\n          var _a;\n          return (_a = this.getContext()) === null || _a === void 0 ? void 0 : _a[key];\n        }\n      });\n      if (isComponent(this.content)) {\n        this.process(this.content, proxy);\n      } else if (\n      // tslint:disable-next-line:triple-equals\n      (context instanceof PolymorpheusContext && context.$implicit) != null) {\n        this.vcr.createEmbeddedView(this.template, proxy);\n      }\n    }\n    ngDoCheck() {\n      if (isDirective(this.content)) {\n        this.content.check();\n      }\n    }\n    static ngTemplateContextGuard(_dir, _ctx) {\n      return true;\n    }\n    getContext() {\n      if (isTemplate(this.content) || isComponent(this.content)) {\n        return this.context;\n      }\n      return new PolymorpheusContext(typeof this.content === 'function' ? this.content(this.context) : this.content);\n    }\n    process(content, proxy) {\n      const injector = content.createInjector(this.i, proxy);\n      this.c = this.vcr.createComponent(injector.get(ComponentFactoryResolver).resolveComponentFactory(content.component), 0, injector);\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */PolymorpheusOutletDirective.ɵfac = function PolymorpheusOutletDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PolymorpheusOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n  PolymorpheusOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PolymorpheusOutletDirective,\n    selectors: [[\"\", \"polymorpheusOutlet\", \"\"]],\n    inputs: {\n      content: [0, \"polymorpheusOutlet\", \"content\"],\n      context: [0, \"polymorpheusOutletContext\", \"context\"]\n    },\n    standalone: false,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return PolymorpheusOutletDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isDirective(content) {\n  return content instanceof PolymorpheusTemplate;\n}\nfunction isComponent(content) {\n  return content instanceof PolymorpheusComponent;\n}\nfunction isTemplate(content) {\n  return isDirective(content) || content instanceof TemplateRef;\n}\nlet PolymorpheusModule = /*#__PURE__*/(() => {\n  class PolymorpheusModule {}\n  /** @nocollapse */\n  /** @nocollapse */\n  /** @nocollapse */PolymorpheusModule.ɵfac = function PolymorpheusModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PolymorpheusModule)();\n  };\n  PolymorpheusModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PolymorpheusModule\n  });\n  PolymorpheusModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return PolymorpheusModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Public API Surface of ng-polymorpheus\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule, PolymorpheusOutletDirective, PolymorpheusTemplate };\n//# sourceMappingURL=tinkoff-ng-polymorpheus.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}