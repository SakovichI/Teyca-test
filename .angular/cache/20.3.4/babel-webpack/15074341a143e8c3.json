{"ast":null,"code":"import { inject, isDevMode, InjectionToken, NgZone } from '@angular/core';\nimport { tuiCreateTokenFromFactory, tuiCreateToken, tuiProvideOptions, TuiDayOfWeek, tuiTypedFromEvent, tuiZoneOptimized, TUI_SCROLL_REF as TUI_SCROLL_REF$1, tuiSvgLinearGradientProcessor } from '@taiga-ui/cdk';\nimport { DOCUMENT } from '@angular/common';\nimport { tuiExtractI18n } from '@taiga-ui/i18n';\nimport { tuiIconsPathFactory, tuiIsMobile } from '@taiga-ui/core/utils';\nimport { WINDOW } from '@ng-web-apis/common';\nimport { share, startWith, map, distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';\nimport { TUI_DEFAULT_NUMBER_FORMAT } from '@taiga-ui/core/constants';\nimport { of, merge, identity } from 'rxjs';\nimport { TuiAppearance } from '@taiga-ui/core/enums';\nconst TUI_REDUCED_MOTION = tuiCreateTokenFromFactory(() => {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = inject(DOCUMENT).defaultView) === null || _a === void 0 ? void 0 : _a.matchMedia) === null || _b === void 0 ? void 0 : _b.call(_a, '(prefers-reduced-motion: reduce)').matches) !== null && _c !== void 0 ? _c : false;\n});\nconst TUI_ANIMATIONS_DEFAULT_DURATION = 300;\n/**\n * Duration of all Taiga UI animations in ms\n */\nconst TUI_ANIMATIONS_DURATION = tuiCreateTokenFromFactory(() => inject(TUI_REDUCED_MOTION) ? 0 : TUI_ANIMATIONS_DEFAULT_DURATION);\n\n/**\n * Options for Taiga UI animations\n */\nconst TUI_ANIMATION_OPTIONS = tuiCreateTokenFromFactory(() => ({\n  value: '',\n  params: {\n    duration: inject(TUI_ANIMATIONS_DURATION)\n  }\n}));\n\n/**\n * @deprecated:\n * Flag to enable assertions across Taiga UI\n *\n * The current token no longer matters as\n * it will not be provided in production\n */\nconst TUI_ASSERT_ENABLED = tuiCreateTokenFromFactory(() => isDevMode());\nconst COMMON_ICONS = {\n  check: 'tuiIconCheck',\n  close: 'tuiIconClose',\n  error: 'tuiIconAlertCircle',\n  more: 'tuiIconChevronRight'\n};\nconst TUI_COMMON_ICONS = tuiCreateToken(COMMON_ICONS);\nfunction tuiCommonIconsProvider(icons) {\n  return tuiProvideOptions(TUI_COMMON_ICONS, icons, COMMON_ICONS);\n}\n\n/**\n * Accessor for data-list options\n */\nconst TUI_DATA_LIST_ACCESSOR = /*#__PURE__*/new InjectionToken('[TUI_DATA_LIST_ACCESSOR]');\nfunction tuiAsDataListAccessor(useExisting) {\n  return {\n    provide: TUI_DATA_LIST_ACCESSOR,\n    useExisting\n  };\n}\n\n/**\n * DataList controller\n */\nconst TUI_DATA_LIST_HOST = /*#__PURE__*/new InjectionToken('[TUI_DATA_LIST_HOST]');\nfunction tuiAsDataListHost(useExisting) {\n  return {\n    provide: TUI_DATA_LIST_HOST,\n    useExisting\n  };\n}\n\n/**\n * Token for adding data-type attribute to calendar cell\n */\nconst TUI_DAY_TYPE_HANDLER = tuiCreateToken(day => day.isWeekend ? 'weekend' : 'weekday');\nconst TUI_DOCUMENT_OR_SHADOW_ROOT = /*#__PURE__*/new InjectionToken('[TUI_DOCUMENT_OR_SHADOW_ROOT]');\n\n/**\n * ElementRef when you cannot use @Input for single time injection\n */\nconst TUI_ELEMENT_REF = /*#__PURE__*/new InjectionToken('[TUI_ELEMENT_REF]');\n\n/**\n * The first day of the week index\n */\nconst TUI_FIRST_DAY_OF_WEEK = tuiCreateToken(TuiDayOfWeek.Monday);\n\n/**\n * Localized months names\n */\nconst TUI_MONTHS = tuiCreateTokenFromFactory(tuiExtractI18n('months'));\n/**\n * i18n 'close' word\n */\nconst TUI_CLOSE_WORD = tuiCreateTokenFromFactory(tuiExtractI18n('close'));\n/**\n * i18n 'Nothing found' message\n */\nconst TUI_NOTHING_FOUND_MESSAGE = tuiCreateTokenFromFactory(tuiExtractI18n('nothingFoundMessage'));\n/**\n * i18n of error message\n */\nconst TUI_DEFAULT_ERROR_MESSAGE = tuiCreateTokenFromFactory(tuiExtractI18n('defaultErrorMessage'));\n/**\n * spin i18n texts\n */\nconst TUI_SPIN_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n('spinTexts'));\n/**\n * calendars i18n texts\n */\nconst TUI_SHORT_WEEK_DAYS = tuiCreateTokenFromFactory(tuiExtractI18n('shortWeekDays'));\nconst TUI_DEFAULT_ICONS_PLACE = 'assets/taiga-ui/icons';\n/**\n * Path to icons\n * @deprecated Use {@link TUI_SVG_OPTIONS} instead\n */\nconst TUI_ICONS_PLACE = tuiCreateToken(TUI_DEFAULT_ICONS_PLACE);\n\n/**\n * A key/value dictionary of icon names and src to be defined with TuiSvgService\n */\nconst TUI_ICONS = tuiCreateToken({});\n\n/**\n * A handler to retrieve USE id for icon by name\n * @deprecated Use {@link TUI_SVG_OPTIONS} instead\n */\nconst TUI_ICONS_PATH = tuiCreateTokenFromFactory(() => tuiIconsPathFactory(inject(TUI_ICONS_PLACE)));\n\n/**\n * Token for media constant\n */\nconst TUI_MEDIA = tuiCreateToken({\n  mobile: 768,\n  desktopSmall: 1024,\n  desktopLarge: 1280\n});\n\n/**\n * @deprecated use {@link https://taiga-ui.dev/services/breakpoint-service TuiBreakpointService}\n * TODO: drop in v4.0\n * Mobile resolution stream for private providers\n */\nconst TUI_IS_MOBILE_RES = tuiCreateTokenFromFactory(() => {\n  const win = inject(WINDOW);\n  const media = inject(TUI_MEDIA);\n  return tuiTypedFromEvent(win, 'resize').pipe(share(), startWith(null), map(() => tuiIsMobile(win, media)), distinctUntilChanged(), tuiZoneOptimized(inject(NgZone)));\n});\n\n/**\n * @internal\n * @deprecated\n * Don't use it! Will be removed after changing the mask.\n */\nconst TUI_LEGACY_MASK = /*#__PURE__*/new InjectionToken('[TUI_LEGACY_MASK]');\n\n/**\n * Mode stream for private providers\n */\nconst TUI_MODE = /*#__PURE__*/new InjectionToken('[TUI_MODE]');\n\n/** @deprecated remove export */\nconst STATUS_ICON = {\n  info: 'tuiIconInfo',\n  success: 'tuiIconCheckCircle',\n  error: 'tuiIconXCircle',\n  warning: 'tuiIconAlertCircle',\n  neutral: 'tuiIconInfo'\n};\n/** Default values for the notification options. */\nconst TUI_NOTIFICATION_DEFAULT_OPTIONS = {\n  autoClose: 3000,\n  label: '',\n  status: 'info',\n  hasCloseButton: true,\n  icon: ({\n    $implicit\n  }) => STATUS_ICON[$implicit],\n  size: 'm',\n  hasIcon: true,\n  defaultAutoCloseTime: 3000\n};\n/**\n * Default parameters for notification alert component\n */\nconst TUI_NOTIFICATION_OPTIONS = tuiCreateToken(TUI_NOTIFICATION_DEFAULT_OPTIONS);\nfunction tuiNotificationOptionsProvider(options) {\n  return tuiProvideOptions(TUI_NOTIFICATION_OPTIONS, options, TUI_NOTIFICATION_DEFAULT_OPTIONS);\n}\n\n/**\n * Formatting configuration for displayed numbers\n */\nconst TUI_NUMBER_FORMAT = tuiCreateToken(TUI_DEFAULT_NUMBER_FORMAT);\nfunction tuiNumberFormatProvider(options) {\n  return tuiProvideOptions(TUI_NUMBER_FORMAT, options, TUI_DEFAULT_NUMBER_FORMAT);\n}\n\n/**\n * Formatting configuration for displayed numbers\n */\nconst TUI_NUMBER_FORMAT_OBSERVABLE = tuiCreateToken(of(Object.assign(Object.assign({}, TUI_DEFAULT_NUMBER_FORMAT), {\n  decimalLimit: NaN\n})));\n\n/**\n * Content for tuiOption component\n */\nconst TUI_OPTION_CONTENT = /*#__PURE__*/new InjectionToken('[TUI_OPTION_CONTENT]');\nfunction tuiAsOptionContent(useValue) {\n  return {\n    provide: TUI_OPTION_CONTENT,\n    useValue\n  };\n}\n\n/**\n * TODO: v4.0 delete the whole file\n */\nconst convertToSundayFirstWeekFormat = weekDaysNames => {\n  const sundayIndex = weekDaysNames.length - 1;\n  return [weekDaysNames[sundayIndex], ...weekDaysNames.slice(0, sundayIndex)];\n};\n/**\n * Ordered calendars i18n texts\n * @deprecated\n */\nconst TUI_ORDERED_SHORT_WEEK_DAYS = tuiCreateTokenFromFactory(() => {\n  const firstDayOfWeekIndex = inject(TUI_FIRST_DAY_OF_WEEK);\n  return inject(TUI_SHORT_WEEK_DAYS).pipe(map(convertToSundayFirstWeekFormat), map(weekDays => [...weekDays.slice(firstDayOfWeekIndex), ...weekDays.slice(0, firstDayOfWeekIndex)]));\n});\n\n/**\n * A custom Sanitizer to sanitize source before inlining\n */\nconst TUI_SANITIZER = /*#__PURE__*/new InjectionToken('[TUI_SANITIZER]');\n\n/**\n * @deprecated import from `@taiga-ui/cdk` instead\n */\nconst TUI_SCROLL_REF = TUI_SCROLL_REF$1;\n\n/**\n * A stream of possible selection changes\n */\nconst TUI_SELECTION_STREAM = tuiCreateTokenFromFactory(() => {\n  const doc = inject(DOCUMENT);\n  return merge(tuiTypedFromEvent(doc, 'selectionchange'), tuiTypedFromEvent(doc, 'mouseup'), tuiTypedFromEvent(doc, 'mousedown').pipe(switchMap(() => tuiTypedFromEvent(doc, 'mousemove').pipe(takeUntil(tuiTypedFromEvent(doc, 'mouseup'))))), tuiTypedFromEvent(doc, 'keydown'), tuiTypedFromEvent(doc, 'keyup')).pipe(share());\n});\nconst TUI_SPIN_ICONS = tuiCreateToken({\n  decrement: 'tuiIconChevronLeft',\n  increment: 'tuiIconChevronRight'\n});\n\n/**\n * Transform function the contents of the loaded svg file\n * @deprecated Use {@link TUI_SVG_OPTIONS} instead\n */\nconst TUI_SVG_CONTENT_PROCESSOR = tuiCreateToken(tuiSvgLinearGradientProcessor);\n\n/**\n * Source path processor for svg\n * @deprecated Use {@link TUI_SVG_OPTIONS} instead\n */\nconst TUI_SVG_SRC_PROCESSOR = tuiCreateToken(identity);\n\n/**\n * Appearance for inputs\n * @deprecated use {@link TUI_TEXTFIELD_APPEARANCE_DIRECTIVE} instead\n * TODO: Remove in 4.0\n */\nconst TUI_TEXTFIELD_APPEARANCE = tuiCreateToken(TuiAppearance.Textfield);\n\n/**\n * An interface to communicate with textfield based controls\n */\nconst TUI_TEXTFIELD_HOST = /*#__PURE__*/new InjectionToken('[TUI_TEXTFIELD_HOST]');\nfunction tuiAsTextfieldHost(useExisting) {\n  return {\n    provide: TUI_TEXTFIELD_HOST,\n    useExisting\n  };\n}\nconst TUI_THEME = tuiCreateToken('Taiga');\n\n/**\n * Buffer token to pass NG_VALUE_ACCESSOR to a different Injector\n */\nconst TUI_VALUE_ACCESSOR = /*#__PURE__*/new InjectionToken('[TUI_VALUE_ACCESSOR]');\n\n/**\n * Viewport accessor\n */\nconst TUI_VIEWPORT = tuiCreateTokenFromFactory(() => {\n  const win = inject(WINDOW);\n  return {\n    type: 'viewport',\n    getClientRect() {\n      return {\n        top: 0,\n        left: 0,\n        right: win.innerWidth,\n        bottom: win.innerHeight,\n        width: win.innerWidth,\n        height: win.innerHeight\n      };\n    }\n  };\n});\nfunction tuiAsViewport(useExisting) {\n  return {\n    provide: TUI_VIEWPORT,\n    useExisting\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { STATUS_ICON, TUI_ANIMATIONS_DEFAULT_DURATION, TUI_ANIMATIONS_DURATION, TUI_ANIMATION_OPTIONS, TUI_ASSERT_ENABLED, TUI_CLOSE_WORD, TUI_COMMON_ICONS, TUI_DATA_LIST_ACCESSOR, TUI_DATA_LIST_HOST, TUI_DAY_TYPE_HANDLER, TUI_DEFAULT_ERROR_MESSAGE, TUI_DEFAULT_ICONS_PLACE, TUI_DOCUMENT_OR_SHADOW_ROOT, TUI_ELEMENT_REF, TUI_FIRST_DAY_OF_WEEK, TUI_ICONS, TUI_ICONS_PATH, TUI_ICONS_PLACE, TUI_IS_MOBILE_RES, TUI_LEGACY_MASK, TUI_MEDIA, TUI_MODE, TUI_MONTHS, TUI_NOTHING_FOUND_MESSAGE, TUI_NOTIFICATION_DEFAULT_OPTIONS, TUI_NOTIFICATION_OPTIONS, TUI_NUMBER_FORMAT, TUI_NUMBER_FORMAT_OBSERVABLE, TUI_OPTION_CONTENT, TUI_ORDERED_SHORT_WEEK_DAYS, TUI_REDUCED_MOTION, TUI_SANITIZER, TUI_SCROLL_REF, TUI_SELECTION_STREAM, TUI_SHORT_WEEK_DAYS, TUI_SPIN_ICONS, TUI_SPIN_TEXTS, TUI_SVG_CONTENT_PROCESSOR, TUI_SVG_SRC_PROCESSOR, TUI_TEXTFIELD_APPEARANCE, TUI_TEXTFIELD_HOST, TUI_THEME, TUI_VALUE_ACCESSOR, TUI_VIEWPORT, tuiAsDataListAccessor, tuiAsDataListHost, tuiAsOptionContent, tuiAsTextfieldHost, tuiAsViewport, tuiCommonIconsProvider, tuiNotificationOptionsProvider, tuiNumberFormatProvider };\n//# sourceMappingURL=taiga-ui-core-tokens.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}