{"ast":null,"code":"import { HttpErrorResponse, HttpStatusCode } from '@angular/common/http';\nimport { Injector, inject } from '@angular/core';\nimport { catchError, throwError } from 'rxjs';\nimport { AuthService } from '../../services';\nimport { isInternalApiUrl } from '../../../core/helpers';\nimport { Router } from '@angular/router';\nexport const authInterceptor = (request, next) => {\n  const injector = inject(Injector);\n  return handleRequest(request, next, injector);\n};\nconst handleRequest = (request, next, injector) => {\n  const authService = injector.get(AuthService);\n  const isApiUrl = isInternalApiUrl(request) || request.url.startsWith('https://api.teyca.ru');\n  if (authService.hasValidAccessToken && isApiUrl) {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${authService.accessToken}`\n      }\n    });\n  }\n  return next(request).pipe(catchError(handleError(injector, request, next)));\n};\nconst handleError = (injector, request, next) => {\n  const toRequestWithRefreshedToken = () => handleRequest(request, next, injector);\n  return error => {\n    if (isUnauthorizedError(error)) {\n      const authService = injector.get(AuthService);\n      const router = injector.get(Router);\n      authService.logout();\n      router.navigate(['/login']);\n    }\n    return throwError(() => error);\n  };\n};\nconst isUnauthorizedError = error => error instanceof HttpErrorResponse && error.status === HttpStatusCode.Unauthorized;\n// refresh flow removed","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}