{"ast":null,"code":"import { ClientsUpsertFormService } from './../clients-upsert-dialog-form/clients-upsert-dialog-form.service';\nimport { inject, signal } from '@angular/core';\nimport { NotificationsService } from '../../../../../../../core/services';\nimport { CLIENT_ACTION_LABEL_MAP, ClientActionType, ClientApiService } from '../../../../../../api';\nimport { catchError, finalize, of, take, tap } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ClientsListDataSourceService } from '../../../../services';\nimport * as i0 from \"@angular/core\";\nexport let ClientsUpsertDialogService = /*#__PURE__*/(() => {\n  class ClientsUpsertDialogService {\n    #clientUpsertFormService = inject(ClientsUpsertFormService);\n    #clientApiService = inject(ClientApiService);\n    #clientsListDataSourceService = inject(ClientsListDataSourceService);\n    #notificationsService = inject(NotificationsService);\n    #route = inject(ActivatedRoute);\n    #id = this.#route.snapshot.paramMap.get('id');\n    $isEditable = signal(!!this.id).asReadonly();\n    #isSavingSignal = signal(false, ...(ngDevMode ? [{\n      debugName: \"#isSavingSignal\"\n    }] : []));\n    #isLoadedSignal = signal(true, ...(ngDevMode ? [{\n      debugName: \"#isLoadedSignal\"\n    }] : []));\n    $isSaving = this.#isSavingSignal.asReadonly();\n    $isLoaded = this.#isLoadedSignal.asReadonly();\n    $form = this.#clientUpsertFormService.$form;\n    get id() {\n      return this.#id || '';\n    }\n    initData() {\n      if (!this.$isEditable()) {\n        this.#setIsLoaded();\n        return of(null);\n      }\n      const initForm = client => this.#clientUpsertFormService.initForm(client);\n      return this.#clientApiService.getClient(this.id).pipe(tap(initForm), finalize(this.#setIsLoaded));\n    }\n    save(client) {\n      const actionType = this.id ? ClientActionType.Edit : ClientActionType.Add;\n      const action$ = this.id ? this.#clientApiService.updateClient(this.id, client) : this.#clientApiService.addClient(client);\n      return this.#handleAction(action$, actionType);\n    }\n    delete() {\n      const action$ = this.#clientApiService.deleteClient(this.id);\n      return this.#handleAction(action$, ClientActionType.Delete);\n    }\n    #handleAction(action, actionType) {\n      this.#setIsSaving(true);\n      const showSuccess = () => this.#handleSuccess(actionType);\n      const handleError = error => this.#handleError(error, actionType);\n      const refresh = () => this.#clientsListDataSourceService.refresh();\n      return action.pipe(tap(showSuccess), catchError(handleError), finalize(this.#setIsSaving), finalize(refresh));\n    }\n    #handleSuccess(actionType) {\n      const label = CLIENT_ACTION_LABEL_MAP[actionType];\n      this.#notificationsService.showSuccess(`Удалось ${label} клиента`).pipe(take(1)).subscribe();\n    }\n    #handleError(error, actionType) {\n      const label = CLIENT_ACTION_LABEL_MAP[actionType];\n      this.#notificationsService.showError(`Не удалось ${label} клиента: ${error.error}`).pipe(take(1)).subscribe();\n      return of(null);\n    }\n    #setIsSaving = (isSaving = false) => this.#isSavingSignal.set(isSaving);\n    #setIsLoaded = (isLoaded = false) => this.#isLoadedSignal.set(isLoaded);\n    static ɵfac = function ClientsUpsertDialogService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ClientsUpsertDialogService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClientsUpsertDialogService,\n      factory: ClientsUpsertDialogService.ɵfac\n    });\n  }\n  return ClientsUpsertDialogService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}