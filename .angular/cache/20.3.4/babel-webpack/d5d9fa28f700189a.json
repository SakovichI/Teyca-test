{"ast":null,"code":"import { __rest, __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, ContentChildren, HostBinding, HostListener, Directive, NgModule } from '@angular/core';\nimport * as i6 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport { maskitoParseNumber, maskitoNumberOptionsGenerator, maskitoCaretGuard } from '@maskito/kit';\nimport * as i7 from '@taiga-ui/cdk';\nimport { tuiCreateToken, tuiProvideOptions, AbstractTuiNullableControl, EMPTY_QUERY, tuiClamp, CHAR_HYPHEN, CHAR_MINUS, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { tuiGetFractionPartPadded, tuiFormatNumber, TUI_NUMBER_FORMAT, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TEXTFIELD_CONTROLLER_PROVIDER, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiButtonModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport * as i5 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusOutletDirective, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i2 from '@taiga-ui/kit/directives';\nimport { TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i3 from '@maskito/angular';\nimport { MaskitoModule } from '@maskito/angular';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/** Default values for the input number options. */\nconst _c0 = [\"*\", [[\"input\"]], [[\"tuiContent\"]]];\nconst _c1 = [\"*\", \"input\", \"tuiContent\"];\nfunction TuiInputNumberComponent_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r2 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", text_r2, \" \");\n  }\n}\nfunction TuiInputNumberComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, TuiInputNumberComponent_div_4_ng_container_1_Template, 2, 1, \"ng-container\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const valueContent_r3 = i0.ɵɵreference(9);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"polymorpheusOutlet\", valueContent_r3);\n  }\n}\nfunction TuiInputNumberComponent_section_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 8)(1, \"button\", 9);\n    i0.ɵɵlistener(\"click.prevent\", function TuiInputNumberComponent_section_5_Template_button_click_prevent_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onArrow(ctx_r4.step));\n    })(\"mousedown.prevent\", function TuiInputNumberComponent_section_5_Template_button_mousedown_prevent_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.nativeFocusableElement == null ? null : ctx_r4.nativeFocusableElement.focus());\n    });\n    i0.ɵɵtext(2, \" + \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 9);\n    i0.ɵɵlistener(\"click.prevent\", function TuiInputNumberComponent_section_5_Template_button_click_prevent_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onArrow(-ctx_r4.step));\n    })(\"mousedown.prevent\", function TuiInputNumberComponent_section_5_Template_button_mousedown_prevent_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.nativeFocusableElement == null ? null : ctx_r4.nativeFocusableElement.focus());\n    });\n    i0.ɵɵtext(4, \" - \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    const textfield_r6 = i0.ɵɵreference(1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"appearance\", textfield_r6.appearance)(\"disabled\", !ctx_r4.canIncrement)(\"focusable\", false)(\"icon\", ctx_r4.options.icons.up);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"appearance\", textfield_r6.appearance)(\"disabled\", !ctx_r4.canDecrement)(\"focusable\", false)(\"icon\", ctx_r4.options.icons.down);\n  }\n}\nfunction TuiInputNumberComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TuiInputNumberComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nconst TUI_INPUT_NUMBER_DEFAULT_OPTIONS = {\n  icons: {\n    up: 'tuiIconPlus',\n    down: 'tuiIconMinus'\n  },\n  min: Number.MIN_SAFE_INTEGER,\n  max: Number.MAX_SAFE_INTEGER,\n  step: 0,\n  decimal: 'not-zero',\n  precision: 2\n};\n/**\n * Default parameters for input count component\n */\nconst TUI_INPUT_NUMBER_OPTIONS = tuiCreateToken(TUI_INPUT_NUMBER_DEFAULT_OPTIONS);\nfunction tuiInputNumberOptionsProvider(options) {\n  return tuiProvideOptions(TUI_INPUT_NUMBER_OPTIONS, options, TUI_INPUT_NUMBER_DEFAULT_OPTIONS);\n}\nconst DEFAULT_MAX_LENGTH = 18;\nconst TUI_NUMBER_VALUE_TRANSFORMER = /*#__PURE__*/new InjectionToken('');\nlet TuiInputNumberComponent = /*#__PURE__*/(() => {\n  class TuiInputNumberComponent extends AbstractTuiNullableControl {\n    constructor(control, cdr, transformer, options, numberFormat, isIOS, textfieldSize, controller) {\n      super(control, cdr, transformer);\n      this.options = options;\n      this.numberFormat = numberFormat;\n      this.isIOS = isIOS;\n      this.textfieldSize = textfieldSize;\n      this.controller = controller;\n      this.unfinishedValue = '';\n      this.min = this.options.min;\n      this.max = this.options.max;\n      this.decimal = this.options.decimal;\n      this.precision = this.options.precision;\n      this.step = this.options.step;\n      /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */\n      this.prefix = '';\n      /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */\n      this.postfix = '';\n      this.polymorpheusValueContent = EMPTY_QUERY;\n    }\n    get size() {\n      return this.textfieldSize.size;\n    }\n    get computedMin() {\n      return this.computeMin(this.min, this.max);\n    }\n    get computedMax() {\n      return this.computeMax(this.min, this.max);\n    }\n    get nativeFocusableElement() {\n      return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;\n    }\n    get focused() {\n      var _a;\n      return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);\n    }\n    get isNegativeAllowed() {\n      return this.computedMin < 0;\n    }\n    get inputMode() {\n      if (this.isIOS && this.isNegativeAllowed) {\n        // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'\n        return 'text';\n      }\n      return this.decimal === 'never' ? 'numeric' : 'decimal';\n    }\n    get calculatedMaxLength() {\n      const decimalPart = this.decimal !== 'never' && this.nativeValue.includes(this.numberFormat.decimalSeparator);\n      const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;\n      const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;\n      return DEFAULT_MAX_LENGTH + precision + takeThousand;\n    }\n    get formattedValue() {\n      return this.value !== null ? this.getFormattedValue(this.value || 0) : '';\n    }\n    get computedValue() {\n      return this.focused ? this.nativeValue : this.formattedValue;\n    }\n    get canDecrement() {\n      return this.interactive && (this.value || 0) > this.computedMin;\n    }\n    get canIncrement() {\n      return this.interactive && (this.value || 0) < this.computedMax;\n    }\n    get computedPrefix() {\n      return this.prefix || this.controller.prefix;\n    }\n    get computedPostfix() {\n      const postfix = this.postfix || this.controller.postfix;\n      return postfix && ` ${postfix}`;\n    }\n    get mask() {\n      return this.calculateMask(this.precision, this.decimal, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.computedMin, this.computedMax, this.computedPrefix, this.computedPostfix);\n    }\n    onArrow(step) {\n      if (!step) {\n        return;\n      }\n      this.value = tuiClamp((this.value || 0) + step, this.computedMin, this.computedMax);\n      this.nativeValue = this.formattedValue;\n    }\n    onValueChange(nativeValue) {\n      const parsedValue = maskitoParseNumber(nativeValue, this.numberFormat.decimalSeparator);\n      this.unfinishedValue = null;\n      if (Number.isNaN(parsedValue)) {\n        this.value = null;\n        return;\n      }\n      if (this.isNativeValueNotFinished) {\n        this.unfinishedValue = nativeValue;\n        this.cdr.markForCheck();\n        return;\n      }\n      if (parsedValue < this.computedMin || parsedValue > this.computedMax) {\n        return;\n      }\n      this.value = parsedValue;\n    }\n    onFocused(focused) {\n      this.updateFocused(focused);\n      const nativeNumberValue = this.unfinishedValue ? maskitoParseNumber(this.unfinishedValue, this.numberFormat.decimalSeparator) : this.nativeNumberValue;\n      this.unfinishedValue = null;\n      if (Number.isNaN(nativeNumberValue)) {\n        this.nativeValue = focused && !this.readOnly ? this.computedPrefix + this.computedPostfix : '';\n        this.value = null;\n        return;\n      }\n      if (!focused) {\n        this.value = nativeNumberValue;\n        this.nativeValue = this.formattedValue;\n      }\n    }\n    getFormattedValue(value) {\n      const absValue = Math.abs(value);\n      const hasFraction = absValue % 1 > 0;\n      let decimalLimit = this.decimal === 'always' || hasFraction && this.decimal !== 'never' ? this.precision : 0;\n      const fraction = hasFraction ? tuiGetFractionPartPadded(value, this.precision) : '';\n      if (this.focused && this.decimal !== 'always') {\n        decimalLimit = fraction.length;\n      }\n      return this.computedPrefix + tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), {\n        decimalLimit\n      })).replace(CHAR_HYPHEN, CHAR_MINUS) + this.computedPostfix;\n    }\n    get isNativeValueNotFinished() {\n      const nativeNumberValue = this.nativeNumberValue;\n      return nativeNumberValue < 0 ? nativeNumberValue > this.computedMax : nativeNumberValue < this.computedMin;\n    }\n    get nativeValue() {\n      var _a;\n      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';\n    }\n    set nativeValue(value) {\n      if (!this.textfield || !this.nativeFocusableElement) {\n        return;\n      }\n      this.textfield.value = value;\n      this.nativeFocusableElement.value = value;\n    }\n    writeValue(value) {\n      super.writeValue(value);\n      this.nativeValue = this.formattedValue;\n    }\n    get nativeNumberValue() {\n      return maskitoParseNumber(this.nativeValue, this.numberFormat.decimalSeparator);\n    }\n    computeMin(min, max) {\n      var _a, _b, _c, _d, _e, _f;\n      return Math.min((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);\n    }\n    computeMax(min, max) {\n      var _a, _b, _c, _d, _e, _f;\n      return Math.max((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);\n    }\n    calculateMask(precision, decimalMode, decimalSeparator, thousandSeparator, min, max, prefix, postfix) {\n      const _a = maskitoNumberOptionsGenerator({\n          decimalSeparator,\n          thousandSeparator,\n          min,\n          max,\n          prefix,\n          postfix,\n          precision: decimalMode === 'never' ? 0 : precision,\n          decimalZeroPadding: decimalMode === 'always',\n          // https://github.com/taiga-family/maskito/issues/703\n          decimalPseudoSeparators: ['.', ',', 'б', 'ю'].filter(x => !`${prefix}${postfix}`.includes(x))\n        }),\n        {\n          plugins\n        } = _a,\n        options = __rest(_a, [\"plugins\"]);\n      return Object.assign(Object.assign({}, options), {\n        plugins: [...plugins, maskitoCaretGuard(value => [prefix.length, value.length - postfix.length])]\n      });\n    }\n  }\n  TuiInputNumberComponent.ɵfac = function TuiInputNumberComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputNumberComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_NUMBER_VALUE_TRANSFORMER, 8), i0.ɵɵdirectiveInject(TUI_INPUT_NUMBER_OPTIONS), i0.ɵɵdirectiveInject(TUI_NUMBER_FORMAT), i0.ɵɵdirectiveInject(TUI_IS_IOS), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER));\n  };\n  TuiInputNumberComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TuiInputNumberComponent,\n    selectors: [[\"tui-input-number\"]],\n    contentQueries: function TuiInputNumberComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PolymorpheusOutletDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.polymorpheusValueContent = _t);\n      }\n    },\n    viewQuery: function TuiInputNumberComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function TuiInputNumberComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.arrowDown\", function TuiInputNumberComponent_keydown_arrowDown_HostBindingHandler() {\n          return ctx.onArrow(-ctx.step);\n        })(\"keydown.arrowUp\", function TuiInputNumberComponent_keydown_arrowUp_HostBindingHandler() {\n          return ctx.onArrow(ctx.step);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-size\", ctx.size);\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      decimal: \"decimal\",\n      precision: \"precision\",\n      step: \"step\",\n      prefix: \"prefix\",\n      postfix: \"postfix\"\n    },\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputNumberComponent), tuiAsControl(TuiInputNumberComponent), TEXTFIELD_CONTROLLER_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 10,\n    vars: 14,\n    consts: [[\"textfield\", \"\"], [\"valueContent\", \"\"], [\"tuiTextfieldPostfix\", \"\", \"tuiTextfieldPrefix\", \"\", \"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"focusedChange\", \"valueChange\", \"disabled\", \"focusable\", \"invalid\", \"maskito\", \"pseudoActive\", \"pseudoFocus\", \"pseudoHover\", \"readOnly\", \"value\"], [\"ngProjectAs\", \"tuiContent\", \"class\", \"t-value-content\", 5, [\"tuiContent\"], 4, \"ngIf\"], [\"class\", \"t-buttons\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngProjectAs\", \"tuiContent\", 5, [\"tuiContent\"], 1, \"t-value-content\"], [4, \"polymorpheusOutlet\"], [1, \"t-buttons\"], [\"size\", \"s\", \"tuiIconButton\", \"\", \"type\", \"button\", 1, \"t-button\", 3, \"click.prevent\", \"mousedown.prevent\", \"appearance\", \"disabled\", \"focusable\", \"icon\"]],\n    template: function TuiInputNumberComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵelementStart(0, \"tui-primitive-textfield\", 2, 0);\n        i0.ɵɵlistener(\"focusedChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onFocused($event));\n        })(\"valueChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onValueChange($event));\n        });\n        i0.ɵɵprojection(2);\n        i0.ɵɵprojection(3, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n        i0.ɵɵtemplate(4, TuiInputNumberComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, TuiInputNumberComponent_section_5_Template, 5, 8, \"section\", 4)(6, TuiInputNumberComponent_ng_container_6_Template, 1, 0, \"ng-container\", 5);\n        i0.ɵɵpipe(7, \"async\");\n        i0.ɵɵtemplate(8, TuiInputNumberComponent_ng_template_8_Template, 1, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.computedDisabled)(\"focusable\", ctx.focusable)(\"invalid\", ctx.computedInvalid)(\"maskito\", ctx.mask)(\"pseudoActive\", ctx.pseudoActive)(\"pseudoFocus\", ctx.computedFocused)(\"pseudoHover\", ctx.pseudoHover)(\"readOnly\", ctx.readOnly)(\"value\", ctx.computedValue);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.polymorpheusValueContent.length);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.step);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(7, 12, ctx.polymorpheusValueContent.changes));\n      }\n    },\n    dependencies: [i1.TuiPrimitiveTextfieldComponent, i1.TuiButtonComponent, i1.TuiPrimitiveTextfieldDirective, i1.TuiTextfieldPostfixDirective, i1.TuiTextfieldPrefixDirective, i2.TuiValueAccessorDirective, i3.MaskitoDirective, i4.NgIf, i5.PolymorpheusOutletDirective, i4.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:flex;border-radius:var(--tui-radius-m);text-align:left}.t-textfield[_ngcontent-%COMP%]{flex:1;max-width:100%;border-radius:inherit;text-align:inherit}.t-textfield[_ngcontent-%COMP%]:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.t-value-content[_ngcontent-%COMP%]{width:100%}.t-buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:stretch;margin-left:.125rem;border-radius:inherit}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]{flex-direction:row-reverse}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:first-child{margin:0 0 0 .125rem;border-top-right-radius:inherit;border-bottom-right-radius:inherit}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:last-child{border-radius:0}[data-size=m][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-m) * .75)}[data-size=l][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-l) * .75)}.t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{display:flex;flex:1;height:auto;border-radius:0}.t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:first-child{margin-bottom:.125rem;border-top-right-radius:inherit}.t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:last-child{border-bottom-right-radius:inherit}\"],\n    changeDetection: 0\n  });\n  __decorate([tuiPure], TuiInputNumberComponent.prototype, \"computeMin\", null);\n  __decorate([tuiPure], TuiInputNumberComponent.prototype, \"computeMax\", null);\n  __decorate([tuiPure], TuiInputNumberComponent.prototype, \"calculateMask\", null);\n  return TuiInputNumberComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputNumberDirective = /*#__PURE__*/(() => {\n  class TuiInputNumberDirective extends AbstractTuiTextfieldHost {\n    get value() {\n      return this.host.computedValue;\n    }\n    onValueChange(value) {\n      this.host.onValueChange(value);\n    }\n    ngDoCheck() {\n      if (!this.host.nativeFocusableElement) {\n        return;\n      }\n      this.host.nativeFocusableElement.inputMode = this.host.inputMode;\n      this.host.nativeFocusableElement.maxLength = this.host.nativeFocusableElement.maxLength > 0 ? this.host.nativeFocusableElement.maxLength : this.host.calculatedMaxLength;\n    }\n  }\n  TuiInputNumberDirective.ɵfac = /* @__PURE__ */(() => {\n    let ɵTuiInputNumberDirective_BaseFactory;\n    return function TuiInputNumberDirective_Factory(__ngFactoryType__) {\n      return (ɵTuiInputNumberDirective_BaseFactory || (ɵTuiInputNumberDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputNumberDirective)))(__ngFactoryType__ || TuiInputNumberDirective);\n    };\n  })();\n  TuiInputNumberDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TuiInputNumberDirective,\n    selectors: [[\"tui-input-number\"]],\n    standalone: false,\n    features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputNumberDirective)]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return TuiInputNumberDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TuiInputNumberModule = /*#__PURE__*/(() => {\n  class TuiInputNumberModule {}\n  TuiInputNumberModule.ɵfac = function TuiInputNumberModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TuiInputNumberModule)();\n  };\n  TuiInputNumberModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TuiInputNumberModule\n  });\n  TuiInputNumberModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MaskitoModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule, TuiButtonModule]]\n  });\n  return TuiInputNumberModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_NUMBER_DEFAULT_OPTIONS, TUI_INPUT_NUMBER_OPTIONS, TUI_NUMBER_VALUE_TRANSFORMER, TuiInputNumberComponent, TuiInputNumberDirective, TuiInputNumberModule, tuiInputNumberOptionsProvider };\n//# sourceMappingURL=taiga-ui-kit-components-input-number.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}